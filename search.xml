<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpEL表达式</title>
      <link href="2021/02/23/spel-biao-da-shi/"/>
      <url>2021/02/23/spel-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring表达式语言（简称“ SpEL”）是一种功能强大的表达式语言，支持在运行时查询和操作对象图。语言语法类似于Unified EL，但提供了其他功能，最著名的是方法调用和基本的字符串模板功能。虽然SpEL是Spring产品组合中表达评估的基础，但它并不直接与Spring绑定，而是可以独立使用。这里我们就针对官网示例做一下学习！</p></blockquote><p><code>SpEL</code>可以在运行时查询和操作数据 ，我们甚至可以将表达式放到数据库，支持实时更新！<code>SpEL</code>表达式语言支持以下功能：</p><ul><li>Literal expressions（字面表达式）</li><li>Boolean and relational operators（布尔运算符和关系运算符）</li><li>Regular expressions（正则表达式）</li><li>Class expressions（类表达式）</li><li>Accessing properties, arrays, lists, and maps（访问属性，数组，列表和map）</li><li>Method invocation（方法调用）</li><li>Relational operators（关系运算符）</li><li>Assignment（赋值）</li><li>Calling constructors（调用构造函数）</li><li>Bean references（bean引用）</li><li>Array construction（构造数组）</li><li>Inline lists（内联列表）</li><li>Inline maps（内联map）</li><li>Ternary operator（三元运算符）</li><li>Variables（变量）</li><li>User-defined functions（用户定义的函数）</li><li>Collection projection（集合投影）</li><li>Collection selection（集合选择）</li><li>Templated expressions（模板表达式）</li></ul><p>这里我直接使用一个<code>spring boot</code>项目来演示（spring版本5.3.4），<code>build.gradle</code>如下：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">plugins <span class="token punctuation">{</span>    id <span class="token string">'org.springframework.boot'</span> version <span class="token string">'2.4.3'</span>    id <span class="token string">'io.spring.dependency-management'</span> version <span class="token string">'1.0.11.RELEASE'</span>    id <span class="token string">'java'</span><span class="token punctuation">}</span>group <span class="token operator">=</span> <span class="token string">'cn.justme'</span>version <span class="token operator">=</span> <span class="token string">'0.0.1-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token string">'1.8'</span>configurations <span class="token punctuation">{</span>    compileOnly <span class="token punctuation">{</span>        extendsFrom annotationProcessor    <span class="token punctuation">}</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    maven <span class="token punctuation">{</span> url <span class="token string">'https://repo.spring.io/milestone'</span> <span class="token punctuation">}</span>    maven <span class="token punctuation">{</span> url <span class="token string gstring">"http://maven.aliyun.com/nexus/content/groups/public/"</span> <span class="token punctuation">}</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    compileOnly <span class="token string">'org.projectlombok:lombok'</span>    testCompileOnly <span class="token string">'org.projectlombok:lombok'</span>    annotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    testAnnotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    testImplementation <span class="token string">'org.springframework.boot:spring-boot-starter-test'</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一-Evaluation"><a href="#一-Evaluation" class="headerlink" title="一. Evaluation"></a>一. Evaluation</h3><blockquote><p>本节介绍SpEL接口的简单用法及其表达语言</p></blockquote><p>示例1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpelTest</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 该 ExpressionParser 接口负责解析表达式字符串     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 评估字符串表达式</span>        <span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'Hello World'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        String message = (String) exp.getValue();</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用javaBean的属性</span>        <span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'Hello World'.concat('!')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 方法属性</span>        <span class="token comment">// SpEL还通过使用标准的点符号（例如prop1.prop2.prop3）以及相应的属性值设置来支持嵌套属性 。也可以访问公共字段。</span>        <span class="token comment">// invokes 'bgetBytes()'</span>        <span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'Hello World'.bytes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">"Hello World"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// invokes 'getBytes().length'</span>        <span class="token class-name">Expression</span> exp1 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'Hello World'.bytes.length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> length <span class="token operator">=</span> exp1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token string">"Hello World"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用构造器</span>        <span class="token class-name">Expression</span> exp <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"new String('Hello World').toUpperCase()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"Hello World"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-EvaluationContext"><a href="#1-EvaluationContext" class="headerlink" title="1. EvaluationContext"></a>1. EvaluationContext</h4><p>在评估表达式以解析属性，方法或字段并帮助执行类型转换时，使用EvaluationContext接口。 Spring提供了两种实现:</p><ul><li>SimpleEvaluationContext: 针对不需要SpEL语言语法完整范围且应受到有意义限制的表达式类别，公开了SpEL基本语言功能和配置选项的子集</li><li>StandardEvaluationContext: 公开了完整的SpEL语言功能和配置选项。您可以使用它来指定默认的根对象并配置每个可用的评估相关策略.</li></ul><p><code>SimpleEvaluationContext</code>设计为仅支持<code>SpEL</code>语言语法的子集。它不包括Java类型引用，构造函数和Bean引用。它还要求您明确选择对表达式中的属性和方法的支持级别。默认情况下，<code>create()</code>静态工厂方法仅启用对属性的读取访问。您还可以获取构建器来配置所需的确切支持级别，并针对以下一种或某些组合：</p><ul><li>Custom <code>PropertyAccessor</code> only (no reflection)</li><li>Data binding properties for read-only access</li><li>Data binding properties for read and write</li></ul><p>示例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Simple</span> simple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    simple<span class="token punctuation">.</span>booleanList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// "false" is passed in here as a String. SpEL and the conversion service</span>    <span class="token comment">// will recognize that it needs to be a Boolean and convert it accordingly.</span>    parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"booleanList[0]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> simple<span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// b is false</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>simple<span class="token punctuation">.</span>booleanList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Parser-Configuration"><a href="#2-Parser-Configuration" class="headerlink" title="2. Parser Configuration"></a>2. Parser Configuration</h4><p>可以使用解析器配置对象（<code>org.springframework.expression.spel.SpelParserConfiguration</code>）配置SpEL表达式解析器。配置对象控制某些表达式组件的行为。例如，如果您索引到数组或集合中，并且指定索引处的元素是<code>null</code>，SpEL可以自动创建元素。当使用由属性引用链组成的表达式时，这很有用。如果您在数组或列表中的索引超出了数组或列表当前大小的末尾，则SpEL可以自动增长数组或列表以容纳该索引。为了在指定的索引处添加元素，SpEL将尝试在设置指定的值之前使用元素类型的默认构造函数创建该元素。如果元素类型没有默认构造函数，<code>null</code>则将其添加到数组或列表中。如果没有知道如何设置值的内置或自定义转换器，<code>null</code>它将保留在数组或列表中的指定索引处。下面的示例演示如何自动增加列表：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Turn on:</span>    <span class="token comment">// - auto null reference initialization</span>    <span class="token comment">// - auto collection growing</span>    <span class="token class-name">SpelParserConfiguration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelParserConfiguration</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Expression</span> expression <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"list[3]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Demo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> o <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// demo.list will now be a real collection of 4 entries</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Each entry is a new empty String</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertLinesMatch</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-SpEL-Compilation"><a href="#3-SpEL-Compilation" class="headerlink" title="3. SpEL Compilation"></a>3. SpEL Compilation</h4><p><code>Spring Framework 4.1</code>包含一个基本的表达式编译器。通常对表达式进行解释，这样可以在评估过程中提供很大的动态灵活性，但不能提供最佳性能。对于偶尔使用表达式来说这很好，但是，当与其他组件（如<code>Spring Integration</code>）一起使用时，性能可能非常重要，并且不需要动态性。</p><p>SpEL编译器旨在满足这一需求。在评估过程中，编译器生成一个Java类，该类体现了运行时的表达式行为，并使用该类来实现更快的表达式评估。由于缺少在表达式周围输入内容的信息，因此编译器在执行编译时会使用在表达式的解释求值过程中收集的信息。例如，它不仅仅从表达式中就知道属性引用的类型，而是在第一次解释求值时就知道它是什么。当然，如果各种表达元素的类型随时间变化，则基于此类派生信息进行编译会在以后引起麻烦。因此，编译最适合类型信息在重复求值时不会改变的表达式。</p><h5 id="Compiler-Configuration（编译器配置）"><a href="#Compiler-Configuration（编译器配置）" class="headerlink" title="Compiler Configuration（编译器配置）"></a>Compiler Configuration（编译器配置）</h5><p>默认情况下不打开编译器，但是您可以通过两种不同的方式之一来打开它。当SpEL用法嵌入到另一个组件中时，可以使用解析器配置过程或使用系统属性(<code>spring.expression.compiler.mode</code>,可选值<code>off</code>, <code>immediate</code>，或<code>mixed</code>)来打开它.</p><p>编译器可以在<code>org.springframework.expression.spel.SpelCompilerMode</code>枚举中捕获的三种模式之一下运行 ,如下：</p><ul><li><code>OFF</code>: 关闭，默认值</li><li><code>IMMEDIATE</code>: 在立即模式下，将尽快编译表达式。通常是在第一次解释评估之后。如果编译后的表达式失败（通常是由于类型更改，如前所述），则表达式求值的调用者将收到异常。</li><li><code>MIXED</code>: 在混合模式下，表达式会随着时间静默在解释模式和编译模式之间切换。经过一定数量的解释运行后，它们会切换到编译形式，如果编译形式出了问题（例如，如前面所述的类型更改），则表达式会自动再次切换回解释形式。稍后，它可能会生成另一个已编译的表单并切换到该形式。基本上，用户进入<code>IMMEDIATE</code>模式的异常是在内部处理的。</li></ul><p><code>IMMEDIATE</code>之所以存在mode，是因为<code>MIXED</code>mode可能会导致具有副作用的表达式出现问题。如果已编译的表达式在部分成功后就崩溃了，则它可能已经完成了影响系统状态的操作。如果发生这种情况，调用者可能不希望它在解释模式下静默地重新运行，因为表达式的一部分可能运行了两次。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 配置编译器</span><span class="token class-name">SpelParserConfiguration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelParserConfiguration</span><span class="token punctuation">(</span><span class="token class-name">SpelCompilerMode</span><span class="token punctuation">.</span>IMMEDIATE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SpelExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Compiler-Limitations（编译器限制）"><a href="#Compiler-Limitations（编译器限制）" class="headerlink" title="Compiler Limitations（编译器限制）"></a>Compiler Limitations（编译器限制）</h5><p>从<code>Spring Framework 4.1</code>开始，已经有了基本的编译框架。但是，该框架尚不支持编译每种表达式。最初的重点是可能在性能关键型上下文中使用的通用表达式。目前无法编译以下类型的表达式：</p><ul><li>涉及赋值的表达</li><li>表达式依赖转换服务</li><li>使用自定义解析器或访问器的表达式</li><li>使用选择或投影的表达式</li></ul><p>将来会编译更多类型的表达。</p><h3 id="二-bean定义中使用表达式"><a href="#二-bean定义中使用表达式" class="headerlink" title="二. bean定义中使用表达式"></a>二. bean定义中使用表达式</h3><p>您可以将<code>SpEL</code>表达式与基于<code>XML</code>或基于注释的配置元数据一起使用来定义<code>BeanDefinition</code>实例。在这两种情况下，定义表达式的语法均为形式<code>#{ &lt;expression string&gt; }</code>。</p><h4 id="1-xml配置"><a href="#1-xml配置" class="headerlink" title="1. xml配置"></a>1. xml配置</h4><p>设置属性或者构造器参数值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>numberGuess<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.spring.samples.NumberGuess<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>randomNumber<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#{ T(java.lang.Math).random() * 100.0 }<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- other properties --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用程序上下文中的所有<code>bean</code>都可以使用其公共<code>bean</code>名称作为预定义变量使用。这包括用于访问运行时环境的标准上下文<code>Bean</code>，例如<code>environment</code>（类型为 <code>org.springframework.core.env.Environment</code>）以及<code>systemProperties</code>和 <code>systemEnvironment</code>（类型为<code>Map&lt;String, Object&gt;</code>）。</p><p>下面的示例显示对<code>systemProperties</code>作为SpEL变量的bean的访问：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>taxCalculator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.spring.samples.TaxCalculator<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultLocale<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#{ systemProperties[<span class="token punctuation">'</span>user.region<span class="token punctuation">'</span>] }<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- other properties --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>numberGuess<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.spring.samples.NumberGuess<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>randomNumber<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#{ T(java.lang.Math).random() * 100.0 }<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- other properties --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shapeGuess<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.spring.samples.ShapeGuess<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initialShapeSeed<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#{ numberGuess.randomNumber }<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- other properties --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-注解配置"><a href="#2-注解配置" class="headerlink" title="2. 注解配置"></a>2. 注解配置</h4><p>若要指定默认值，可以将<code>@Value</code>注释放在字段，方法以及方法或构造函数参数上。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldValueTestBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{ systemProperties['user.region'] }"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token class-name">String</span> defaultLocale<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale <span class="token operator">=</span> defaultLocale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDefaultLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertyValueTestBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{ systemProperties['user.region'] }"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token class-name">String</span> defaultLocale<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale <span class="token operator">=</span> defaultLocale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDefaultLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMovieLister</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">MovieFinder</span> movieFinder<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{ systemProperties['user.region'] }"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>movieFinder <span class="token operator">=</span> movieFinder<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale <span class="token operator">=</span> defaultLocale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRecommender</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CustomerPreferenceDao</span> customerPreferenceDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MovieRecommender</span><span class="token punctuation">(</span><span class="token class-name">CustomerPreferenceDao</span> customerPreferenceDao<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{systemProperties['user.country']}"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> defaultLocale<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customerPreferenceDao <span class="token operator">=</span> customerPreferenceDao<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultLocale <span class="token operator">=</span> defaultLocale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-语言参考"><a href="#三-语言参考" class="headerlink" title="三. 语言参考"></a>三. 语言参考</h3><p>主要涵盖下面几个部分：</p><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-ref-literal">Literal Expressions（字面表达式）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-properties-arrays">Properties, Arrays, Lists, Maps, and Indexers（属性，数组，列表，映射和索引器）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-inline-lists">Inline Lists（内联列表）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-inline-maps">Inline Maps（内联map）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-array-construction">Array Construction（构造数组）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-methods">Methods（方法）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-operators">Operators（操作符）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-types">Types（类型）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-constructors">Constructors（构造器）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-ref-variables">Variables（变量）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-ref-functions">Functions（函数）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-bean-references">Bean References（bean引用）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-operator-ternary">Ternary Operator (If-Then-Else)（三元运算符）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-operator-elvis">The Elvis Operator（Elvis运算符）</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-operator-safe-navigation">Safe Navigation Operator（安全导航符）</a></li></ul><h4 id="1-字面量表达式"><a href="#1-字面量表达式" class="headerlink" title="1. 字面量表达式"></a>1. 字面量表达式</h4><p>支持的字面量表达式的类型为字符串，数值（int，实数，十六进制），布尔值和null。字符串用单引号引起来。要将单引号本身放在字符串中，请使用两个单引号字符。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// evals to "Hello World"</span>    <span class="token class-name">String</span> helloWorld1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'Hello World'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>helloWorld1<span class="token punctuation">,</span> <span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// evals to "'Hello World'"</span>    <span class="token class-name">String</span> helloWorld2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'''Hello World'''"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>helloWorld2<span class="token punctuation">,</span> <span class="token string">"'Hello World'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> avogadrosNumber <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"6.0221415E+23"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>avogadrosNumber<span class="token punctuation">,</span> <span class="token number">6.0221415E+23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// evals to 2147483647</span>    <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"0x7FFFFFFF"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">,</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>trueValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> nullValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNull</span><span class="token punctuation">(</span>nullValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>数字支持使用负号，指数符号和小数点。默认情况下，使用<code>Double.parseDouble()</code>解析实数。</p></blockquote><h4 id="2-属性，数组，列表，映射和索引器"><a href="#2-属性，数组，列表，映射和索引器" class="headerlink" title="2. 属性，数组，列表，映射和索引器"></a>2. 属性，数组，列表，映射和索引器</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PlaceOfBirth</span> placeOfBirth<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> friends<span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> otherInfo<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFriend</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>friends<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> friends<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test9</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPlaceOfBirth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlaceOfBirth</span><span class="token punctuation">(</span><span class="token string">"安徽"</span><span class="token punctuation">,</span> <span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setHobbies</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token string">"basketball"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setFriends</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"lao hu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setOtherInfo</span><span class="token punctuation">(</span><span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token string">"deyi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span>      <span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">withRootObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1. 获取属性</span>    <span class="token class-name">Integer</span> age <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"age + 4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> city <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"placeOfBirth.city"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPlaceOfBirth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 数组和列表的内容通过使用方括号表示法获得</span>    <span class="token class-name">String</span> hobby <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"hobbies[0]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>hobby<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getHobbies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> friend <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"friends[0]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>friend<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 获取map值</span>    <span class="token class-name">String</span> company <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"otherInfo['company']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>company<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getOtherInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注意不能这样获取map值</span>    <span class="token comment">// parser.parseExpression("otherInfo.company").getValue(context, String.class);</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-内联列表"><a href="#3-内联列表" class="headerlink" title="3. 内联列表"></a>3. 内联列表</h4><p>使用<code>{}</code>符号直接在表达式中表达列表:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span>      <span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// evaluates to a Java list containing the four numbers</span>    <span class="token class-name">List</span> numbers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"{1,2,3,4}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertIterableEquals</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span> listOfLists <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"{{'a','b'},{'x','y'}}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertIterableEquals</span><span class="token punctuation">(</span>listOfLists<span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-内联map"><a href="#4-内联map" class="headerlink" title="4. 内联map"></a>4. 内联map</h4><p>使用<code>{key:value}</code>符号直接在表达式中表达map:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test11</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span>      <span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// evaluates to a Java list containing the four numbers</span>    <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"{a: 1}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {a=1}</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertIterableEquals</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-构造数组"><a href="#5-构造数组" class="headerlink" title="5. 构造数组"></a>5. 构造数组</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test12</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span>      <span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"new int[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>numbers1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Array with initializer</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"new int[]{1,2,3}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>numbers2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Multi dimensional array 构造多维数组时，当前无法提供初始化程序</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"new int[4][5]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>numbers3<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-方法"><a href="#6-方法" class="headerlink" title="6. 方法"></a>6. 方法</h4><p>可以使用Java编程语法来调用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test13</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPlaceOfBirth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlaceOfBirth</span><span class="token punctuation">(</span><span class="token string">"安徽"</span><span class="token punctuation">,</span> <span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setHobbies</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token string">"basketball"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setFriends</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"lao hu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setOtherInfo</span><span class="token punctuation">(</span><span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token string">"deyi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不能使用 SimpleEvaluationContext，支持功能有限</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// string literal, evaluates to "bc"</span>    <span class="token class-name">String</span> bc <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'abc'.substring(1, 3)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>bc<span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Boolean</span> value1 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"isFriend('lao hu')"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Boolean</span> value2 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"isFriend('lao xu')"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-操作符"><a href="#7-操作符" class="headerlink" title="7. 操作符"></a>7. 操作符</h4><ul><li>关系运算符</li><li>逻辑运算符</li><li>数学运算符</li><li>赋值运算符</li></ul><h5 id="7-1-关系运算符"><a href="#7-1-关系运算符" class="headerlink" title="7.1 关系运算符"></a>7.1 关系运算符</h5><p>支持等于，不等于，小于，小于或等于，大于和大于或等于。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test14</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Boolean</span> value1 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"1 == 1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Boolean</span> value2 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"1 == 2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Boolean</span> value3 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"1 &lt; 2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// evaluates to true</span>    <span class="token keyword">boolean</span> value4 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'black' &lt; 'block'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> value5 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'black' == 'black'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> value6 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"1 + 1 &lt;= 3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value6<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 与之进行的大于和小于比较null遵循一个简单的规则：null被视为无（不是零）。</span>    <span class="token comment">// 任何其他值始终大于null（X &gt; null始终为true），并且其他任何值都不小于零（X &lt; null始终为false）</span>    <span class="token keyword">boolean</span> value7 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"1 &gt; null"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> value8 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"1 &lt; null"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>value8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> value9 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'a' &lt; null"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>value9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> value10 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'a' &gt; null"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value10<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> value11 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"null == null"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value11<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SpEL</code>还支持<code>instanceof</code>和基于正则表达式的<code>matches</code>运算符:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test15</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> value1 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>      <span class="token string">"'xyz' instanceof T(Integer)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> value2 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>      <span class="token string">"'5.00' matches '^-?\\d+(\\.\\d{2})?$'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> value3 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>      <span class="token string">"'5.0067' matches '^-?\\d+(\\.\\d{2})?$'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>value3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 请注意基本类型，因为它们会立即被包装为包装器类型，因此按预期</span>    <span class="token comment">// 1 instanceof T(int)计算，false</span>    <span class="token comment">// 1 instanceof T(Integer) 计算结果true为。</span>    <span class="token keyword">boolean</span> value4 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>      <span class="token string">"1 instanceof T(Integer)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value4<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> value5 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>      <span class="token string">"1 instanceof T(int)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>value5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个符号运算符也可以指定为纯字母等效项。这样可以避免出现以下问题：所使用的符号对于嵌入表达式的文档类型具有特殊含义（例如在XML文档中）。等效的文字是：</p><ul><li><code>lt</code> (<code>&lt;</code>)</li><li><code>gt</code> (<code>&gt;</code>)</li><li><code>le</code> (<code>&lt;=</code>)</li><li><code>ge</code> (<code>&gt;=</code>)</li><li><code>eq</code> (<code>==</code>)</li><li><code>ne</code> (<code>!=</code>)</li><li><code>div</code> (<code>/</code>)</li><li><code>mod</code> (<code>%</code>)</li><li><code>not</code> (<code>!</code>)</li></ul><h5 id="7-2-逻辑运算符"><a href="#7-2-逻辑运算符" class="headerlink" title="7.2 逻辑运算符"></a>7.2 逻辑运算符</h5><p>SpEL支持以下逻辑运算符</p><ul><li><code>and</code>（<code>&amp;&amp;</code>）</li><li><code>or</code>（<code>||</code>）</li><li><code>not</code>（<code>!</code>）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test16</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> value1 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"true and false"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> value2 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"true or false"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> value3 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"!true"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>value3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-3-数学运算符"><a href="#7-3-数学运算符" class="headerlink" title="7.3 数学运算符"></a>7.3 数学运算符</h5><p>您可以在数字和字符串上使用加法运算符。您只能在数字上使用减法，乘法和除法运算符。您还可以使用模数（％）和指数幂（^）运算符。强制执行标准运算符优先级。以下示例显示了正在使用的数学运算符</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test17</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> value1 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"1 + 1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> value2 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"'test' + ' ' + 'string'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value2<span class="token punctuation">,</span> <span class="token string">"test string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value3 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"1 - -3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value3<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> value4 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"1000.00 - 1e4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value4<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value5 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"-2 * -3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value5<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> value6 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"2.0 * 3e0 * 4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value6<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value7 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"6 / -3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value7<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> value8 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"8.0 / 4e0 / 2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value8<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value9 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"7 % 4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value9<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value10 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"8 / 5 % 2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value10<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value11 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"1+2-3*8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value11<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-4-赋值运算符"><a href="#7-4-赋值运算符" class="headerlink" title="7.4 赋值运算符"></a>7.4 赋值运算符</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test18</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注意 不是 forReadOnlyDataBinding 只读了</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadWriteDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 方法一</span>    parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 方法二，使用 "=" 号</span>    <span class="token class-name">Integer</span> age <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>      <span class="token string">"age = 24"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-类型"><a href="#8-类型" class="headerlink" title="8. 类型"></a>8. 类型</h4><p>您可以使用特殊<code>T</code>运算符指定<code>java.lang.Class</code>（类型）的实例。静态方法也可以通过使用此运算符来调用。<code>T()</code>对其中的类型的引用<code>java.lang</code>不需要完全限定，但是所有其他类型的引用都必须是完全限定的。以下示例显示如何使用<code>T</code>运算符：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test19</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Class</span> dateClass <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"T(java.util.Date)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>dateClass<span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> stringClass <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"T(String)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>stringClass<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>      <span class="token string">"T(Integer).MIN_VALUE &lt; T(Integer).MAX_VALUE"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>trueValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-构造器"><a href="#9-构造器" class="headerlink" title="9. 构造器"></a>9. 构造器</h4><p>您可以使用<code>new</code>运算符来调用构造函数。除了基本类型（<code>int</code>，<code>float</code>等）和String之外，您都应使用完全限定的类名。下面的示例演示如何使用<code>new</code>运算符来调用构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test20</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"new cn.justme.demo20210222.bean.User()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-变量"><a href="#10-变量" class="headerlink" title="10. 变量"></a>10. 变量</h4><p>您可以使用<code>#variableName</code>语法在表达式中引用变量。通过<code>setVariable</code>在<code>EvaluationContext</code>实现中使用方法来设置变量:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test21</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"shi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadWriteDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置变量</span>    context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"newName"</span><span class="token punctuation">,</span> <span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> value <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"username = #newName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// shiv</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="this-和-root"><a href="#this-和-root" class="headerlink" title="#this 和 #root"></a>#this 和 #root</h5><p><code>#this</code>始终定义并引用当前评估对象，<code>#root</code>始终定义并引用根上下文对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test22</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// create an array of integers</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primes <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// create parser and set variable 'primes' as the array of integers</span>    <span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"primes"</span><span class="token punctuation">,</span> primes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// all prime numbers &gt; 10 from the list (using selection ?{...})</span>    <span class="token comment">// evaluates to [11, 13, 17]</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primesGreaterThanTen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>      <span class="token string">"#primes.?[#this &gt; 10]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertIterableEquals</span><span class="token punctuation">(</span>primesGreaterThanTen<span class="token punctuation">,</span> primes<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-函数"><a href="#11-函数" class="headerlink" title="11. 函数"></a>11. 函数</h4><p>我们还可以通过自定义函数来拓展<code>SpEL</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StringUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> backwards <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            backwards<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> backwards<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test23</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">{</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Only static methods can be called via function references</span>    context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"reverseString"</span><span class="token punctuation">,</span>                        <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"reverseString"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> helloWorldReversed <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>      <span class="token string">"#reverseString('hello')"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>helloWorldReversed<span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-Bean引用"><a href="#12-Bean引用" class="headerlink" title="12. Bean引用"></a>12. Bean引用</h4><p>如果评估上下文已使用bean解析器配置，则可以使用<code>@</code>符号从表达式中查找bean.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpelTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StandardEvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setBeanResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanFactoryResolver</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> result <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"@systemProperties"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">Properties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210223135712122.png" alt="image-20210223135712122"></p><h4 id="13-三元运算符"><a href="#13-三元运算符" class="headerlink" title="13. 三元运算符"></a>13. 三元运算符</h4><p>使用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> falseString <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>        <span class="token string">"false ? 'trueExp' : 'falseExp'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="14-Elvis运算符"><a href="#14-Elvis运算符" class="headerlink" title="14. Elvis运算符"></a>14. Elvis运算符</h4><p>Elvis运算符是三元运算符语法的简化：</p><pre class="line-numbers language-none"><code class="language-none">name != null? name : "other" 可简写为 name?:"other"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test24</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"mail"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> value1 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"#name?:'xu'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> <span class="token string">"xu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Boolean</span> value2 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"#mail?:true"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15-安全导航符"><a href="#15-安全导航符" class="headerlink" title="15. 安全导航符"></a>15. 安全导航符</h4><p>安全导航运算符主要用于避免NullPointerException！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test25</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPlaceOfBirth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlaceOfBirth</span><span class="token punctuation">(</span><span class="token string">"安徽"</span><span class="token punctuation">,</span> <span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> city1<span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"placeOfBirth?.city"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>city1<span class="token punctuation">,</span> <span class="token string">"安徽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPlaceOfBirth</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> city2 <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"placeOfBirth?.city"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNull</span><span class="token punctuation">(</span>city2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会抛出空指针</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="16-集合选择"><a href="#16-集合选择" class="headerlink" title="16. 集合选择"></a>16. 集合选择</h4><p>选择是一种强大的表达语言功能，可让您通过从源集合中进行选择来将其转换为另一个集合，语法<code>.?[selectionExpression]</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test26</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span> value <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"#list.?[#this % 2 == 0]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertIterableEquals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user1<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"shiv1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user1<span class="token punctuation">.</span><span class="token function">setPlaceOfBirth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlaceOfBirth</span><span class="token punctuation">(</span><span class="token string">"安徽"</span><span class="token punctuation">,</span> <span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user2<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"shiv2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user2<span class="token punctuation">.</span><span class="token function">setPlaceOfBirth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlaceOfBirth</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"#users.?[username == 'shiv1']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 或者</span>    <span class="token comment">//        List&lt;User&gt; users = (List&lt;User&gt;) parser.parseExpression("#users.?[#this.username == 'shiv1']").getValue(context);</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"shiv1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 针对map，将每个map条目（ Map.Entry）作为评估选择标准。每个map条目都有其键和值，可作为属性进行访问以供选择。</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"#map.?[value % 2 == 0]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {b=2, d=4}</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"#map.?[key == 'a']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {a=1}</span>      <span class="token comment">// 要获得与所选内容匹配的第一个条目，语法为 .^[selectionExpression]。要获取最后的匹配选择，语法为 .$[selectionExpression]</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"#map.^[value &gt; 1]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {b=2}</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"#map.$[value &gt; 1]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {d=4}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="17-集合投影"><a href="#17-集合投影" class="headerlink" title="17. 集合投影"></a>17. 集合投影</h4><p>投影使集合可以驱动子表达式的求值，结果是一个新的集合。投影的语法为<code>.![projectionExpression]</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test27</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">EvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user1<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"shiv1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user1<span class="token punctuation">.</span><span class="token function">setPlaceOfBirth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlaceOfBirth</span><span class="token punctuation">(</span><span class="token string">"安徽"</span><span class="token punctuation">,</span> <span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user2<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"shiv2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user2<span class="token punctuation">.</span><span class="token function">setPlaceOfBirth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlaceOfBirth</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> value1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"#users.![username]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertIterableEquals</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"shiv1"</span><span class="token punctuation">,</span> <span class="token string">"shiv2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="18-表达式模板"><a href="#18-表达式模板" class="headerlink" title="18. 表达式模板"></a>18. 表达式模板</h4><p>表达式模板允许将文字文本与一个或多个评估块混合。每个评估块均以您可以定义的前缀和后缀字符分隔。常见的选择是<code>#{ }</code>用作定界符，如以下示例所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test28</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> randomPhrase <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>      <span class="token string">"random number is #{T(java.lang.Math).random()}"</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">TemplateParserContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>randomPhrase<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// random number is 0.2509113639671299</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四-参考"><a href="#四-参考" class="headerlink" title="四. 参考"></a>四. 参考</h3><ul><li>[1] <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions">SpEL doc</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpEL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在注解中使用方法参数值</title>
      <link href="2021/02/22/zai-zhu-jie-zhong-shi-yong-fang-fa-can-shu-zhi/"/>
      <url>2021/02/22/zai-zhu-jie-zhong-shi-yong-fang-fa-can-shu-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当注解使用在方法上时，注解里怎么能够拿到方法上的参数值呢？如果你使用过<a href="https://spring.io/guides/gs/caching/">spring cache</a>就知道，我们可以使用<a href="/2021/02/23/spel-biao-da-shi/" title="SpEL表达式">SpEL表达式</a>拿到方法参数，那么我们自定义的注解怎么实现类似的功能呢?</p></blockquote><p>之前我们在<a href="/2019/06/29/spring-boot-2-shi-xian-fen-bu-shi-suo/" title="Spring-Boot-2实现分布式锁">Spring-Boot-2实现分布式锁</a>讲过了在<code>spring boot</code>一种分布式锁的使用方法。但是每次使用时我们都需要硬编写一些模板代码，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisLockRegistry</span> redisLockRegistry<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token comment">// name 作为 lockKey</span>    <span class="token keyword">final</span> <span class="token class-name">Lock</span> obtain <span class="token operator">=</span> redisLockRegistry<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"获取锁: {}"</span><span class="token punctuation">,</span> obtain<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obtain<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==== 执行业务逻辑 ===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            obtain<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"==== 获取锁失败 ===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里获取锁，释放锁的代码基本都是固定的，为了避免每次写类似的代码，我们可以利用<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop">aop</a>将固定的模板代码抽取出来，而我们的方法只关注业务逻辑！要这样做我们可以参考<code>spring cache</code>的实现，我们自定义一个注解:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DistributedLock</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 分布式锁key     */</span>    <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取锁失败提示     */</span>    <span class="token class-name">String</span> <span class="token function">failMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是有个问题，注解里面的<code>key</code>我们不能定义死，这样就会对标记的方法加同一把锁，但是实际情况下，同一个方法，我们需要根据参数来确定使用什么作为<code>lockKey</code>.既然<code>key</code>要动态获取方法参数，怎么才能拿到方法参数呢？怎么定义<code>key</code>的表达式呢？这些问题我们不需要全部自己实现，<code>spring</code>里已提供了解决方案。要拿到方法的参数名称，在<code>java8</code>之前是没法直接通过反射获取到的，在<code>java8</code>编译的时候使用<code>-parameters</code>，可以在 编译的时候生成元数据以用于方法参数的反射。但是在<code>java8</code>之前就要通过比如<code>ASM library </code>工具分许<code>class</code>文件，拿到对应的参数名称。不管什么情况，我们可以统一使用<code>spring</code>提供<code>ParameterNameDiscoverer</code>来获取参数名称，该接口有一个实现<code>DefaultParameterNameDiscoverer</code>，该解析类提供了两个解析方法参数的类，一个使用<code>java</code>反射的<code>StandardReflectionParameterNameDiscoverer</code>，一个使用<code>ASM library </code>的<code>LocalVariableTableParameterNameDiscoverer</code>,当第一个获取为<code>null</code>的时候就是用第二个来获取。解决了拿到方法参数的问题之后，我们怎么能拿到方法参数里面的值呢，我们可以使用<code>spel</code>！直接看代码！</p><h3 id="定义切面"><a href="#定义切面" class="headerlink" title="定义切面"></a>定义切面</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributedLockAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisLockRegistry</span> redisLockRegistry<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SpelExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ParameterNameDiscoverer</span> parameterNameDiscoverer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"@annotation(distributedLock)"</span><span class="token punctuation">,</span> argNames <span class="token operator">=</span> <span class="token string">"distributedLock"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">distributedLockAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">,</span> <span class="token class-name">DistributedLock</span> distributedLock<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>distributedLock<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"key不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取方法参数</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取方法参数名称</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterNames <span class="token operator">=</span> parameterNameDiscoverer<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建spel上下文</span>        <span class="token class-name">SimpleEvaluationContext</span> context <span class="token operator">=</span> <span class="token class-name">SimpleEvaluationContext</span><span class="token punctuation">.</span><span class="token function">forReadOnlyDataBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span>parameterNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 解析spel参数</span>        <span class="token class-name">Expression</span> expression <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>distributedLock<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> <span class="token string">"lockKey不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 加分布式锁</span>        <span class="token class-name">Lock</span> obtain <span class="token operator">=</span> redisLockRegistry<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始获取锁: {}"</span><span class="token punctuation">,</span> lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obtain<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 执行业务逻辑</span>                <span class="token keyword">return</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment">// 释放`锁</span>                obtain<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"==== 获取锁失败 ===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>distributedLock<span class="token punctuation">.</span><span class="token function">failMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> distributedLock<span class="token punctuation">.</span><span class="token function">failMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"获取锁失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拦截方法"><a href="#拦截方法" class="headerlink" title="拦截方法"></a>拦截方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DistributedLock</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"#name"</span><span class="token punctuation">)</span> <span class="token comment">// 使用 spel 表达式</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==== 执行业务逻辑开始 ===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==== 执行业务逻辑完成 ===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210222151207651.png" alt="image-20210222151207651"></p><p>运行日志：</p><pre class="line-numbers language-none"><code class="language-none">2021-02-22 15:12:27.333  INFO [demo,370811965c990d14,370811965c990d14] 40326 --- [nio-8080-exec-3] c.e.d.support.DistributedLockAspect      : 开始获取锁: shiv2021-02-22 15:12:27.334  WARN [demo,,] 40326 --- [l-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3m22s450ms).2021-02-22 15:12:27.404  INFO [demo,370811965c990d14,370811965c990d14] 40326 --- [nio-8080-exec-3] c.e.d.service.OrderQueryService          : ==== 执行业务逻辑开始 ====2021-02-22 15:12:32.409  INFO [demo,370811965c990d14,370811965c990d14] 40326 --- [nio-8080-exec-3] c.e.d.service.OrderQueryService          : ==== 执行业务逻辑完成 ====<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> annotation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> annotation </tag>
            
            <tag> SpEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解java虚拟机——第四章笔记</title>
      <link href="2021/02/18/shen-ru-li-jie-java-xu-ni-ji-di-si-zhang-bi-ji/"/>
      <url>2021/02/18/shen-ru-li-jie-java-xu-ni-ji-di-si-zhang-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机性能监控、故障处理工具"><a href="#虚拟机性能监控、故障处理工具" class="headerlink" title="虚拟机性能监控、故障处理工具"></a>虚拟机性能监控、故障处理工具</h2><blockquote><p>Java开发人员肯定都知道<code>JDK</code>的<code>bin</code>目录中有<code>java</code>、<code>javac</code>这两个命令行工具，但并非所有程序 员都了解过<code>JDK</code>的<code>bin</code>目录下其他各种小工具的作用。随着<code>JDK</code>版本的更迭，这些小工具的数量和功能 也在不知不觉地增加与增强。除了编译和运行<code>Java</code>程序外，打包、部署、签名、调试、监控、运维等 各种场景都可能会用到它们。</p></blockquote><h3 id="一-基础故障处理工具"><a href="#一-基础故障处理工具" class="headerlink" title="一. 基础故障处理工具"></a>一. 基础故障处理工具</h3><blockquote><p>笔者这边使用的java版本为<code>1.8.0_191</code>，使用的是<code>mac</code>.</p></blockquote><p>我们看一下<code>$JAVA_HOME/bin</code>下的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>asdsw@izuf6ekene8xsqnzg2v3qcz bin<span class="token punctuation">]</span>$ ll总用量 <span class="token number">896</span>-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8592</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> appletviewerlrwxrwxrwx <span class="token number">1</span> asdsw asdsw      <span class="token number">8</span> <span class="token number">11</span>月  <span class="token number">2</span> <span class="token number">2018</span> ControlPanel -<span class="token operator">&gt;</span> jcontrol-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> extcheck-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> idlj-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jar-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jarsigner-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8464</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> java-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> javac-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> javadoc-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">2293</span> <span class="token number">9</span>月  <span class="token number">12</span> <span class="token number">2018</span> javafxpackager-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> javah-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> javap-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">2293</span> <span class="token number">9</span>月  <span class="token number">12</span> <span class="token number">2018</span> javapackager-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">1809</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> java-rmi.cgi-rwxr-xr-x <span class="token number">1</span> asdsw asdsw <span class="token number">140248</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> javaws-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jcmd-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8608</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jconsole-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">6264</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jcontrol-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8600</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jdb-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jdeps-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jhat-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8648</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jinfo-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jjs-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8648</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jmap-rwxr-xr-x <span class="token number">1</span> asdsw asdsw  <span class="token number">74675</span> <span class="token number">12</span>月  <span class="token number">8</span> <span class="token number">2017</span> jmc-rwxr-xr-x <span class="token number">1</span> asdsw asdsw    <span class="token number">402</span> <span class="token number">12</span>月  <span class="token number">8</span> <span class="token number">2017</span> jmc.ini-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jps-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8592</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jrunscript-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8600</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jsadebugd-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8648</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jstack-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jstat-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> jstatd-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">5110</span> <span class="token number">1</span>月  <span class="token number">15</span> <span class="token number">2017</span> jvisualvm-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> keytool-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8592</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> native2ascii-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8656</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> orbd-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> pack200-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8592</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> policytool-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> rmic-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> rmid-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8592</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> rmiregistry-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> schemagen-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> serialver-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8592</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> servertool-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8656</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> tnameserv-rwxr-xr-x <span class="token number">1</span> asdsw asdsw <span class="token number">182536</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> unpack200-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> wsgen-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> wsimport-rwxr-xr-x <span class="token number">1</span> asdsw asdsw   <span class="token number">8584</span> <span class="token number">10</span>月  <span class="token number">6</span> <span class="token number">2018</span> xjc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-jps"><a href="#1-jps" class="headerlink" title="1. jps"></a>1. jps</h4><blockquote><p>虚拟机进程状况工具</p><p>可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（main()函数所在的类）名称以及这些进程的本地虚拟机唯一 ID（LVMID，Local Virtual Machine Identifier）。对于本地虚拟机进程来说，LVMID与操作系统的进程ID（PID，Process Identifier）是一致的。</p></blockquote><h5 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h5><p><code>jps [-q] [-mlvV] [&lt;hostid&gt;]</code></p><p>注：<code>jps</code>还可以通过<code>RMI</code>协议查询开启了<code>RMI</code>服务的远程虚拟机进程状态，参数<code>hostid</code>为<code>RMI</code>注册表中 注册的主机名.</p><h5 id="主要选项"><a href="#主要选项" class="headerlink" title="主要选项"></a>主要选项</h5><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-q</code></td><td>只输出<code>LVMID</code>,省略主类的名称</td></tr><tr><td><code>-m</code></td><td>输出虚拟机进程启动时传递给主类<code>main()</code>函数的参数</td></tr><tr><td><code>-l</code></td><td>输出主类的全名，如果进程执行的是<code>jar</code>包，则输出<code>jar</code>的路径</td></tr><tr><td><code>-v</code></td><td>输出虚拟机进程启动时的<code>jvm</code>参数</td></tr></tbody></table><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>asdsw@izuf6ekene8xsqnzg2v3qcz ~<span class="token punctuation">]</span>$ jps -l<span class="token number">7363</span> org.springframework.boot.loader.JarLauncher<span class="token number">8600</span> sun.tools.jps.Jps<span class="token punctuation">[</span>asdsw@izuf6ekene8xsqnzg2v3qcz ~<span class="token punctuation">]</span>$ jps -v<span class="token number">7363</span> JarLauncher<span class="token number">8941</span> Jps -Dapplication.home<span class="token operator">=</span>/home/asdsw/.sdkman/candidates/java/8.0.191-oracle -Xms8m<span class="token punctuation">[</span>asdsw@izuf6ekene8xsqnzg2v3qcz ~<span class="token punctuation">]</span>$ jps -m<span class="token number">7363</span> JarLauncher run app.groovy -- --server.port<span class="token operator">=</span><span class="token number">8765</span><span class="token number">8956</span> Jps -m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-jstat"><a href="#2-jstat" class="headerlink" title="2. jstat"></a>2. jstat</h4><blockquote><p>用于监控虚拟机各种运行状态信息的命令行工具，它可以显示本地或者远程虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时数据。</p></blockquote><h5 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h5><p><code>jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</code></p><p>注：对于命令格式中的<code>VMID</code>与<code>LVMID</code>需要特别说明一下：如果是本地虚拟机进程，<code>VMID</code>与<code>LVMID</code> 是一致的；如果是远程虚拟机进程，那<code>VMID</code>的格式应当是：<code>[protocol:][//]lvmid[@hostname[:port]/servername]</code></p><h5 id="主要选项-1"><a href="#主要选项-1" class="headerlink" title="主要选项"></a>主要选项</h5><blockquote><p> 选项<code>option</code>代表用户希望查询的虚拟机信息，主要分为三类：类加载、垃圾收集、运行期编译状 况</p></blockquote><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-class</code></td><td>监视类加载、卸载数量、总空间以及类装载所耗费的时间</td></tr><tr><td><code>-gc</code></td><td>监视<code>java</code>·堆状况，包括<code>eden</code>区、2个<code>survivor</code>区、老年代、永久代等的容量，已用空间，垃圾收集时间合计等信息</td></tr><tr><td><code>-gccapacity</code></td><td>监视内容与<code>-gc</code>基本相同，但是输出主要关注<code>java</code>堆各个区域使用到的最大最小空间</td></tr><tr><td><code>-gcutil</code></td><td>监视内容与<code>-gc</code>基本相同，但是输出主要关注已使用空间占总空间的百分比</td></tr><tr><td><code>-gccause</code></td><td>与<code>-gcutil</code>功能一样，但是会额外输出导致上一次垃圾收集产生的原因</td></tr><tr><td><code>-gcnew</code></td><td>监视新生代垃圾收集状况</td></tr><tr><td><code>-gcnewcapacity</code></td><td>监视内容与<code>-gcnew</code>基本相同，但是输出主要关使用到的最大最小空间</td></tr><tr><td><code>-gcold</code></td><td>监视老年代垃圾收集状况</td></tr><tr><td><code>-gcoldcapacity</code></td><td>监视内容与<code>-gcold</code>基本相同，但是输出主要关使用到的最大最小空间</td></tr><tr><td><code>-gcpermcapacity</code></td><td>输出永久代使用到的最大最小空间</td></tr><tr><td><code>-compiler</code></td><td>输出即时编译器编译过的方法、耗时等信息</td></tr><tr><td><code>-printcompilation</code></td><td>输出已经被即时编译的方法</td></tr></tbody></table><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><p>参数<code>interval</code>和<code>count</code>代表查询间隔和次数，如果省略这2个参数，说明只查询一次。假设需要每250 毫秒查询一次进程<code>7363</code>垃圾收集状况，一共查询20次，那命令应当是:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>asdsw@izuf6ekene8xsqnzg2v3qcz ~<span class="token punctuation">]</span>$ jstat -gc <span class="token number">7363</span> <span class="token number">200</span> <span class="token number">2</span> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<span class="token number">1152.0</span> <span class="token number">1152.0</span>  <span class="token number">0.0</span>   <span class="token number">1135.9</span>  <span class="token number">9792.0</span>   <span class="token number">6900.3</span>   <span class="token number">24120.0</span>    <span class="token number">18487.6</span>   <span class="token number">43096.0</span> <span class="token number">40991.5</span> <span class="token number">5464.0</span> <span class="token number">5026.0</span>     <span class="token number">93</span>    <span class="token number">0.342</span>   <span class="token number">2</span>      <span class="token number">0.139</span>    <span class="token number">0.480</span><span class="token number">1152.0</span> <span class="token number">1152.0</span>  <span class="token number">0.0</span>   <span class="token number">1135.9</span>  <span class="token number">9792.0</span>   <span class="token number">6900.3</span>   <span class="token number">24120.0</span>    <span class="token number">18487.6</span>   <span class="token number">43096.0</span> <span class="token number">40991.5</span> <span class="token number">5464.0</span> <span class="token number">5026.0</span>     <span class="token number">93</span>    <span class="token number">0.342</span>   <span class="token number">2</span>      <span class="token number">0.139</span>    <span class="token number">0.480</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>详细说明示例：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210218165630660.png" alt="image-20210218165630660"></p><h4 id="3-jinfo"><a href="#3-jinfo" class="headerlink" title="3. jinfo"></a>3. jinfo</h4><blockquote><p>实时查看和调整虚拟机各项参数。</p></blockquote><p>使用<code>jps</code>命令的<code>-v</code>参 数可以查看虚拟机启动时显式指定的参数列表，但如果想知道未被显式指定的参数的系统默认值，除了去找资料外，就只能使用<code>jinfo</code>的<code>-flag</code>选项进行查询了（如果只限于<code>JDK6</code>或以上版本的话，使用<code>javaXX:+PrintFlagsFinal</code>查看参数默认值也是一个很好的选择）。<code>jinfo</code>还可以使用<code>-sysprops</code>选项把虚拟机进程的<code>System.getProperties()</code>的内容打印出来。这个命令在<code>JDK5</code>时期已经随着<code>Linux</code>版的<code>JDK</code>发布，当 时只提供了信息查询的功能，<code>JDK 6</code>之后，<code>jinfo</code>在<code>Window</code>s和<code>Linux</code>平台都有提供，并且加入了在运行期 修改部分参数值的能力（可以使用<code>-flag[+|-]name</code>或者<code>-flag name=value</code>在运行期修改一部分运行期可写的虚拟机参数值）。在<code>JDK6</code>中，<code>jinfo</code>对于<code>Windows</code>平台功能仍然有较大限制，只提供了最基本的<code>-flag</code>选项。</p><h5 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h5><p><code>jinfo [option] &lt;pid&gt;</code></p><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><p>查看最大堆内存：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>asdsw@izuf6ekene8xsqnzg2v3qcz ~<span class="token punctuation">]</span>$ jinfo -flag MaxHeapSize <span class="token number">7363</span>-XX:MaxHeapSize<span class="token operator">=</span><span class="token number">482344960</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-jmap"><a href="#4-jmap" class="headerlink" title="4. jmap"></a>4. jmap</h4><blockquote><p>生成堆转储快照（一般称为<code>heapdump</code>或<code>dump</code>文件）。</p></blockquote><p>如果不使用<code>jmap</code>命令，要想获取Java堆转储快照也还有一些比较“暴力”的手段：譬如用<code>-XX:+HeapDumpOnOutOfMemoryError</code>参数，可以让虚拟机在内存溢出异常出现之后自动生成堆转储快照文件，通过<code>-XX:+HeapDumpOnCtrlBreak</code>参数则可以使用<code>Ctrl + Break</code>键让虚拟机生成堆转储快 照文件，又或者在<code>Linux</code>系统下通过<code>Kill -3</code>命令发送进程退出信号“恐吓”一下虚拟机，也能顺利拿到堆转储快照。<code>jmap</code>的作用不仅仅是为了获取堆转储快照，它还可以查询<code>finalize</code>执行队列、<code>Java</code>堆和方法区的详细信息，如空间使用率、当前用的是哪种收集器等。和<code>jinfo</code>命令一样，<code>jmap</code>有部分功能在<code>Windows</code>平台下是受限的，除了生成堆转储快照的<code>-dump</code>选项 和用于查看每个类的实例、空间占用统计的<code>-histo</code>选项在所有操作系统中都可以使用之外，其余选项都只能在<code>Linux/Solaris</code>中使用。</p><h5 id="命令格式-3"><a href="#命令格式-3" class="headerlink" title="命令格式"></a>命令格式</h5><p><code>jmap [option] &lt;pid&gt;</code></p><h5 id="主要选项-2"><a href="#主要选项-2" class="headerlink" title="主要选项"></a>主要选项</h5><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-dump</code></td><td>生成<code>java</code>堆转储快照。格式为<code>-dump:[live,]format=b,file=&lt;filename&gt;</code>，其中<code>live</code>子参数说明是否只<code>dump</code>出存活的对象</td></tr><tr><td><code>-finalizerinfo</code></td><td>显示在<code>F-Queue</code>中等待<code>Finalizer</code>线程执行<code>finalize</code>方法的对象，只在<code>Linux/Solaris</code>有效</td></tr><tr><td><code>-heap</code></td><td>显示<code>java</code>堆详细信息，如使用哪种回收器，参数配置、分代状况等，只在<code>Linux/Solaris</code>有效</td></tr><tr><td><code>-histo</code></td><td>显示堆中对象统计信息，包括类、实例数量、合计容量</td></tr><tr><td><code>-permstat</code></td><td>以<code>ClassLoader</code>为统计口径显示永久代内存状态，只在<code>Linux/Solaris</code>有效</td></tr><tr><td><code>-F</code></td><td>当虚拟机进程<code>-dump</code>选项没有响应时，可使用这个选项强制生成<code>dump</code>快照，只在<code>Linux/Solaris</code>有效</td></tr></tbody></table><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>asdsw@izuf6ekene8xsqnzg2v3qcz tmp<span class="token punctuation">]</span>$ jmap -dump:format<span class="token operator">=</span>b,file<span class="token operator">=</span>abc <span class="token number">7363</span>Dumping heap to /tmp/abc <span class="token punctuation">..</span>.Heap dump <span class="token function">file</span> created<span class="token punctuation">[</span>asdsw@izuf6ekene8xsqnzg2v3qcz tmp<span class="token punctuation">]</span>$ ll总用量 <span class="token number">68060</span>-rw------- <span class="token number">1</span> asdsw asdsw <span class="token number">45703038</span> <span class="token number">2</span>月  <span class="token number">18</span> <span class="token number">17</span>:25 abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-jhat"><a href="#5-jhat" class="headerlink" title="5. jhat"></a>5. jhat</h4><p><code>JDK</code>提供<code>jhat(JVM Heap Analysis Tool)</code>命令与<code>jmap</code>搭配使用，来分析<code>jmap</code>生成的堆转储快照。 <code>jhat</code>内置了一个微型的<code>HTTP/Web</code>服务器，生成堆转储快照的分析结果后，可以在浏览器中查看。不过 实事求是地说，在实际工作中，除非手上真的没有别的工具可用，否则多数人是不会直接使用jhat命令 来分析堆转储快照文件的，主要原因有两个方面。一是一般不会在部署应用程序的服务器上直接分析堆转储快照，即使可以这样做，也会尽量将堆转储快照文件复制到其他机器上进行分析，因为分析 工作是一个耗时而且极为耗费硬件资源的过程，既然都要在其他机器上进行，就没有必要再受命令行工具的限制了。另外一个原因是<code>jhat</code>的分析功能相对来说比较简陋，后文将会介绍到的<code>VisualVM</code>，以及专业用于分析堆转储快照文件的<code>Eclipse Memory Analyzer</code>、<code>IBM HeapAnalyzer </code> 等工具，都能实现 比<code>jhat</code>更强大专业的分析功能。</p><h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>asdsw@izuf6ekene8xsqnzg2v3qcz tmp<span class="token punctuation">]</span>$ jhat abcReading from abc<span class="token punctuation">..</span>.Dump <span class="token function">file</span> created Thu Feb <span class="token number">18</span> <span class="token number">17</span>:25:00 CST <span class="token number">2021</span>Snapshot read, resolving<span class="token punctuation">..</span>.Resolving <span class="token number">460091</span> objects<span class="token punctuation">..</span>.Chasing references, <span class="token function">expect</span> <span class="token number">92</span> dots<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Eliminating duplicate references<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Snapshot resolved.Started HTTP server on port <span class="token number">7000</span>Server is ready.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户在浏览器中输入<a href="http://localhost:7000可以看到分析结">http://localhost:7000可以看到分析结</a> 果，如图所示。</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210218173925219.png" alt="image-20210218173925219"></p><h4 id="6-jstack"><a href="#6-jstack" class="headerlink" title="6. jstack"></a>6. jstack</h4><p><code>jstack(Stack Trace for Java)</code>命令用于生成虚拟机当前时刻的线程快照（一般称为<code>threaddump</code>或者 <code>javacore</code>文件）。线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的目的通常是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间挂起等，都是导致线程长时间停顿的常见原因。线程出现停顿时通过jstack来查看各个线程的调用堆栈， 就可以获知没有响应的线程到底在后台做些什么事情，或者等待着什么资源。</p><h5 id="命令格式-4"><a href="#命令格式-4" class="headerlink" title="命令格式"></a>命令格式</h5><p><code>jstack [option] vmid</code></p><h5 id="主要选项-3"><a href="#主要选项-3" class="headerlink" title="主要选项"></a>主要选项</h5><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-F</code></td><td>当正常输出的请求不被响应时，强制输出线程堆栈</td></tr><tr><td><code>-l</code></td><td>除堆栈外，显示关于锁的附加信息</td></tr><tr><td><code>-m</code></td><td>如果调用到本地方法的话，可以显示<code>C/C++</code>的堆栈</td></tr></tbody></table><h3 id="二-可视化故障处理工具"><a href="#二-可视化故障处理工具" class="headerlink" title="二. 可视化故障处理工具"></a>二. 可视化故障处理工具</h3><h4 id="1-jhsdb"><a href="#1-jhsdb" class="headerlink" title="1. jhsdb"></a>1. jhsdb</h4><p><code>JDK</code>中提供了<code>jcmd</code>和<code>jhsdb</code>两个集成式的多功能工具箱，它们不仅整合了上一节介绍到的所有 基础工具所能提供的专项功能，而且由于有着“后发优势”，能够做得往往比之前的老工具们更好、更强大，表是<code>jcmd</code>、<code>jhsdb</code>与原基础工具实现相同功能的简要对比:</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210218183314695.png" alt="image-20210218183314695"></p><p><code>jhsdb</code>是一款基于服务性代理（<code>Serviceability Agent</code>，<code>SA</code>）实现的进程外调试工具。服务性代理是<code>HotSpot</code>虚拟机中一组用于映射<code>Java</code>虚拟机运行信息的、主要基于<code>Java</code>语言（含少量<code>JNI</code>代码）实现的 <code>API</code>集合。服务性代理以<code>HotSpot</code>内部的数据结构为参照物进行设计，把这些<code>C++</code>的数据抽象出<code>Java</code>模 型对象，相当于<code>HotSpot</code>的<code>C++</code>代码的一个镜像。通过服务性代理的<code>API</code>，可以在一个独立的<code>Java</code>虚拟机的进程里分析其他<code>HotSpot</code>虚拟机的内部数据，或者从<code>HotSpot</code>虚拟机进程内存中<code>dump</code>出来的转储快照里还原出它的运行状态细节。服务性代理的工作原理跟<code>Linux</code>上的<code>GDB</code>或者<code>Windows</code>上的<code>Windbg</code>是相似的。</p><h4 id="2-jconsole"><a href="#2-jconsole" class="headerlink" title="2. jconsole"></a>2. jconsole</h4><p><code>jconsole(Java Monitoring and Management Console)</code>是一款基于<code>JMX(Java Manage-ment Extensions)</code>的可视化监视、管理工具。它的主要功能是通过<code>JMX</code>的<code>MBean(Managed Bean)</code>对系统进行信息收集和参数动态调整。<code>JMX</code>是一种开放性的技术，不仅可以用在虚拟机本身的管理上，还可以 运行于虚拟机之上的软件中，典型的如中间件大多也基于<code>JMX</code>来实现管理与监控。虚拟机对<code>JMX MBean</code>的访问也是完全开放的，可以使用代码调用<code>API</code>、支持<code>JMX</code>协议的管理控制台，或者其他符合<code> JMX</code>规范的软件进行访问。</p><h4 id="3-jvisualvm"><a href="#3-jvisualvm" class="headerlink" title="3. jvisualvm"></a>3. jvisualvm</h4><p><code>VisualVM(All-in-One Java Troubleshooting Tool)</code>是功能最强大的运行监视和故障处理程序之一， 曾经在很长一段时间内是<code>Oracle</code>官方主力发展的虚拟机故障处理工具。<code>Oracle</code>曾在<code>VisualVM</code>的软件说明 中写上了“All-in-One”的字样，预示着它除了常规的运行监视、故障处理外，还将提供其他方面的能 力，譬如性能分析（Profiling）。<code>VisualVM</code>的性能分析功能比起<code>JProfiler</code>、<code>YourKit</code>等专业且收费的<code>Profiling</code>工具都不遑多让。而且相比这些第三方工具，<code>VisualVM</code>还有一个很大的优点：不需要被监视的 程序基于特殊<code>Agent</code>去运行，因此它的通用性很强，对应用程序实际性能的影响也较小，使得它可以直接应用在生产环境中。这个优点是<code>JProfiler</code>、<code>YourKit</code>等工具无法与之媲美的。</p><h4 id="4-java-mission-control"><a href="#4-java-mission-control" class="headerlink" title="4. java mission control"></a>4. java mission control</h4><blockquote><p>可持续在线的监控工具</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM笔记</title>
      <link href="2021/02/15/jvm-bi-ji/"/>
      <url>2021/02/15/jvm-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>尚硅谷有一套jvm相关的视频，感兴趣的朋友可以看看！这里是根据其中内容做的一些笔记。</p></blockquote><h3 id="一-jvm参数类型"><a href="#一-jvm参数类型" class="headerlink" title="一. jvm参数类型"></a>一. jvm参数类型</h3><h4 id="1-标配参数"><a href="#1-标配参数" class="headerlink" title="1. 标配参数"></a>1. 标配参数</h4><ul><li>java -version</li><li>java -help</li><li>java -showversion</li></ul><h4 id="2-X参数-了解"><a href="#2-X参数-了解" class="headerlink" title="2. X参数(了解)"></a>2. X参数(了解)</h4><ul><li>-Xint 解释执行</li><li>-Xcomp 第一次使用就编译成本地代码</li><li>-Xmixed 混合模式(先编译再执行)</li></ul><h4 id="3-XX参数"><a href="#3-XX参数" class="headerlink" title="3. XX参数"></a>3. XX参数</h4><ul><li><p>boolean 类型</p><blockquote><p>公式：-XX:+ or - 某个属性</p><p>+：表示开启</p><p>-: 表示关闭</p></blockquote><ul><li>是否打印GC收集细节<ul><li>-XX:+PrintGcDetails</li><li>-XX:-PrintGcDetails</li></ul></li><li>是否使用串行垃圾回收器</li></ul></li><li><p>KV设置类型</p><blockquote><p>公式： -XX:属性key=属性值value</p></blockquote><ul><li>-XX:MetaspaceSize=128m</li><li>-XX:MaxTenuringThreshold=15</li></ul></li><li><p>jinfo举例，如何查看当前运行程序的配置(查看某个配置是否被激活)</p><blockquote><p>公式：jinfo -flag 配置项 进程编号</p><p>jinfo -flags 进程编号</p></blockquote><ul><li>jinfo -flag PrintGcDetails 13632(进程号 ps -l获取)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>asdsw@izuf6ekene8xsqnzg2v3qcz deploy<span class="token punctuation">]</span>$ jinfo -flags <span class="token number">8771</span>Attaching to process ID <span class="token number">8771</span>, please wait<span class="token punctuation">..</span>.Debugger attached successfully.Server compiler detected.JVM version is <span class="token number">25.191</span>-b12Non-default VM flags: -XX:CICompilerCount<span class="token operator">=</span><span class="token number">2</span> -XX:InitialHeapSize<span class="token operator">=</span><span class="token number">31457280</span> -XX:MaxHeapSize<span class="token operator">=</span><span class="token number">482344960</span> -XX:MaxNewSize<span class="token operator">=</span><span class="token number">160759808</span> -XX:MinHeapDeltaBytes<span class="token operator">=</span><span class="token number">196608</span> -XX:NewSize<span class="token operator">=</span><span class="token number">10485760</span> -XX:OldSize<span class="token operator">=</span><span class="token number">20971520</span> -XX:+UseCompressedClassPointers -XX:+UseCompressedOopsCommand line:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>题外话</p><blockquote><p>-Xms1024m (默认1/64 物理内存)</p><p>-Xmx1024m(默认1/4 物理内存)</p></blockquote><ul><li>-Xms =&gt; -XX:InitialHeapSize=</li><li>-Xmx =&gt; -XX:MaxHeapSize=</li></ul></li></ul><h3 id="二-盘点家底查看JVM默认值"><a href="#二-盘点家底查看JVM默认值" class="headerlink" title="二. 盘点家底查看JVM默认值"></a>二. 盘点家底查看JVM默认值</h3><h4 id="1-XX-PrintFlagsInitial"><a href="#1-XX-PrintFlagsInitial" class="headerlink" title="1. -XX:+PrintFlagsInitial"></a>1. -XX:+PrintFlagsInitial</h4><blockquote><p>主要查看初始默认值</p><p>java -XX:+PrintFlagsInitial -version</p><p>java -XX:+PrintFlagsInitial</p></blockquote><h4 id="2-XX-PrintFlagsFinal"><a href="#2-XX-PrintFlagsFinal" class="headerlink" title="2. -XX:+PrintFlagsFinal"></a>2. -XX:+PrintFlagsFinal</h4><blockquote><p>主要查看修改更新</p><p>java -XX:+PrintFlagsFinal -version</p><p>java -XX:+PrintFlagsFinal</p><p>注意 = 和 :=区别， := 代表由JVM或者人为改动过</p></blockquote><h4 id="3-PrintFlagsFinal举例，运行java命令的同时打印出参数"><a href="#3-PrintFlagsFinal举例，运行java命令的同时打印出参数" class="headerlink" title="3. PrintFlagsFinal举例，运行java命令的同时打印出参数"></a>3. PrintFlagsFinal举例，运行java命令的同时打印出参数</h4><blockquote><p>java -XX:+PrintFlagsInitial -XX:MetaspaceSize=50m Test(测试程序)</p></blockquote><h4 id="4-XX-PrintCommandLineFlags"><a href="#4-XX-PrintCommandLineFlags" class="headerlink" title="4. -XX:+PrintCommandLineFlags"></a>4. -XX:+PrintCommandLineFlags</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> ✘ ishiv@shiweideMacBook-Pro  ~  java -XX:+PrintCommandLineFlags -version-XX:InitialHeapSize<span class="token operator">=</span><span class="token number">134217728</span> -XX:MaxHeapSize<span class="token operator">=</span><span class="token number">2147483648</span> -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGCjava version <span class="token string">"1.8.0_181"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_181-b13<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.181</span>-b13, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-常用参数"><a href="#三-常用参数" class="headerlink" title="三. 常用参数"></a>三. 常用参数</h3><h4 id="1-Xms"><a href="#1-Xms" class="headerlink" title="1. -Xms"></a>1. -Xms</h4><blockquote><p>初始化内存大小，默认为物理内存1/64</p><p>等价于-XX:InitialHeapSize</p></blockquote><h4 id="2-Xmx"><a href="#2-Xmx" class="headerlink" title="2. -Xmx"></a>2. -Xmx</h4><blockquote><p>最大内存分配，默认为物理内存1/4</p><p>等价于-XX:MaxHeapSize</p></blockquote><h4 id="3-Xss"><a href="#3-Xss" class="headerlink" title="3. -Xss"></a>3. -Xss</h4><blockquote><p>设置单个线程栈的大小，一般默认为512k-1024k,依赖具体平台</p><p>等价于-XX:ThreadStackSize</p></blockquote><h4 id="4-Xmn"><a href="#4-Xmn" class="headerlink" title="4. -Xmn"></a>4. -Xmn</h4><blockquote><p>设置年轻代大小，新生代默认Heap 1/3</p></blockquote><h4 id="5-XX-MetaspaceSize"><a href="#5-XX-MetaspaceSize" class="headerlink" title="5. -XX:MetaspaceSize"></a>5. -XX:MetaspaceSize</h4><blockquote><p>元空间的本质和永久代类似，都是对JVM规范中方法区的实现，不过元空间并不在虚拟机中，而是使用本地内存，因此默认情况下，元空间的大小受本地内存限制。</p><p>-Xms10m -Xmx10m -XX:MetaspaceSize=1024m -XX:+PrintFlagsFinal -XX:+PrintGCDetails -XX:+UseSerailGC</p></blockquote><h4 id="6-XX-PrintGCDetails"><a href="#6-XX-PrintGCDetails" class="headerlink" title="6. -XX:PrintGCDetails"></a>6. -XX:PrintGCDetails</h4><p>GC:</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/gc-log.jpg" alt="gc-log"></p><p>FullGC：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/fullgc-log.jpg" alt="fullgc-log"></p><h4 id="7-XX-SurvivorRatio"><a href="#7-XX-SurvivorRatio" class="headerlink" title="7. -XX:SurvivorRatio"></a>7. -XX:SurvivorRatio</h4><blockquote><p>设置新生代中eden和S0/S1空间的比例</p><p>默认：</p><p>-XX:SurvivorRatio=8, Eden:S0:S1=8:1:1</p></blockquote><h4 id="8-XX-NewRatio"><a href="#8-XX-NewRatio" class="headerlink" title="8. -XX:NewRatio"></a>8. -XX:NewRatio</h4><blockquote><p> 配置年轻代与老年代在堆结构的占比</p><p>默认</p><p>-XX:NewRatio=2新生代占1，老年代2，年轻代占整个堆的1/3</p></blockquote><h4 id="9-XX-MaxTenuringThreshould"><a href="#9-XX-MaxTenuringThreshould" class="headerlink" title="9. -XX:MaxTenuringThreshould"></a>9. -XX:MaxTenuringThreshould</h4><blockquote><p>该参数主要是控制新生代需要经历多少次GC晋升到老年代中的最大阈值。在JVM中用4个bit存储（放在对象头中），所以其最大值是15。<br> 但并非意味着，对象必须要经历15次YGC才会晋升到老年代中。例如，当survivor区空间不够时，便会提前进入到老年代中，但这个次数一定不大于设置的最大阈值。</p><p>Java8 这个值只能在0-15之间</p></blockquote><h3 id="四-垃圾回收器"><a href="#四-垃圾回收器" class="headerlink" title="四. 垃圾回收器"></a>四. 垃圾回收器</h3><blockquote><p>&nbsp;一. 部分参数预先说明：</p><p>DefNew: Default New Generation</p><p>Tenured: Old</p><p>ParNew: Parallel New Generation</p><p>PSYongGen: Parallel Scavenge</p><p>ParOldGen: ParallelOldGeneration</p><p>二. server/client</p><p>1.1 32位Windows操作系统，不论硬件如何都默认使用client的JVM模式</p><p>1.2 32位其它操作系统，2G内存同时又2个cpu以上用server模式，低于该配置还是Client模式</p><p>2.3 64位only server模式</p></blockquote><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/gc_3.jpg" alt="gc_3"></p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/gc_4.jpg" alt="gc_4"></p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/gc_5.jpg" alt="gc_5jpg"></p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/gc_6.jpg" alt="gc_6jpg"></p><h4 id="1-串行垃圾回收器（Serial）"><a href="#1-串行垃圾回收器（Serial）" class="headerlink" title="1. 串行垃圾回收器（Serial）"></a>1. 串行垃圾回收器（Serial）</h4><blockquote><p>它为单线程环境设计且只有一个线程进行垃圾回收，并且会暂停所有的用户线程。所以不合适服务器环境</p></blockquote><h4 id="2-并行垃圾回收器（Parallel）"><a href="#2-并行垃圾回收器（Parallel）" class="headerlink" title="2. 并行垃圾回收器（Parallel）"></a>2. 并行垃圾回收器（Parallel）</h4><blockquote><p>多个垃圾收集线程并行工作，此时用户线程是暂停的，适用于科学计算、大数据处理等若交互场景</p></blockquote><h4 id="3-并行垃圾回收器（CMS）"><a href="#3-并行垃圾回收器（CMS）" class="headerlink" title="3. 并行垃圾回收器（CMS）"></a>3. 并行垃圾回收器（CMS）</h4><blockquote><p>用户线程和垃圾收集线程同时执行，不需要停顿用户线程（其实有两步也需要，但是停顿时间很短），互联网公司多用它，适应队响应时间有要求的场景。</p></blockquote><h4 id="4-G1垃圾回收器"><a href="#4-G1垃圾回收器" class="headerlink" title="4. G1垃圾回收器"></a>4. G1垃圾回收器</h4><blockquote><p>G1垃圾回收器将堆内存分割成不同的区域然后并发的对其进行垃圾回收</p><p>-XX:UseG1GC</p></blockquote><h5 id="1-之前收集器的特点"><a href="#1-之前收集器的特点" class="headerlink" title="1. 之前收集器的特点"></a>1. 之前收集器的特点</h5><ul><li>年轻代和老年代是各自独立且连续的内存块</li><li>年轻代收集使用单eden+s0+s1进行复制算法</li><li>老年代收集必须扫描整个老年代区域</li><li>都是以尽可能少而快速地执行GC为设计原则</li></ul><h5 id="2-G1是什么"><a href="#2-G1是什么" class="headerlink" title="2. G1是什么"></a>2. G1是什么</h5><blockquote><p>Garbage-First收集器，是一款面向服务端应用的收集器，应用在多处理器和大容量的内存环境中，在实现高吞吐量的同时，尽可能的满足垃圾收集暂停时间的要求。</p><p>特性:</p><p>像CMS收集器一样，能与应用程序并发执行</p><p>整理空闲空间更快</p><p>需要更多的时间来预测GC停顿时间</p><p>不希望牺牲大量的吞吐性能</p><p>不需要更大的Java Heap</p></blockquote><p>G1收集器的设计目标是取代CMS，它同CMS相比，在以下方面表现的更为出色：</p><ul><li>G1是一个有整理内存过程的垃圾收集器，不会产生很多内存碎片</li><li>G1的Stop The World更可控，G1在停顿时间上添加了预测机制，用户可以指定期望停顿时间</li></ul><p>CMS垃圾收集器虽然减少了暂停应用程序的运行时间，但是它还是存在着内存碎片的问题。于是，为了去除内存碎片问题，同时又保留CMS垃圾收集器地暂停时间的优点，JAVA7发布了一个新的垃圾收集器-G1</p><p>G1是在2012年在jdk1.7u4中可用。oracle官方计划在jdk9中将G1变成默认的垃圾收集器以替代CMS。它是一款面向服务端应用的收集器，主要应用在多CPU和大内存服务器环境下，极大的减少垃圾收集的停顿时间，全面提升服务器的性能，逐步替换java8以前的CMS收集器。</p><p>主要改变是Eden，Survivor和Tenured等内存区域不再是连续的了，而是变成一个个大小一样的region，没人region从1M-32M不等。一个region有可能属于eden，survivor或者Tenured内存区域。</p><p>特点：</p><ul><li>G1能充分利用多CPU，多核环境硬件优势，尽量缩短STW</li><li>G1整体上采用标记-整理算法，局部是通过复制算法，不回产生内存碎片</li><li>宏观上看G1之中不再区分年轻代和老年代。把内存划分成多个独立的子区域（Region）,可以近似理解为一个围棋的棋盘。</li><li>G1收集器里面将整个的内存区都混合在一起了，但其本身依然在小范围内进行年轻代和老年代的区分，保留了新生代和老年代，但是他们不再是物理隔离的，而是一部分region的集合且不需要region是连续的，也就是说依然会采用不同的GC方式来处理不同的区域。</li><li>G1虽然也是分代收集器，但整个内存分区不存在物理上的年轻代与老年代的区别，也不需要完全独立的survivor(to space)堆做复制准备。G1只有逻辑上的分代概念，或者说每个分区都可能随G1的运行在不同代之间前后切换。</li></ul><h5 id="3-常见参数配置"><a href="#3-常见参数配置" class="headerlink" title="3. 常见参数配置"></a>3. 常见参数配置</h5><p>-XX:+UseG1GC</p><p>-XX:G1HeapRegionSize=n: 设置G1区域大小，大小为2的幂，范围是1m-32m.目标是根据最下的java堆大小划分出约2048个区域</p><p>-XX:MaxGCPauseMillis=n:  最大GC停顿时间，这是个软目标，JVM将尽可能（但不保证）停顿小于这个时间</p><p>-XX:InitiatingHeapOccupancyPercent=n: 堆占用了多少的时候触发GC，默认45</p><p>-XX:ConcGCThreads=n: 并发GC使用的线程数</p><p>-XX:G1ReservePercent=n: 设置作为空闲的预留内存百分比，以降低目标空间溢出的风险，默认是10%</p><h5 id="4-与CMS对比优势"><a href="#4-与CMS对比优势" class="headerlink" title="4. 与CMS对比优势"></a>4. 与CMS对比优势</h5><ul><li>G1不会产生内存碎片</li><li>可以精确控制停顿。把整个堆划分成多个固定大小的区域，每次根据允许停顿时间去收集垃圾最多的区域</li></ul><h4 id="5-新生代"><a href="#5-新生代" class="headerlink" title="5. 新生代"></a>5. 新生代</h4><h5 id="1-串行收集器Serial"><a href="#1-串行收集器Serial" class="headerlink" title="1. 串行收集器Serial"></a>1. 串行收集器Serial</h5><blockquote><p>最古老，最稳定以及效率最高的收集器，只使用一个线程去回收但其在进行垃圾收集过程中可能会产生较长的停顿。虽然在手机垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限定单个CPU环境来说，没有线程交互的开销可以获得最高的单线程垃圾收集效率，因此Serial垃圾收集器依然是java虚拟机在Client模式下默认的新生代垃圾收集器。</p></blockquote><p>对应的JVM参数: -XX:+UseSerialGC</p><p>开启后会使用：Serail（Young区用） + Serial Old（Old区用）的收集器组合</p><p>表示： 新生代，老年代都会使用串行回收器，新生代使用复制算反，老年代使用标记-整理算法。</p><h5 id="2-ParNew-并行收集器"><a href="#2-ParNew-并行收集器" class="headerlink" title="2. ParNew 并行收集器"></a>2. ParNew 并行收集器</h5><blockquote><p>使用多线程进行垃圾回收，在垃圾收集时，会STW暂停其它所有的工作线程直到它收集结束。</p><p>是Serial收集器新生代的并行多线程版本，最常见的场景就是配合老年代的CMS GC工作，其余的行为和Serial收集器完成一样，ParNew垃圾收集器在垃圾收集过程中同样也要暂停其它的工作线程。它是很多java虚拟机在Server模式下新生代的默认垃圾收集器。</p></blockquote><p>对应的JVM参数: -XX+UseParNewGC</p><p>启用ParNew只影响新生代的收集，不影响老年代</p><p>开启上述参数后，会使用：ParNew（Young区用）+ Serial Old的收集器组合，新生代使用复制算法，老年代采用标记-整理算法。</p><p>但是，ParNew + Tenured这样的搭配，java8已结不再被推荐。</p><h5 id="3-并行回收-Parallel-Scavenge"><a href="#3-并行回收-Parallel-Scavenge" class="headerlink" title="3. 并行回收 Parallel Scavenge"></a>3. 并行回收 Parallel Scavenge</h5><blockquote><p>Parallel Scavenge收集器类似ParNew，也是一个新生代来及收集器，使用复制算法，也是一个并行的多线程垃圾收集器，俗称吞吐量优先收集器。</p></blockquote><p>它重点关注的是：</p><p>可控的吞吐量(thoughput=运行用户代码时间/(运行用户代码时间 + 垃圾收集时间))， 也即比如程序运行100分钟，垃圾收集时间1分钟，吞吐量就是99%。高吞吐量意味着高效利用CPU的时间，它多用于后台运算而不太需要太多交互的任务。</p><p>自适应调解策略也是ParallelScavenge收集器与ParNew收集器的一个重要区别。自适应调解策略：虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间(-XX:MaxGCPauseMillis)或最大的吞吐量。</p><p>常用JVM参数：-XX:+UseParallelGC或-XX:+UseParallelOldGC(可互相激活)使用Parallel Scavenge收集器</p><p>-XX:ParallelGCThreads=数字N: 表示启动多个GC线程</p><h4 id="6-老年代"><a href="#6-老年代" class="headerlink" title="6. 老年代"></a>6. 老年代</h4><h5 id="1-串行GC-Serial-Old-Serial-MSC"><a href="#1-串行GC-Serial-Old-Serial-MSC" class="headerlink" title="1. 串行GC (Serial Old / Serial MSC)"></a>1. 串行GC (Serial Old / Serial MSC)</h5><blockquote><p>-XX:+UseSerialOldGC</p></blockquote><h5 id="2-并行GC-Parallel-Old-Parallel-MSC"><a href="#2-并行GC-Parallel-Old-Parallel-MSC" class="headerlink" title="2. 并行GC(Parallel Old / Parallel MSC)"></a>2. 并行GC(Parallel Old / Parallel MSC)</h5><blockquote><p>-XX:+UseParallelOldGC</p></blockquote><h5 id="3-并发标记清除GC-CMS"><a href="#3-并发标记清除GC-CMS" class="headerlink" title="3. 并发标记清除GC(CMS)"></a>3. 并发标记清除GC(CMS)</h5><blockquote><p>CMS(Concurrent Mark Sweep: 并发标记清除)，是一种以获取最短回收停顿时间为目标的收集器。适合应用在互联网或者B/S系统的服务器上，这类应用尤其重视服务器的响应速度，希望停顿时间最短。CMS非常适合堆内存大，CPU核数多的服务器端应用，也是G1出险之前大型应用的首选收集器。</p></blockquote><p>开启该收集器的JVM参数：-XX:+UseConcMarkSweepGC，开启该参数后会自动将: -XX:+UseParNewGC打开。</p><p>开启该参数后，使用ParNew(Yong区用) + CMS(Old区用) + Serial Old的收集器组合，Serial Old将作为CMS的后备收集器</p><p>4步过程：</p><ul><li>初始标记(CMS initial mark)</li><li>并发标记(CMS concurrent mark) : 和用户线程一起</li><li>重新标记(CMS remark)</li><li>并发清除(CMS concurrent sweep)：和用户线程一起</li></ul><p>优缺点：</p><p>优: 停顿低</p><p>缺: 并发执行，对cpu压力较大；采用标记清除会导致碎片</p><blockquote><p>标记清除算法无法整理空间碎片，老年代空间会随着应用时长被逐步耗尽，最后将不得不通过担保机制对内存进行压缩。CMS也提供了参数-XX:CMSFullGCsBeforeCompaction(默认0，即每次都进行内存整理)来指定多少次CMS收集之后，进行一次压缩的Full GC；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Plus 系列6 —— 字段类型处理器</title>
      <link href="2021/02/14/mybatis-plus-6-zi-duan-lei-xing-chu-li-qi/"/>
      <url>2021/02/14/mybatis-plus-6-zi-duan-lei-xing-chu-li-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>类型处理器，用于 <code>JavaType</code> 与<code> JdbcType</code> 之间的转换，用于 <code>PreparedStatement</code> 设置参数值和从 <code>ResultSet</code> 或 <code>CallableStatement</code> 中取出一个值，本文讲解 <code>mybaits-plus</code> 内置常用类型处理器如何通过<code>TableField</code>注解快速注入到 <code>mybatis</code> 容器中。</p></blockquote><p>在我们开发过程中，肯定遇到过将对象转成<code>json</code>然后存在数据库的场景，那么你是怎么做的，保存的时候，先手动转成<code>json</code>字符串再保存？查询的时候，在解析成对象？其实不管是<code>mybatis plus</code>还是<code>mybatis</code>都可以通过实现<code>BaseTypeHandler</code>自定义一个转换器来实现！而在<code>mybaits plus</code>中就提供了一个这样的转化器——<code>JacksonTypeHandler</code>，当然你完全可以自己实现！那么就来看看在<code>mybatis plus</code>中怎么使用吧！</p><h3 id="一-示例工程"><a href="#一-示例工程" class="headerlink" title="一. 示例工程"></a>一. 示例工程</h3><h4 id="1-build-gradle"><a href="#1-build-gradle" class="headerlink" title="1. build.gradle"></a>1. build.gradle</h4><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">plugins <span class="token punctuation">{</span>    id <span class="token string">'org.springframework.boot'</span> version <span class="token string">'2.3.4.RELEASE'</span>    id <span class="token string">'io.spring.dependency-management'</span> version <span class="token string">'1.0.10.RELEASE'</span>    id <span class="token string">'java'</span><span class="token punctuation">}</span>group <span class="token operator">=</span> <span class="token string">'cn.justmr.mybatis-plus.demo'</span>version <span class="token operator">=</span> <span class="token string">'0.0.1-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token string">'1.8'</span>configurations <span class="token punctuation">{</span>    compileOnly <span class="token punctuation">{</span>        extendsFrom annotationProcessor    <span class="token punctuation">}</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    <span class="token comment">// 为了加快速度，配置阿里镜像仓库</span>    maven <span class="token punctuation">{</span> url <span class="token string gstring">"http://maven.aliyun.com/nexus/content/groups/public"</span> <span class="token punctuation">}</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ext <span class="token punctuation">{</span>    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'mybaitsPlusVersion'</span><span class="token punctuation">,</span> <span class="token string gstring">"3.4.2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    compileOnly <span class="token string">'org.projectlombok:lombok'</span>    testCompileOnly <span class="token string">'org.projectlombok:lombok'</span>    <span class="token comment">// 这里采用内存数据库</span>    runtimeOnly <span class="token string">'com.h2database:h2'</span>    <span class="token comment">// 引入mybatis plus</span>    compile <span class="token string gstring">"com.baomidou:mybatis-plus-boot-starter:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">{</span>mybaitsPlusVersion<span class="token punctuation">}</span></span>"</span>    annotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    testAnnotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    <span class="token function">testImplementation</span><span class="token punctuation">(</span><span class="token string">'org.springframework.boot:spring-boot-starter-test'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        exclude group<span class="token punctuation">:</span> <span class="token string">'org.junit.vintage'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'junit-vintage-engine'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-application-yml"><a href="#2-application-yml" class="headerlink" title="2. application.yml"></a>2. application.yml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.h2.Driver    <span class="token comment"># 启动应用后会自动执行该sql</span>    <span class="token key atrule">schema</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/schema<span class="token punctuation">-</span>h2.sql    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>test    <span class="token key atrule">username</span><span class="token punctuation">:</span> test    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>  <span class="token key atrule">h2</span><span class="token punctuation">:</span>    <span class="token key atrule">console</span><span class="token punctuation">:</span>      <span class="token comment"># 开启h2控制台</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 这里根据需要配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>  <span class="token comment"># 打印日志</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl    <span class="token comment"># 开启自动驼峰命名规则（camel case）映射,默认就是true</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment"># 插入策略 忽略 null</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> not_null      <span class="token comment"># 更新策略 忽略 null</span>      <span class="token key atrule">update-strategy</span><span class="token punctuation">:</span> not_null  <span class="token comment"># 处理枚举    </span>  <span class="token key atrule">type-enums-package</span><span class="token punctuation">:</span> cn.<span class="token important">**.enums</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-初始化表结构"><a href="#3-初始化表结构" class="headerlink" title="3. 初始化表结构"></a>3. 初始化表结构</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id          <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>    name        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age         <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    email       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    sex         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>    other_info  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'其它信息'</span><span class="token punctuation">,</span>    is_delete   <span class="token keyword">TINYINT</span>              <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否删除'</span><span class="token punctuation">,</span>    create_time <span class="token keyword">timestamp</span>            <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    update_time <span class="token keyword">timestamp</span>            <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-实体"><a href="#4-实体" class="headerlink" title="4. 实体"></a>4. 实体</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SexEnum</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">OtherInfo</span> otherInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OtherInfo</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * 居住城市         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>        <span class="token comment">/**         * 爱好         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> hobby<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 数据库设置了 ID自增     */</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 逻辑删除字段     */</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isDelete<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间 插入时填充字段     */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新时间 插入和更新时填充字段     */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-UserMapper"><a href="#5-UserMapper" class="headerlink" title="5. UserMapper"></a>5. UserMapper</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>justmr<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>justmr<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Select</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-测试"><a href="#二-测试" class="headerlink" title="二. 测试"></a>二. 测试</h3><h4 id="1-添加注解"><a href="#1-添加注解" class="headerlink" title="1. 添加注解"></a>1. 添加注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SexEnum</span> sex<span class="token punctuation">;</span>    <span class="token comment">// 添加注解</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>typeHandler <span class="token operator">=</span> <span class="token class-name">JacksonTypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">OtherInfo</span> otherInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OtherInfo</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * 居住城市         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>        <span class="token comment">/**         * 爱好         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> hobby<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-测试方法"><a href="#2-测试方法" class="headerlink" title="2. 测试方法"></a>2. 测试方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">SexEnum</span><span class="token punctuation">.</span>MAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User<span class="token punctuation">.</span>OtherInfo</span> otherInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User<span class="token punctuation">.</span>OtherInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  otherInfo<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">"300000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  otherInfo<span class="token punctuation">.</span><span class="token function">setHobby</span><span class="token punctuation">(</span><span class="token string">"篮球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setOtherInfo</span><span class="token punctuation">(</span>otherInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入</span>  userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 查询结果</span>  <span class="token class-name">User</span> user1 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 更新</span>  <span class="token class-name">User<span class="token punctuation">.</span>OtherInfo</span> otherInfo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User<span class="token punctuation">.</span>OtherInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  otherInfo1<span class="token punctuation">.</span><span class="token function">setHobby</span><span class="token punctuation">(</span><span class="token string">"篮球；"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  u<span class="token punctuation">.</span><span class="token function">setOtherInfo</span><span class="token punctuation">(</span>otherInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ChainWrappers</span><span class="token punctuation">.</span><span class="token function">lambdaUpdateChain</span><span class="token punctuation">(</span>userMapper<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 查询结果</span>  <span class="token keyword">final</span> <span class="token class-name">User</span> one <span class="token operator">=</span> <span class="token class-name">ChainWrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQueryChain</span><span class="token punctuation">(</span>userMapper<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-none"><code class="language-none">// 1. 查询日志，可见插入效果达到了，但是查询出来otherInfo为null==&gt;  Preparing: INSERT INTO user ( name, age, email, sex, other_info, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ? )==&gt; Parameters: shiv(String), 22(Integer), 22@qq.com(String), 20(Integer), {"city":"300000","hobby":"篮球"}(String), 2021-02-14T16:51:16.917(LocalDateTime), 2021-02-14T16:51:16.923(LocalDateTime)&lt;==    Updates: 1User(super=BaseEntity(id=1, isDelete=false, createTime=2021-02-14T16:51:16.917, updateTime=2021-02-14T16:51:16.923), name=shiv, age=22, email=22@qq.com, sex=MAIL, otherInfo=null)// 2. 更新日志，更新效果也达到了，但是查询出来的otherInfo为null==&gt;  Preparing: UPDATE user SET other_info=?, update_time=? WHERE (id = ?)==&gt; Parameters: {"city":null,"hobby":"篮球；"}(String), 2021-02-14T16:51:17.217(LocalDateTime), 1(Long)&lt;==    Updates: 1User(super=BaseEntity(id=1, isDelete=false, createTime=2021-02-14T16:51:16.917, updateTime=2021-02-14T16:51:17.217), name=shiv, age=22, email=22@qq.com, sex=MAIL, otherInfo=null)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，插入、更新都达到了效果，但是查询却不在意料之中！关于这个效果，官网有段说明：</p><blockquote><p>关于<code>autoResultMap</code>的说明:</p><p><code>mp</code>会自动构建一个<code>ResultMap</code>并注入到<code>mybatis</code>里(一般用不上).下面讲两句: 因为<code>mp</code>底层是<code>mybatis</code>,所以一些<code>mybatis</code>的常识你要知道,<code>mp</code>只是帮你注入了常用<code>crud</code>到<code>mybatis</code>里 注入之前可以说是动态的(根据你<code>entity</code>的字段以及注解变化而变化),但是注入之后是静态的(等于你写在xml的东西) 而对于直接指定<code>typeHandler</code>,<code>mybatis</code>只支持你写在2个地方:</p><ol><li>定义在<code>resultMap</code>里,只作用于<code>select</code>查询的返回结果封装</li><li>定义在<code>insert</code>和<code>update</code>sql的<code>#{property}</code>里的<code>property</code>后面(例:<code>#{property,typehandler=xxx.xxx.xxx}</code>),只作用于<code>设置值</code> 而除了这两种直接指定<code>typeHandler</code>,<code>mybatis</code>有一个全局的扫描你自己的<code>typeHandler</code>包的配置,这是根据你的<code>property</code>的类型去找<code>typeHandler</code>并使用.</li></ol></blockquote><h4 id="3-添加-TableName注解"><a href="#3-添加-TableName注解" class="headerlink" title="3. 添加@TableName注解"></a>3. 添加@TableName注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>autoResultMap <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 需要添加这个</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SexEnum</span> sex<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>typeHandler <span class="token operator">=</span> <span class="token class-name">JacksonTypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">OtherInfo</span> otherInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OtherInfo</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * 居住城市         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>        <span class="token comment">/**         * 爱好         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> hobby<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再次测试:</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: INSERT INTO user ( name, age, email, sex, other_info, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ? )==&gt; Parameters: shiv(String), 22(Integer), 22@qq.com(String), 20(Integer), {"city":"300000","hobby":"篮球"}(String), 2021-02-14T16:55:32.307(LocalDateTime), 2021-02-14T16:55:32.311(LocalDateTime)&lt;==    Updates: 1User(super=BaseEntity(id=1, isDelete=false, createTime=2021-02-14T16:55:32.307, updateTime=2021-02-14T16:55:32.311), name=shiv, age=22, email=22@qq.com, sex=MAIL, otherInfo=User.OtherInfo(city=300000, hobby=篮球))==&gt;  Preparing: UPDATE user SET other_info=?, update_time=? WHERE (id = ?)==&gt; Parameters: {"city":null,"hobby":"篮球；"}(String), 2021-02-14T16:55:32.473(LocalDateTime), 1(Long)&lt;==    Updates: 1User(super=BaseEntity(id=1, isDelete=false, createTime=2021-02-14T16:55:32.307, updateTime=2021-02-14T16:55:32.473), name=shiv, age=22, email=22@qq.com, sex=MAIL, otherInfo=User.OtherInfo(city=null, hobby=篮球；))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见现在一切都按预期运行了！</p><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h3><p>整个过程需要三步：</p><ol><li>自定义字段处理类型（继承<code>BaseTypeHandler</code>）</li><li>在对应字段上添加<code>@TableField(typeHandler = xxxxxx.class)</code></li><li>在实体类上添加<code>@TableName(autoResultMap = true)</code> ，保证查询结果正确</li></ol>]]></content>
      
      
      <categories>
          
          <category> mybatis plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> mybatis plus </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Plus 系列5 —— 通用枚举</title>
      <link href="2021/02/14/mybatis-plus-5-tong-yong-mei-ju/"/>
      <url>2021/02/14/mybatis-plus-5-tong-yong-mei-ju/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对于<code>mybatis</code>来说，内置了两个枚举转换器分别是：<code>org.apache.ibatis.type.EnumTypeHandler</code>和<code>org.apache.ibatis.type.EnumOrdinalTypeHandler</code>，然而很多情况我们需要自定义枚举转换器来处理枚举转换问题。关于这点可以参考<a href="https://segmentfault.com/a/1190000010755321">如何在MyBatis中优雅的使用枚举</a>。然而在<code>mybatis plus</code>中使用枚举属性则相当舒服，解决了繁琐的配置，让 mybatis 优雅的使用枚举属性！</p></blockquote><h3 id="一-默认行为"><a href="#一-默认行为" class="headerlink" title="一. 默认行为"></a>一. 默认行为</h3><blockquote><p>版本 <code>compile "com.baomidou:mybatis-plus-boot-starter:3.4.2"</code></p></blockquote><h4 id="1-application-yml配置如下："><a href="#1-application-yml配置如下：" class="headerlink" title="1. application.yml配置如下："></a>1. application.yml配置如下：</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment"># 开启自动驼峰命名规则（camel case）映射,默认就是true</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> not_null      <span class="token key atrule">update-strategy</span><span class="token punctuation">:</span> not_null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-实体"><a href="#2-实体" class="headerlink" title="2. 实体"></a>2. 实体</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SexEnum</span> sex<span class="token punctuation">;</span> <span class="token comment">// 将之前的例子中的性别字段改为枚举</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 数据库设置了 ID自增     */</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 逻辑删除字段     */</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isDelete<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间 插入时填充字段     */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新时间 插入和更新时填充字段     */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-枚举"><a href="#3-枚举" class="headerlink" title="3. 枚举"></a>3. 枚举</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SexEnum</span> <span class="token punctuation">{</span>    <span class="token comment">// code 定义为10，20是为了和EnumOrdinalTypeHandler效果区分开来</span>    <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">MAIL</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">SexEnum</span><span class="token punctuation">.</span>MAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入</span>  userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 查询结果</span>  <span class="token class-name">User</span> user1 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: INSERT INTO user ( name, age, email, sex, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )==&gt; Parameters: shiv(String), 22(Integer), 22@qq.com(String), MAIL(String), 2021-02-14T11:21:33.706(LocalDateTime), 2021-02-14T11:21:33.709(LocalDateTime)&lt;==    Updates: 1...==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE id=?==&gt; Parameters: 15(Long)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 15, shiv, 22, 22@qq.com, MAIL, 0, 2021-02-14 11:21:34, 2021-02-14 11:21:34&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见插入到数据库的枚举的名称<code>MAIL</code>，这是由于<code>mybatis plus</code>默认的枚举转换配置（不同版本有区别）是<code>org.apache.ibatis.type.EnumTypeHandler </code>。</p><p>我们可以修改这个默认配置，如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment"># 修改默认枚举处理类</span>    <span class="token key atrule">default-enum-type-handler</span><span class="token punctuation">:</span> org.apache.ibatis.type.EnumOrdinalTypeHandler<span class="token comment"># default-enum-type-handler: org.apache.ibatis.type.EnumTypeHandler</span>    <span class="token comment"># 开启自动驼峰命名规则（camel case）映射,默认就是true</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> not_null      <span class="token key atrule">update-strategy</span><span class="token punctuation">:</span> not_null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看看效果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: INSERT INTO user ( name, age, email, sex, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )==&gt; Parameters: shiv(String), 22(Integer), 22@qq.com(String), 1(Integer), 2021-02-14T11:26:11.578(LocalDateTime), 2021-02-14T11:26:11.581(LocalDateTime)&lt;==    Updates: 1...==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE id=?==&gt; Parameters: 16(Long)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 16, shiv, 22, 22@qq.com, 1, 0, 2021-02-14 11:26:12, 2021-02-14 11:26:12&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见这里就是将枚举实例的ordinal属性作为值插入了。</p><p>如果我们需要将枚举<code>code</code>的值保存到数据库，那么需要怎么做呢，当然我们可以按照我们之前使用<code>mybatis</code>的方法，继承<code>BaseTypeHandler</code>自定义一个转换器，可参考<a href="https://segmentfault.com/a/1190000010755321">如何在MyBatis中优雅的使用枚举</a>！</p><p>当我们使用<code>mybatis plus</code>后就不需要繁琐的配置了，怎么做呢？如下：</p><h3 id="二-声明通用枚举属性"><a href="#二-声明通用枚举属性" class="headerlink" title="二. 声明通用枚举属性"></a>二. 声明通用枚举属性</h3><p>方法一：使用<code>@EnumValue</code>标记属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SexEnum</span> <span class="token punctuation">{</span>    <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">MAIL</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@EnumValue</span> <span class="token comment">// 标记数据库存的值是code</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二： 枚举属性，实现 IEnum 接口如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SexEnum</span> <span class="token keyword">implements</span> <span class="token class-name">IEnum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">MAIL</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-配置扫描通用属性"><a href="#三-配置扫描通用属性" class="headerlink" title="三. 配置扫描通用属性"></a>三. 配置扫描通用属性</h3><p>application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment"># 开启自动驼峰命名规则（camel case）映射,默认就是true</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> not_null      <span class="token key atrule">update-strategy</span><span class="token punctuation">:</span> not_null  <span class="token comment"># 支持统配符 * 或者 ; 分割</span>  <span class="token comment"># 枚举类 扫描路径，如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使用枚举属性</span>  <span class="token key atrule">type-enums-package</span><span class="token punctuation">:</span> cn.<span class="token important">**.enums</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再跑一下测试方法：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: INSERT INTO user ( name, age, email, sex, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )==&gt; Parameters: shiv(String), 22(Integer), 22@qq.com(String), 20(Integer), 2021-02-14T11:47:40.104(LocalDateTime), 2021-02-14T11:47:40.107(LocalDateTime)&lt;==    Updates: 1...==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE id=?==&gt; Parameters: 21(Long)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 21, shiv, 22, 22@qq.com, 20, 0, 2021-02-14 11:47:40, 2021-02-14 11:47:40&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见<code>code</code>属性已经被插入数据库！如果我们不使用<code>@EnumValue</code>或者实现<code>IEnum</code>则还会走默认的转换器逻辑！</p>]]></content>
      
      
      <categories>
          
          <category> mybatis plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> mybatis plus </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Plus 系列4 —— Mapper CRUD之更新</title>
      <link href="2021/02/14/mybatis-plus-4-mapper-crud-zhi-geng-xin/"/>
      <url>2021/02/14/mybatis-plus-4-mapper-crud-zhi-geng-xin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前几章主要是讲的查询相关的功能，这次我们来说说更新相关的功能！</p></blockquote><h3 id="一-前置准备"><a href="#一-前置准备" class="headerlink" title="一. 前置准备"></a>一. 前置准备</h3><p>先来看看我们用来演示的项目的结构:</p><pre class="line-numbers language-none"><code class="language-none">.├── HELP.md├── build.gradle├── gradle│&nbsp;&nbsp; └── wrapper│&nbsp;&nbsp;     ├── gradle-wrapper.jar│&nbsp;&nbsp;     └── gradle-wrapper.properties├── gradlew├── gradlew.bat├── settings.gradle└── src    ├── main    │&nbsp;&nbsp; ├── java    │&nbsp;&nbsp; │&nbsp;&nbsp; └── cn    │&nbsp;&nbsp; │&nbsp;&nbsp;     └── justmr    │&nbsp;&nbsp; │&nbsp;&nbsp;         └── mybatisplus    │&nbsp;&nbsp; │&nbsp;&nbsp;             └── demo    │&nbsp;&nbsp; │&nbsp;&nbsp;                 ├── DemoApplication.java    │&nbsp;&nbsp; │&nbsp;&nbsp;                 ├── config    │&nbsp;&nbsp; │&nbsp;&nbsp;                 │&nbsp;&nbsp; └── MybatisPlusConfig.java // 分页配置    │&nbsp;&nbsp; │&nbsp;&nbsp;                 ├── entity    │&nbsp;&nbsp; │&nbsp;&nbsp;                 │&nbsp;&nbsp; ├── BaseEntity.java    │&nbsp;&nbsp; │&nbsp;&nbsp;                 │&nbsp;&nbsp; └── User.java    │&nbsp;&nbsp; │&nbsp;&nbsp;                 ├── handler    │&nbsp;&nbsp; │&nbsp;&nbsp;                 │&nbsp;&nbsp; ├── MyMetaObjectHandler.java // 自动填充 create_time 和 update_time    │&nbsp;&nbsp; │&nbsp;&nbsp;                 └── mapper    │&nbsp;&nbsp; │&nbsp;&nbsp;                     └── UserMapper.java    │&nbsp;&nbsp; └── resources    │&nbsp;&nbsp;     ├── application.yml    │&nbsp;&nbsp;     ├── static    │&nbsp;&nbsp;     └── templates    └── test        └── java            └── cn                └── justmr                    └── mybatisplus                        └── demo                            └── demo                                ├── DemoApplicationTests.java                                ├── UserTests.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-build-gradle"><a href="#1-build-gradle" class="headerlink" title="1. build.gradle"></a>1. build.gradle</h4><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">plugins <span class="token punctuation">{</span>    id <span class="token string">'org.springframework.boot'</span> version <span class="token string">'2.3.4.RELEASE'</span>    id <span class="token string">'io.spring.dependency-management'</span> version <span class="token string">'1.0.10.RELEASE'</span>    id <span class="token string">'java'</span><span class="token punctuation">}</span>group <span class="token operator">=</span> <span class="token string">'cn.justmr.mybatis-plus.demo'</span>version <span class="token operator">=</span> <span class="token string">'0.0.1-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token string">'1.8'</span>configurations <span class="token punctuation">{</span>    compileOnly <span class="token punctuation">{</span>        extendsFrom annotationProcessor    <span class="token punctuation">}</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    <span class="token comment">// 为了加快速度，配置阿里镜像仓库</span>    maven <span class="token punctuation">{</span> url <span class="token string gstring">"http://maven.aliyun.com/nexus/content/groups/public"</span> <span class="token punctuation">}</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ext <span class="token punctuation">{</span>    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'mybaitsPlusVersion'</span><span class="token punctuation">,</span> <span class="token string gstring">"3.4.2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    compileOnly <span class="token string">'org.projectlombok:lombok'</span>    testCompileOnly <span class="token string">'org.projectlombok:lombok'</span>    runtimeOnly <span class="token string">'mysql:mysql-connector-java'</span>    <span class="token comment">// 引入mybatis plus</span>    compile <span class="token string gstring">"com.baomidou:mybatis-plus-boot-starter:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">{</span>mybaitsPlusVersion<span class="token punctuation">}</span></span>"</span>    annotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    testAnnotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    <span class="token function">testImplementation</span><span class="token punctuation">(</span><span class="token string">'org.springframework.boot:spring-boot-starter-test'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        exclude group<span class="token punctuation">:</span> <span class="token string">'org.junit.vintage'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'junit-vintage-engine'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-application-yml"><a href="#2-application-yml" class="headerlink" title="2. application.yml"></a>2. application.yml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/demo<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> test    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment"># 开启自动驼峰命名规则（camel case）映射,默认就是true</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 输出日志</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> not_null      <span class="token key atrule">update-strategy</span><span class="token punctuation">:</span> not_null <span class="token comment"># 默认全局更新策略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-测试数据"><a href="#3-测试数据" class="headerlink" title="3. 测试数据"></a>3. 测试数据</h4><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210212224757754.png" alt="测试数据"></p><h3 id="二-更新"><a href="#二-更新" class="headerlink" title="二. 更新"></a>二. 更新</h3><p>首先还是先看一下<code>UserMapper</code>实现的<code>BaseMapper</code>的接口：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/BaseMapper.png"></p><h4 id="1-更新策略"><a href="#1-更新策略" class="headerlink" title="1. 更新策略"></a>1. 更新策略</h4><p>我们先看一下默认的全局更新策略：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 在application.yml中配置了默认的更新策略</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> not_null <span class="token comment"># 默认全局插入策略</span>      <span class="token key atrule">update-strategy</span><span class="token punctuation">:</span> not_null <span class="token comment"># 默认全局更新策略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改全部插入/更新策略，可以参考<a href="/2021/02/12/mybatis-plus-chang-yong-zhu-jie/" title="Mybatis Plus 常用注解">Mybatis Plus 常用注解</a>.</p></blockquote><p>这个配置说明，在更新的时候，如果<code>T</code>的属性值为<code>null</code>则忽略不更新，演示一下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"更新测试1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"MAIL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入一条数据</span>  userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 更新邮箱</span>  user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@shiv.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 查询更新后结果</span>  <span class="token class-name">User</span> data <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"22@shiv.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: INSERT INTO user ( name, age, email, sex, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )==&gt; Parameters: shiv(String), 28(Integer), 22@qq.com(String), MAIL(String), 2021-02-13T22:56:49.267(LocalDateTime), 2021-02-13T22:56:49.271(LocalDateTime)&lt;==    Updates: 1...==&gt;  Preparing: UPDATE user SET name=?, age=?, email=?, sex=?, create_time=?, update_time=? WHERE id=?==&gt; Parameters: shiv(String), 28(Integer), 22@shiv.com(String), MAIL(String), 2021-02-13T22:56:49.267(LocalDateTime), 2021-02-13T22:56:49.271(LocalDateTime), 7(Long)&lt;==    Updates: 1...==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE id=?==&gt; Parameters: 7(Long)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 7, shiv, 28, 22@shiv.com, MAIL, 0, 2021-02-13 22:56:49, 2021-02-13 22:56:49&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思考：</strong></p><p>其实上面的更新，我只想更新一下<code>email</code>信息，并不想更行其它字段，但是由于使用的实体和插入的是同一个，导致其他字段也加入到了最终的sql中，从打印的SQL日志上看，完全看不出我是要更新哪个字段！我是比较主张不要为了方便把不需要更新的字段也一并更新掉，增加了很多干扰信息！</p><p>所以上面的测试稍微改一下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"更新测试2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"MAIL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入一条数据</span>  userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 更新邮箱, 其它字段不设置默认为null，不会更新</span>  <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  u<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  u<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@shiv.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 查询更新后结果</span>  <span class="token class-name">User</span> data <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"22@shiv.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再对比下打印日志：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: INSERT INTO user ( name, age, email, sex, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )==&gt; Parameters: shiv(String), 28(Integer), 22@qq.com(String), MAIL(String), 2021-02-13T23:07:44.490(LocalDateTime), 2021-02-13T23:07:44.494(LocalDateTime)&lt;==    Updates: 1...==&gt;  Preparing: UPDATE user SET email=?, update_time=? WHERE id=?==&gt; Parameters: 22@shiv.com(String), 2021-02-13T23:07:45.378(LocalDateTime), 8(Long)&lt;==    Updates: 1...==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE id=?==&gt; Parameters: 8(Long)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 8, shiv, 28, 22@shiv.com, MAIL, 0, 2021-02-13 23:07:44, 2021-02-13 23:07:45&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到更新邮箱的时候，只给实体<code>u</code>设置了主键和<code>email</code>字段，其它的字段默认为<code>null</code>，<code>set</code>时就忽略了那些为<code>null</code>的字段。</p><p>然后我们可以更新默认的更新策略，如改为下面的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 在application.yml中配置了默认的更新策略</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">update-strategy</span><span class="token punctuation">:</span> IGNORED <span class="token comment"># 忽略判断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新跑一下单元测试,结果失败，因为数据库有些字段设置了不能为null,我们主要关注一下更新的SQL：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: UPDATE user SET name=?, age=?, email=?, sex=?, is_delete=?, create_time=?, update_time=? WHERE id=?==&gt; Parameters: null, null, 22@shiv.com(String), null, null, null, 2021-02-13T23:16:00.285(LocalDateTime), 9(Long)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到为<code>null</code>的字段也进行了更新!</p><p>除了修改全局的<code>update-strategy</code>外，我们也可以在实体类对应字段上添加对应注解<code>@TableField(updateStrategy = FieldStrategy.IGNORED)</code>,这里就不再演示了！最后将<code>update-strategy</code>配置还原为<code>not_null</code></p><h4 id="2-updateById-T"><a href="#2-updateById-T" class="headerlink" title="2. updateById(T)"></a>2. updateById(T)</h4><blockquote><p>根据 ID 修改</p></blockquote><p>使用方式参考上面的示例</p><h4 id="3-update-T-Wrapper"><a href="#3-update-T-Wrapper" class="headerlink" title="3. update(T, Wrapper)"></a>3. update(T, Wrapper<t>)</t></h4><blockquote><p>根据 whereEntity 条件，更新记录<br>Params: entity – 实体对象 (set 条件值,可以为 null)<br>updateWrapper – 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>ENTITY<span class="token punctuation">)</span> <span class="token class-name">T</span> entity<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从注释中可以看到两个参数，<code>entity</code>主要用于生成<code>set</code>条件。<code>updateWrapper</code>则复杂一下,可生成<code>where</code>语句，也可以生成<code>set</code>条件值！我们一起来试一试：</p></blockquote><h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"更新测试3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// entity 为 null 的情况</span>  <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">,</span> <span class="token string">"33@shiv.com"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: UPDATE user SET email=? WHERE (id = ?)==&gt; Parameters: 33@shiv.com(String), 8(Integer)&lt;==    Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>使用这种方式设置某个字段为<code>null</code>, 不会被忽略的，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"更新测试4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// entity 为 null 的情况</span>  userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: UPDATE user SET email=? WHERE (id = ?)==&gt; Parameters: null, 8(Integer)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可见 <code>email</code> 依然会被设置为 <code>null</code>.所以在更新策略为<code>not_null</code>的情况下，如果需要将某个字段设置为null,可以采用这种方法（在<code>updateWrapper</code>里设置）。</p><h5 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"更新测试5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  u<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">8L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  u<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"44@shiv.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// updateWrapper为空的情况</span>  userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: UPDATE user SET email=?, update_time=?==&gt; Parameters: 44@shiv.com(String), 2021-02-13T23:42:25.512(LocalDateTime)&lt;==    Updates: 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li><code>entity</code>参数里面为<code>null</code>的会字段被忽略（更新策略影响）</li><li><code>entity</code>参数不会在<code>where</code>条件中</li><li>主键不会应用在<code>set</code>条件中</li></ol><h5 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"更新测试6"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  u<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"44@shiv.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: UPDATE user SET email=?, update_time=? WHERE (id = ?)==&gt; Parameters: 44@shiv.com(String), 2021-02-13T23:50:25.951(LocalDateTime), 8(Integer)&lt;==    Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="示例4（避免）"><a href="#示例4（避免）" class="headerlink" title="示例4（避免）"></a>示例4（避免）</h5><blockquote><p><code>entity</code>和<code>updateWrapper</code>都对相同字段设置，这种情况尽量避免，不是那么好理解</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"更新测试6"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// entity和 updateWrapper 都对 email设置值</span>  <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  u<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"44@shiv.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">,</span> <span class="token string">"44@shiv.com"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果<code>email</code>在<code>set</code>中出现了两次：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: UPDATE user SET email=?, update_time=?, email=? WHERE (id = ?)==&gt; Parameters: 44@shiv.com(String), 2021-02-13T23:54:00.213(LocalDateTime), 44@shiv.com(String), 8(Integer)&lt;==    Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="示例5"><a href="#示例5" class="headerlink" title="示例5"></a>示例5</h5><blockquote><p>利用 <code>updateWrapper </code>里的<code>entity</code>生成<code>where</code>条件</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"更新测试6"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  entity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">8L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  entity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">,</span> <span class="token string">"44@shiv.com"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>  userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: UPDATE user SET email=? WHERE id=? AND name=?==&gt; Parameters: 44@shiv.com(String), 8(Long), shiv(String)&lt;==    Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong><br><strong>这种方式更新，不会自动更新<code>update_time</code>的值，尽管我们设置了<code>update_time</code>的自动填充功能！填充只能填充到entity里</strong></p><h5 id="示例6（避免）"><a href="#示例6（避免）" class="headerlink" title="示例6（避免）"></a>示例6（避免）</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"更新测试7"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  entity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">8L</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// id</span>  entity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"shiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">,</span> <span class="token string">"44@shiv.com"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token number">8L</span><span class="token punctuation">)</span> <span class="token comment">// id </span>    <span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>  userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果<code>where</code>条件中，<code>id</code>出现了两次：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: UPDATE user SET email=? WHERE id=? AND name=? AND (id = ?)==&gt; Parameters: 44@shiv.com(String), 8(Long), shiv(String), 8(Long)&lt;==    Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-链式更新（推荐）"><a href="#4-链式更新（推荐）" class="headerlink" title="4. 链式更新（推荐）"></a>4. 链式更新（推荐）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"更新测试8"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">ChainWrappers</span><span class="token punctuation">.</span><span class="token function">lambdaUpdateChain</span><span class="token punctuation">(</span>userMapper<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">,</span> <span class="token string">"44@shiv.com"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token number">8L</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: UPDATE user SET email=? WHERE (id = ?)==&gt; Parameters: 44@shiv.com(String), 8(Long)&lt;==    Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="三-思考"><a href="#三-思考" class="headerlink" title="三. 思考"></a>三. 思考</h3><p>对于一些更新场景，就针对根据主键更新（<code>updateById(T)</code>）这个方法来讲,有时我们只想更新我们设置的不为null的字段，有时我们又想传什么值就更新成什么值，包括<code>null</code>（表单清空情况）。对于这些情况，早期<code>mybatis plus</code>是通过两个api来做的<code>update</code>和<code>updateSelective</code>，其它的框架也是类似的实现，比如 <a href="https://github.com/abel533/Mapper">tk.mapper</a>。但是自<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/CHANGELOG.md">v2.0.0[2016.12.11]版本</a>版本开始，<code>mybatis plus</code>合并了所有Selective通用方法（例如:去除之前的insert方法并把之前的insetSelective改名为insert），导致我们没法直接使用这两个方法来处理对应的场景了！其实对于传什么值就更新成什么值（包括null）的场景，利用早期[v1.4.9]的update方法，则会将涉及到的全部字段更新，不管是不是这次需要更新的。而且通常还需要提前将更新前的数据查询出来，设置值，再去更新，这样做虽然方便，但是并不是很好！对于更新字段我还是建议更新哪个字段就只<code>set</code>哪个字段，不要不管三七二十一的全部<code>set</code>一遍。</p><p>在<code>mybatis plus</code>中使用更新的建议：</p><ol><li>采用默认的全局插入，更新策略<code>not_null</code></li><li>如果有某些字段需要更新为<code>null</code>，建议采用上面<code>链式更新（推荐）</code>中的用法，手动调用<code>set</code>方法！</li></ol>]]></content>
      
      
      <categories>
          
          <category> mybatis plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> mybatis plus </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Plus 系列3.3 —— Mapper CRUD之分页查询</title>
      <link href="2021/02/13/mybatis-plus-3-3-mapper-crud-zhi-fen-ye-cha-xun/"/>
      <url>2021/02/13/mybatis-plus-3-3-mapper-crud-zhi-fen-ye-cha-xun/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Mybatis plus</code>自带了分页插件，如果你已经习惯使用 <a href="https://github.com/pagehelper/Mybatis-PageHelper">pagehelper</a>分页，那么可以继续使用<code>pagehelper</code>。这里主要目的是演示一下怎么使用<code>mybatis plus</code>的分页插件！演示前置条件参见<a href="/2021/02/13/mybatis-plus-3-1-mapper-crud-zhi-cha-xun/" title="Mybatis Plus 3.1 —— Mapper CRUD之查询">Mybatis Plus 3.1 —— Mapper CRUD之查询</a></p></blockquote><p>首先我们就使用<code>BaseMapper#selectMapsPage</code>分页方法来演示一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"分页1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pageTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 分页，查询第一页数据</span>  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (age &gt; ? AND is_delete = ?)==&gt; Parameters: 10(Integer), false(Boolean)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 1, Jone, 18, test1@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 2, Jack, 20, test2@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 3, Tom, 28, test3@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 4, Sandy, 21, test4@baomidou.com, FEMALE, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 5, Billie, 24, test5@baomidou.com, FEMALE, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到分页并没有效果。这是由于分页功能并没有默认开启，我们需要做一下相应的配置！</p><h3 id="一-配置分页插件"><a href="#一-配置分页插件" class="headerlink" title="一. 配置分页插件"></a>一. 配置分页插件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>justmr<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DbType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MybatisPlusInterceptor</span> plusInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 分页插件</span>        <span class="token class-name">PaginationInnerInterceptor</span> paginationInnerInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置最大分页数， -1: 不受限制</span>        paginationInnerInterceptor<span class="token punctuation">.</span><span class="token function">setMaxLimit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 溢出总页数后是否进行处理</span>        paginationInnerInterceptor<span class="token punctuation">.</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 生成 countSql 优化掉 join 现在只支持 left join</span>        paginationInnerInterceptor<span class="token punctuation">.</span><span class="token function">setOptimizeJoin</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        plusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span>paginationInnerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> plusInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ConfigurationCustomizer</span> <span class="token function">configurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> configuration <span class="token operator">-&gt;</span> configuration<span class="token punctuation">.</span><span class="token function">setUseDeprecatedExecutor</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再次运行一下上面的测试方法,结果如下：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT COUNT(*) FROM user WHERE (age &gt; ? AND is_delete = ?)==&gt; Parameters: 10(Integer), false(Boolean)&lt;==    Columns: COUNT(*)&lt;==        Row: 5&lt;==      Total: 1==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (age &gt; ? AND is_delete = ?) LIMIT ?==&gt; Parameters: 10(Integer), false(Boolean), 2(Long)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 1, Jone, 18, test1@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 2, Jack, 20, test2@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到分页已经生效！</p><p>返回结果<code>Page</code>结构如下：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210213170134969.png" alt="image-20210213170134969"></p><h3 id="二-分页-amp-排序"><a href="#二-分页-amp-排序" class="headerlink" title="二. 分页&amp;排序"></a>二. 分页&amp;排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"分页3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pageTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 分页</span>  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> objectPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 排序</span>  objectPage<span class="token punctuation">.</span><span class="token function">setOrders</span><span class="token punctuation">(</span><span class="token class-name">OrderItem</span><span class="token punctuation">.</span><span class="token function">descs</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>objectPage<span class="token punctuation">,</span> eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT COUNT(*) FROM user WHERE (age &gt; ? AND is_delete = ?)==&gt; Parameters: 10(Integer), false(Boolean)&lt;==    Columns: COUNT(*)&lt;==        Row: 5&lt;==      Total: 1==&gt;  Preparing: SELECT id, name, age, email, sex, is_delete, create_time, update_time FROM user WHERE (age &gt; ? AND is_delete = ?) ORDER BY age DESC LIMIT ?==&gt; Parameters: 10(Integer), false(Boolean), 2(Long)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 3, Tom, 28, test3@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 5, Billie, 24, test5@baomidou.com, FEMALE, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-自定义分页"><a href="#三-自定义分页" class="headerlink" title="三. 自定义分页"></a>三. 自定义分页</h3><blockquote><p>有时候用api级别的方法不能满足分页的需求，比如多张表关联查询的时候，这个时候就需要自定义分页了。</p></blockquote><p>这里简单点，就用单张表来演示一下！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 自定义分页</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"&lt;script&gt;"</span><span class="token punctuation">,</span>            <span class="token string">"select id, name, age, email, sex, is_delete, create_time, update_time from user"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;where&gt;"</span><span class="token punctuation">,</span>                <span class="token string">"&lt;if test = 'age != null'&gt;"</span><span class="token punctuation">,</span>                    <span class="token string">"age &gt; #{age}"</span><span class="token punctuation">,</span>                <span class="token string">"&lt;/if&gt;"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;/where&gt;"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;/script&gt;"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryPageByAge</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> page<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 测试方法</span><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"分页4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pageTest4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objectPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分页</span>  objectPage<span class="token punctuation">.</span><span class="token function">setOrders</span><span class="token punctuation">(</span><span class="token class-name">OrderItem</span><span class="token punctuation">.</span><span class="token function">descs</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 排序</span>  <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userIPage <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">queryPageByAge</span><span class="token punctuation">(</span>objectPage<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objectPage<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userIPage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true; 分页返回的对象与传入的对象是同一个</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT COUNT(*) FROM user WHERE age &gt; ?==&gt; Parameters: 18(Integer)&lt;==    Columns: COUNT(*)&lt;==        Row: 4&lt;==      Total: 1==&gt;  Preparing: SELECT id, name, age, email, sex, is_delete, create_time, update_time FROM user WHERE age &gt; ? ORDER BY age DESC LIMIT ?==&gt; Parameters: 18(Integer), 2(Long)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 3, Tom, 28, test3@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 5, Billie, 24, test5@baomidou.com, FEMALE, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h4><p>使用<code>mybatis plus</code>的分页首先<strong>需要进行配置</strong>，分页是与方法相关的，也就是在方法参数上会有体现。相比较来说还是<code>pagehelper</code>功能更加强大，分页信息无需与<code>mapper</code>方法参数绑定，不强耦合！</p>]]></content>
      
      
      <categories>
          
          <category> mybatis plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> mybatis plus </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Plus 系列3.2 —— Mapper CRUD之条件构造器</title>
      <link href="2021/02/13/mybatis-plus-3-2-mapper-crud-zhi-tiao-jian-gou-zao-qi/"/>
      <url>2021/02/13/mybatis-plus-3-2-mapper-crud-zhi-tiao-jian-gou-zao-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>接着 <a href="/2021/02/13/mybatis-plus-3-1-mapper-crud-zhi-cha-xun/" title="Mybatis Plus 系列3.1 —— Mapper CRUD之查询">Mybatis Plus 系列3.1 —— Mapper CRUD之查询</a> 我们这章主要讲一下条件构造器。</p></blockquote><p>关于条件构造器，还是先贴一下官网的说明：</p><ul><li>以下出现的第一个入参<code>boolean condition</code>表示该条件<strong>是否</strong>加入最后生成的sql中，例如：<code>query.like(StringUtils.isNotBlank(name), Entity::getName, name) .eq(age!=null &amp;&amp; age &gt;= 0, Entity::getAge, age)</code></li><li>以下代码块内的多个方法均为从上往下补全个别<code>boolean</code>类型的入参,默认为<code>true</code></li><li>以下出现的泛型<code>Param</code>均为<code>Wrapper</code>的子类实例(均具有<code>AbstractWrapper</code>的所有方法)</li><li>以下方法在入参中出现的<code>R</code>为泛型,在普通wrapper中是<code>String</code>,在<code>LambdaWrapper</code>中是<strong>函数</strong>(例:<code>Entity::getId</code>,<code>Entity</code>为实体类,<code>getId</code>为字段<code>id</code>的<strong>getMethod</strong>)</li><li>以下方法入参中的<code>R column</code>均表示数据库字段,当<code>R</code>具体类型为<code>String</code>时则为数据库字段名(<strong>字段名是数据库关键字的自己用转义符包裹!</strong>)!而不是实体类数据字段名!!!,另当<code>R</code>具体类型为<code>SFunction</code>时项目runtime不支持eclipse自家的编译器!!!</li><li>以下举例均为使用普通<code>wrapper</code>,入参为<code>Map</code>和<code>List</code>的均以<code>json</code>形式表现!</li><li>使用中如果入参的<code>Map</code>或者<code>List</code>为<strong>空</strong>,则不会加入最后生成的sql中!!!</li></ul><p>还是先看一下<code>Wrapper</code>的类继承关系：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210213105732200.png" alt="image-20210213105732200"></p><p>上一章就说过，我是推荐使用 Lambda 表达式 的方式构建<code>Wrapper</code>的，所以我们主要使用：<code>LambdaQueryWrapper</code>和<code>LambdaUpdateWrapper</code>来做示例，首先看一下类图：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/gaitubao_LambdaQueryWrapper.jpg" alt="gaitubao_LambdaQueryWrapper"></p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/gaitubao_LambdaUpdateWrapper.jpg"></p><p>我们按照官网的顺序介绍一条件构造器。</p><h3 id="一-AbstractWrapper"><a href="#一-AbstractWrapper" class="headerlink" title="一. AbstractWrapper"></a>一. AbstractWrapper</h3><blockquote><p><code>QueryWrapper(LambdaQueryWrapper)</code> 和 <code>UpdateWrapper(LambdaUpdateWrapper)</code> 的父类<br>用于生成 sql 的 where 条件, entity 属性也用于生成 sql 的 where 条件<br>注意: entity 生成的 where 条件与 使用各个 api 生成的 where 条件<strong>没有任何关联行</strong></p></blockquote><h4 id="1-eq"><a href="#1-eq" class="headerlink" title="1. eq"></a>1. eq</h4><blockquote><p>等于</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span>   <span class="token comment">// 底层调的就是 eq(true, column, val);</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"条件构造器1-eq"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eqTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token string">"MAIL"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (sex = ? AND is_delete = ?)==&gt; Parameters: MAIL(String), false(Boolean)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 1, Jone, 18, test1@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 2, Jack, 20, test2@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 3, Tom, 28, test3@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里重点介绍一下重载方法<code>eq(boolean condition, R column, Object val)</code></p><p>这里面有一个<code>condition</code>（ 执行条件）参数，用来控制当前条件是否会加到最终的SQL中去。举个例子：有一个用户查询列表页面，查询条件有”姓名“，”性别“等，如果某个条件没输入，则忽略该条件。这种场景大家应该经非常熟悉，之前我们可以使用<code>mybatis</code>的动态SQL来实现。这里我们就可以利用<code>condition</code>条件，比较优雅的实现这个功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"条件构造器2-eq"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eqTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 模拟输入的查询条件</span>  <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> sex <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment">// name 不为空时，使用该条件</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token comment">// sex 不为空时，使用该条件</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果，可见where条件并没有<code>sex</code>相关的条件了:</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (name = ? AND is_delete = ?)==&gt; Parameters: jack(String), false(Boolean)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 2, Jack, 20, test2@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比一下不使用<code>condition</code>条件的情况：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"条件构造器2-eq"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eqTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 模拟输入的查询条件</span>  <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> sex <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> sex<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (name = ? AND sex = ? AND is_delete = ?)==&gt; Parameters: jack(String), null, false(Boolean)&lt;==      Total: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><p>不仅仅<code>eq</code>条件有关于<code>condition</code>的重载方法，其它的也有，使用方式也一样，后面就不再逐个演示了！</p><h4 id="2-ne"><a href="#2-ne" class="headerlink" title="2. ne"></a>2. ne</h4><blockquote><p>不等于</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">ne</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span> <span class="token comment">// ne(true, column, val);</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"条件构造器-ne"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">neTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token string">"MAIL"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (sex &lt;&gt; ? AND is_delete = ?)==&gt; Parameters: MAIL(String), false(Boolean)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 4, Sandy, 21, test4@baomidou.com, FEMALE, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 5, Billie, 24, test5@baomidou.com, FEMALE, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-allEq"><a href="#3-allEq" class="headerlink" title="3. allEq"></a>3. allEq</h4><blockquote><p>全部eq(或个别isNull)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// params : key为数据库字段名, value为字段值</span><span class="token comment">// null2IsNull : 为true则在map的value为null时调用 isNull 方法,为false时则忽略value为null的</span><span class="token comment">// filter : 过滤函数,是否允许字段传入比对条件中</span><span class="token function">allEq</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token comment">// 底层调用 allEq(params, true);</span><span class="token function">allEq</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token keyword">boolean</span> null2IsNull<span class="token punctuation">)</span> <span class="token comment">// 底层调用 allEq(true, params, null2IsNull);</span><span class="token function">allEq</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token keyword">boolean</span> null2IsNull<span class="token punctuation">)</span>    <span class="token function">allEq</span><span class="token punctuation">(</span><span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> filter<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token comment">// 底层调用 allEq(filter, params, true)</span><span class="token function">allEq</span><span class="token punctuation">(</span><span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> filter<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token keyword">boolean</span> null2IsNull<span class="token punctuation">)</span> <span class="token comment">// 底层调用 allEq(true, filter, params, null2IsNull)</span><span class="token function">allEq</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> filter<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token keyword">boolean</span> null2IsNull<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"条件构造器1-allEq"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">allEqTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SFunction</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token string">"MAIL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// param 为 null 或者 empty 则查询全部</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allEq</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (is_delete = ? AND sex = ?)==&gt; Parameters: false(Boolean), MAIL(String)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 1, Jone, 18, test1@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 2, Jack, 20, test2@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 3, Tom, 28, test3@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"条件构造器2-allEq"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">allEqTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SFunction</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token string">"MAIL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">allEq</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认null2IsNull 为 true， 此时查询调价会忽略value为null的key</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (sex = ?)==&gt; Parameters: MAIL(String)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 1, Jone, 18, test1@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 2, Jack, 20, test2@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 3, Tom, 28, test3@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例3：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"条件构造器3-allEq"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">allEqTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">SFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> sex <span class="token operator">=</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SFunction</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sex<span class="token punctuation">,</span> <span class="token string">"MAIL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">allEq</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 过滤函数,是否允许字段传入比对条件中</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"k = {}, v = {}"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只需要 sex 条件, 如果过滤出来为空（始终返回false），那么则全量查询</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认null2IsNull 为 true， 此时查询调价会忽略value为null的key</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">2021-02-13 12:28:16.153  INFO 40236 --- [    Test worker] c.j.m.demo.demo.UserWrapperTest          : k = cn.justmr.mybatisplus.demo.demo.UserWrapperTest$$Lambda$829/1464585291@6e247c30, v = MAIL2021-02-13 12:28:16.158  INFO 40236 --- [    Test worker] c.j.m.demo.demo.UserWrapperTest          : k = cn.justmr.mybatisplus.demo.demo.UserWrapperTest$$Lambda$830/567167554@3f9bd04, v = false...==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (sex = ?)==&gt; Parameters: MAIL(String)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 1, Jone, 18, test1@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 2, Jack, 20, test2@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 3, Tom, 28, test3@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-gt"><a href="#4-gt" class="headerlink" title="4. gt"></a>4. gt</h4><blockquote><p>大于</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">ge</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.gt(User::getAge, 18) ---&gt; age &gt; 18</code></p></blockquote><h4 id="5-ge"><a href="#5-ge" class="headerlink" title="5. ge"></a>5. ge</h4><blockquote><p>大于等于</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">ge</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.ge(User::getAge, 18) ---&gt; age &gt;= 18</code></p></blockquote><h4 id="6-lt"><a href="#6-lt" class="headerlink" title="6. lt"></a>6. lt</h4><blockquote><p>小于</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">lt</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token function">lt</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.lt(User::getAge, 18) ---&gt; age &lt; 18</code></p></blockquote><h4 id="7-le"><a href="#7-le" class="headerlink" title="7. le"></a>7. le</h4><blockquote><p>小于等于</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">le</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.le(User::getAge, 18) ---&gt; age &lt;= 18</code></p></blockquote><h4 id="8-between"><a href="#8-between" class="headerlink" title="8. between"></a>8. between</h4><blockquote><p>BETWEEN 值1 AND 值2</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">between</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val1<span class="token punctuation">,</span> <span class="token class-name">Object</span> val2<span class="token punctuation">)</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val1<span class="token punctuation">,</span> <span class="token class-name">Object</span> val2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.between(User::getAge, 18, 20) ---&gt; age BETWEEN 18 AND 20</code></p></blockquote><h4 id="9-notBetween"><a href="#9-notBetween" class="headerlink" title="9. notBetween"></a>9. notBetween</h4><blockquote><p>NOT BETWEEN 值1 AND 值2</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">notBetween</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val1<span class="token punctuation">,</span> <span class="token class-name">Object</span> val2<span class="token punctuation">)</span><span class="token function">notBetween</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val1<span class="token punctuation">,</span> <span class="token class-name">Object</span> val2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.notBetween(User::getAge, 18, 20) ---&gt; age NOT BETWEEN 18 AND 20</code></p></blockquote><h4 id="10-like"><a href="#10-like" class="headerlink" title="10. like"></a>10. like</h4><blockquote><p>模糊查询 <code>LIKE '%值%'</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.like(User::getName, "J") ---&gt; name LIKE '%J%'</code></p></blockquote><p><strong>注意：</strong>不需要自己拼接’%’了</p><h4 id="11-notLike"><a href="#11-notLike" class="headerlink" title="11. notLike"></a>11. notLike</h4><blockquote><p>NOT LIKE ‘%值%’</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">notLike</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token function">notLike</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.notLike(User::getName, "J") ---&gt; name NOT LIKE '%J%'</code></p></blockquote><h4 id="12-likeLeft"><a href="#12-likeLeft" class="headerlink" title="12. likeLeft"></a>12. likeLeft</h4><blockquote><p>LIKE ‘%值’</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">likeLeft</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token function">likeLeft</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.likeLeft(User::getName, "J") ---&gt; name LIKE '%J'</code></p></blockquote><h4 id="13-likeRight"><a href="#13-likeRight" class="headerlink" title="13. likeRight"></a>13. likeRight</h4><blockquote><p>LIKE ‘值%’</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.likeRight(User::getName, "J") ---&gt; name LIKE 'J%'</code></p></blockquote><h4 id="14-isNull"><a href="#14-isNull" class="headerlink" title="14. isNull"></a>14. isNull</h4><blockquote><p>字段 IS NULL</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">)</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.isNull(User::getName) ---&gt; name IS NULL</code></p></blockquote><h4 id="15-isNotNull"><a href="#15-isNotNull" class="headerlink" title="15. isNotNull"></a>15. isNotNull</h4><blockquote><p>字段 IS NOT NULL</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">)</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.isNotNull(User::getName) ---&gt; name IS NOT NULL</code></p></blockquote><h4 id="16-in"><a href="#16-in" class="headerlink" title="16. in"></a>16. in</h4><blockquote><p>字段 IN (value.get(0), value.get(1), …)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">)</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.in(User::getId, Lists.list(1L, 2L)) ---&gt; id IN (1, 2)</code></p></blockquote><p><strong>注意</strong>：</p><ol><li><p>value不能为null，会报错</p></li><li><p>value不能为空，会报错，例如</p><p><code>SELECT  id,name,age,email,sex,is_delete,create_time,update_time  FROM user     WHERE id IN ();</code>这个sql执行报错</p></li></ol><h4 id="17-notIn"><a href="#17-notIn" class="headerlink" title="17. notIn"></a>17. notIn</h4><blockquote><p>字段 NOT IN (value.get(0), value.get(1), …)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">notIn</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">)</span><span class="token function">notIn</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.notIn(User::getId, Lists.list(1L, 2L)) ---&gt; id NOT IN (1, 2)</code></p></blockquote><h4 id="18-inSql"><a href="#18-inSql" class="headerlink" title="18. inSql"></a>18. inSql</h4><blockquote><p>字段 IN ( sql语句 )</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">String</span> inValue<span class="token punctuation">)</span><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">String</span> inValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><ul><li>例: <code>.inSql(User::getId, "1, 2") --- &gt; id IN (1, 2)</code> // 会有sql注入风险</li><li>例: <code>inSql(User::getId, "select id from table where id &lt; 3") ---&gt; id IN (select id from user where id &lt; 3) </code></li></ul><h4 id="19-notInSql"><a href="#19-notInSql" class="headerlink" title="19. notInSql"></a>19. notInSql</h4><blockquote><p>字段 NOT IN ( sql语句 )</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">notInSql</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">String</span> inValue<span class="token punctuation">)</span><span class="token function">notInSql</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">String</span> inValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="20-groupBy"><a href="#20-groupBy" class="headerlink" title="20. groupBy"></a>20. groupBy</h4><blockquote><p>分组：GROUP BY 字段, …</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：<code>.groupBy(User::getSex) ---&gt; GROUP BY sex</code></p></blockquote><h4 id="21-orderByAsc"><a href="#21-orderByAsc" class="headerlink" title="21. orderByAsc"></a>21. orderByAsc</h4><blockquote><p>排序：ORDER BY 字段, … ASC</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例:<code>.orderByAsc(orderByAsc(User::getCreateTime, User::getId)) ---&gt; ORDER BY create_time ASC, id ASC</code></p></blockquote><h4 id="22-orderByDesc"><a href="#22-orderByDesc" class="headerlink" title="22. orderByDesc"></a>22. orderByDesc</h4><blockquote><p>排序：ORDER BY 字段, … DESC</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例:<code>.orderByDesc(orderByAsc(User::getCreateTime, User::getId)) ---&gt; ORDER BY create_time DESC, id DESC</code></p></blockquote><h4 id="23-orderBy"><a href="#23-orderBy" class="headerlink" title="23. orderBy"></a>23. orderBy</h4><blockquote><p>排序：ORDER BY 字段, …</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isAsc<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> columns<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：<code>.orderBy(true, true, User::getCreateTime, User::getId) ---&gt; ORDER BY create_time ASC, id ASC</code></p></blockquote><h4 id="24-having"><a href="#24-having" class="headerlink" title="24. having"></a>24. having</h4><blockquote><p>HAVING ( sql语句 )</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">having</span><span class="token punctuation">(</span><span class="token class-name">String</span> sqlHaving<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span><span class="token function">having</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> sqlHaving<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><ul><li>例: <code>having("sum(age) &gt; 10") ---&gt; having sum(age) &gt; 10</code></li><li>例: <code>having("sum(age) &gt; {0}", 11) ---&gt; having sum(age) &gt; 11</code></li></ul><h4 id="25-func"><a href="#25-func" class="headerlink" title="25. func"></a>25. func</h4><blockquote><p>主要方便在出现if…else下调用不同方法能不断链</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Children</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Children</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>示例1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"条件构造器1-apply"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">applyTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        item<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"1 != 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        item<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getCreateTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (id IN (?) AND is_delete = ?) ORDER BY create_time ASC==&gt; Parameters: 1(Long), false(Boolean)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 1, Jone, 18, test1@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例2，对比一下示例1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"条件构造器2-apply"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">applyTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        item<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"1 != 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        item<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getCreateTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (1 != 1 AND is_delete = ?) ORDER BY create_time ASC==&gt; Parameters: false(Boolean)&lt;==      Total: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="26-or"><a href="#26-or" class="headerlink" title="26. or"></a>26. or</h4><blockquote><p>拼接 OR</p><p>主动调用<code>or</code>表示紧接着下一个<strong>方法</strong>不是用<code>and</code>连接!(不调用<code>or</code>则默认为使用<code>and</code>连接)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. WHERE id = 1 OR name = 'Jack' AND is_delete = false</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">// 2. WHERE id = 1 AND name = 'Jack' AND is_delete = false</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>or嵌套</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. WHERE (id = ? OR (name = ? AND email = ?) AND is_delete = ?)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"JACK"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">,</span> <span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. WHERE (id = ? AND is_delete = ?)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"JACK"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">,</span> <span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="27-and"><a href="#27-and" class="headerlink" title="27. and"></a>27. and</h4><blockquote><p>AND 嵌套</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// WHERE (name = ? AND (age = ? OR age = ?) AND is_delete = ?)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="28-nested"><a href="#28-nested" class="headerlink" title="28. nested"></a>28. nested</h4><blockquote><p>正常嵌套 不带 AND 或者 OR</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&gt;</span><span class="token function">nested</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token function">nested</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Param</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// WHERE (name = ? AND (age = ? OR age = ?) AND is_delete = ?)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nested</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="29-apply"><a href="#29-apply" class="headerlink" title="29. apply"></a>29. apply</h4><blockquote><p>拼接 sql</p><p>该方法可用于数据库<strong>函数</strong> 动态入参的<code>params</code>对应前面<code>applySql</code>内部的<code>{index}</code>部分.这样是不会有sql注入风险的,反之会有!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> applySql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> applySql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p></blockquote><ul><li>例: <code>apply("id = 1")</code>—&gt;<code>id = 1</code></li><li>例: <code>apply("date_format(dateColumn,'%Y-%m-%d') = '2008-08-08'")</code>—&gt;<code>date_format(dateColumn,'%Y-%m-%d') = '2008-08-08'")</code></li><li>例: <code>apply("date_format(dateColumn,'%Y-%m-%d') = {0}", "2008-08-08")</code>—&gt;<code>date_format(dateColumn,'%Y-%m-%d') = '2008-08-08'")</code></li></ul><h4 id="30-last"><a href="#30-last" class="headerlink" title="30. last"></a>30. last</h4><blockquote><p>无视优化规则直接拼接到 sql 的最后</p><p>只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">last</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastSql<span class="token punctuation">)</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> lastSql<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>使用的较多的就是<code>last("limit 1")</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"条件构造器-last"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lastTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"limit 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (age &gt; ? AND is_delete = ?) ORDER BY age DESC limit 1==&gt; Parameters: 18(Integer), false(Boolean)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 3, Tom, 28, test3@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="31-exists"><a href="#31-exists" class="headerlink" title="31. exists"></a>31. exists</h4><blockquote><p>拼接 EXISTS ( sql语句 )</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">exists</span><span class="token punctuation">(</span><span class="token class-name">String</span> existsSql<span class="token punctuation">)</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> existsSql<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例: <code>exists("select id from table where age = 1") ---&gt; exists (select id from table where age = 1)</code></p></blockquote><h4 id="32-notExists"><a href="#32-notExists" class="headerlink" title="32. notExists"></a>32. notExists</h4><blockquote><p>拼接 NOT EXISTS ( sql语句 )</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">notExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> notExistsSql<span class="token punctuation">)</span><span class="token function">notExists</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> notExistsSql<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例: <code>notExists("select id from table where age = 1") ---&gt; not exists (select id from table where age = 1)</code></p></blockquote><h3 id="二-QueryWrapper"><a href="#二-QueryWrapper" class="headerlink" title="二. QueryWrapper"></a>二. QueryWrapper</h3><blockquote><p>继承自 AbstractWrapper ,自身的内部属性 entity 也用于生成 where 条件<br>及 LambdaQueryWrapper, 可以通过 new QueryWrapper().lambda() 方法获取</p></blockquote><h4 id="1-select"><a href="#1-select" class="headerlink" title="1. select"></a>1. select</h4><blockquote><p>设置查询字段</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> sqlSelect<span class="token punctuation">)</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TableFieldInfo</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> entityClass<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TableFieldInfo</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>以上方法分为两类.<br>第二类方法为:过滤查询字段(主键除外),入参不包含 class 的调用前需要<code>wrapper</code>内的<code>entity</code>属性有值! 这两类方法重复调用以最后一次为准</p></blockquote><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. SELECT id,name FROM user WHERE (is_delete = ?)</span><span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"is_delete"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. ELECT id,name FROM user WHERE (is_delete = ?)</span><span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">setEntityClass</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 必要</span>  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"is_delete"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. SELECT id,name FROM user WHERE (is_delete = ?)</span><span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"is_delete"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-lambda"><a href="#2-lambda" class="headerlink" title="2. lambda"></a>2. lambda</h4><blockquote><p>获取<code>LambdaQueryWrapper</code></p></blockquote><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="三-UpdateWrapper"><a href="#三-UpdateWrapper" class="headerlink" title="三. UpdateWrapper"></a>三. UpdateWrapper</h3><blockquote><p>继承自 <code>AbstractWrapper</code> ,自身的内部属性 <code>entity</code> 也用于生成 where 条件<br>及 <code>LambdaUpdateWrapper</code>, 可以通过 <code>new UpdateWrapper().lambda()</code> 方法获取!</p></blockquote><h4 id="1-set"><a href="#1-set" class="headerlink" title="1. set"></a>1. set</h4><blockquote><p>QL SET 字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">String</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例: <code>set("name", "老李头")</code></p></blockquote><p>示例: <code>set("name", "")</code>—&gt;数据库字段值变为<strong>空字符串</strong></p><p>示例:<code>set("name", null)</code>—&gt;数据库字段值变为<code>null</code></p><h4 id="2-setSql"><a href="#2-setSql" class="headerlink" title="2. setSql"></a>2. setSql</h4><blockquote><p>设置 SET 部分 SQL</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例: <code>setSql("name = '老李头'")</code></p></blockquote><h4 id="3-lambda"><a href="#3-lambda" class="headerlink" title="3. lambda"></a>3. lambda</h4><blockquote><p>获取<code>LambdaUpdateWrapper</code></p></blockquote><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">,</span> <span class="token string">"33@qq.com"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mybatis plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> mybatis plus </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Plus 系列3.1 —— Mapper CRUD之查询</title>
      <link href="2021/02/13/mybatis-plus-3-1-mapper-crud-zhi-cha-xun/"/>
      <url>2021/02/13/mybatis-plus-3-1-mapper-crud-zhi-cha-xun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这一章，我们开始一起学习使用Mapper来进行增删改查！</p></blockquote><h3 id="一-前置准备"><a href="#一-前置准备" class="headerlink" title="一. 前置准备"></a>一. 前置准备</h3><p>项目结构:</p><pre class="line-numbers language-none"><code class="language-none">.├── build.gradle├── gradle│&nbsp;&nbsp; └── wrapper│&nbsp;&nbsp;     ├── gradle-wrapper.jar│&nbsp;&nbsp;     └── gradle-wrapper.properties├── gradlew├── gradlew.bat├── settings.gradle└── src    ├── main    │&nbsp;&nbsp; ├── java    │&nbsp;&nbsp; │&nbsp;&nbsp; └── cn    │&nbsp;&nbsp; │&nbsp;&nbsp;     └── justmr    │&nbsp;&nbsp; │&nbsp;&nbsp;         └── mybatisplus    │&nbsp;&nbsp; │&nbsp;&nbsp;             └── demo    │&nbsp;&nbsp; │&nbsp;&nbsp;                 ├── DemoApplication.java    │&nbsp;&nbsp; │&nbsp;&nbsp;                 ├── UserRepository.java    │&nbsp;&nbsp; │&nbsp;&nbsp;                 ├── entity    │&nbsp;&nbsp; │&nbsp;&nbsp;                 │&nbsp;&nbsp; ├── BaseEntity.java    │&nbsp;&nbsp; │&nbsp;&nbsp;                 │&nbsp;&nbsp; └── User.java    │&nbsp;&nbsp; │&nbsp;&nbsp;                 ├── handler    │&nbsp;&nbsp; │&nbsp;&nbsp;                 │&nbsp;&nbsp; ├── MyMetaObjectHandler.java    │&nbsp;&nbsp; │&nbsp;&nbsp;                 └── mapper    │&nbsp;&nbsp; │&nbsp;&nbsp;                     └── UserMapper.java    │&nbsp;&nbsp; └── resources    │&nbsp;&nbsp;     ├── application.yml    │&nbsp;&nbsp;     ├── static    │&nbsp;&nbsp;     └── templates    └── test        └── java            └── cn                └── justmr                    └── mybatisplus                        └── demo                            └── demo                                └── UserTests.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-build-gradle"><a href="#1-build-gradle" class="headerlink" title="1. build.gradle"></a>1. build.gradle</h4><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">plugins <span class="token punctuation">{</span>    id <span class="token string">'org.springframework.boot'</span> version <span class="token string">'2.3.4.RELEASE'</span>    id <span class="token string">'io.spring.dependency-management'</span> version <span class="token string">'1.0.10.RELEASE'</span>    id <span class="token string">'java'</span><span class="token punctuation">}</span>group <span class="token operator">=</span> <span class="token string">'cn.justmr.mybatis-plus.demo'</span>version <span class="token operator">=</span> <span class="token string">'0.0.1-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token string">'1.8'</span>configurations <span class="token punctuation">{</span>    compileOnly <span class="token punctuation">{</span>        extendsFrom annotationProcessor    <span class="token punctuation">}</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    <span class="token comment">// 为了加快速度，配置阿里镜像仓库</span>    maven <span class="token punctuation">{</span> url <span class="token string gstring">"http://maven.aliyun.com/nexus/content/groups/public"</span> <span class="token punctuation">}</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ext <span class="token punctuation">{</span>    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'mybaitsPlusVersion'</span><span class="token punctuation">,</span> <span class="token string gstring">"3.4.2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    compileOnly <span class="token string">'org.projectlombok:lombok'</span>    testCompileOnly <span class="token string">'org.projectlombok:lombok'</span>    runtimeOnly <span class="token string">'mysql:mysql-connector-java'</span>    <span class="token comment">// 引入mybatis plus</span>    compile <span class="token string gstring">"com.baomidou:mybatis-plus-boot-starter:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">{</span>mybaitsPlusVersion<span class="token punctuation">}</span></span>"</span>    annotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    testAnnotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    <span class="token function">testImplementation</span><span class="token punctuation">(</span><span class="token string">'org.springframework.boot:spring-boot-starter-test'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        exclude group<span class="token punctuation">:</span> <span class="token string">'org.junit.vintage'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'junit-vintage-engine'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-application-yml"><a href="#2-application-yml" class="headerlink" title="2. application.yml"></a>2. application.yml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/demo<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> test    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment"># 开启自动驼峰命名规则（camel case）映射,默认就是true</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 输出日志</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> not_null      <span class="token key atrule">update-strategy</span><span class="token punctuation">:</span> not_null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-sql语句"><a href="#3-sql语句" class="headerlink" title="3. sql语句"></a>3. sql语句</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- mysql 版本 5.7.24</span><span class="token comment">-- 测试表结构</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id          <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>    name        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>         <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age         <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>             <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    email       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>         <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    sex         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>         <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>    is_delete   <span class="token keyword">TINYINT</span>                      <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否删除'</span><span class="token punctuation">,</span>    create_time <span class="token keyword">datetime</span>            <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    update_time <span class="token keyword">datetime</span>            <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">comment</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token comment">-- 初始化测试数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">,</span> <span class="token string">'MAIL'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">,</span> <span class="token string">'MAIL'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">,</span> <span class="token string">'MAIL'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">,</span> <span class="token string">'FEMALE'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">,</span> <span class="token string">'FEMALE'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-初始数据"><a href="#4-初始数据" class="headerlink" title="4. 初始数据"></a>4. 初始数据</h4><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210212224757754.png" alt="image-20210212224757754"></p><h4 id="5-UserMapper"><a href="#5-UserMapper" class="headerlink" title="5. UserMapper"></a>5. UserMapper</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-MyMetaObjectHandler"><a href="#6-MyMetaObjectHandler" class="headerlink" title="6. MyMetaObjectHandler"></a>6. MyMetaObjectHandler</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自动填充 create_time 和 update_time 字段 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====== start insert fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 严格填充,只针对非主键的字段,只有该表注解了fill 并且 字段名和字段属性 能匹配到才会进行填充(严格模式填充策略,默认有值不覆盖,如果提供的值为null也不填充)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictInsertFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictInsertFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span> <span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====== start update fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 严格填充,只针对非主键的字段,只有该表注解了fill 并且 字段名和字段属性 能匹配到才会进行填充(严格模式填充策略,默认有值不覆盖,如果提供的值为null也不填充)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictUpdateFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span> <span class="token string">"updateTime"</span><span class="token punctuation">,</span>  <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-启动类"><a href="#7-启动类" class="headerlink" title="7. 启动类"></a>7. 启动类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>justmr<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"cn.justmr.mybatisplus.demo.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-查询"><a href="#二-查询" class="headerlink" title="二. 查询"></a>二. 查询</h3><p>首先看一下<code>UserMapper</code>实现的<code>BaseMapper</code>的接口：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/BaseMapper.png" alt="BaseMapper"></p><h4 id="1-BaseMapper-selectById"><a href="#1-BaseMapper-selectById" class="headerlink" title="1. BaseMapper#selectById"></a>1. BaseMapper#selectById</h4><blockquote><p>根据id查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">T</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">UserTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"根据id查询"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectByIdTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE id=?==&gt; Parameters: 1(Long)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 1, Jone, 18, test1@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-BaseMapper-selectBatchIds"><a href="#2-BaseMapper-selectBatchIds" class="headerlink" title="2. BaseMapper#selectBatchIds"></a>2. BaseMapper#selectBatchIds</h4><blockquote><p>idList 不能为 null 以及 empty，否则会报错</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&gt;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectBatchIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>COLLECTION<span class="token punctuation">)</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"根据id批量查询"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectBatchIdsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE id IN ( ? , ? )==&gt; Parameters: 1(Long), 2(Long)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 1, Jone, 18, test1@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 2, Jack, 20, test2@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-BaseMapper-selectByMap"><a href="#3-BaseMapper-selectByMap" class="headerlink" title="3. BaseMapper#selectByMap"></a>3. BaseMapper#selectByMap</h4><blockquote><p>查询（根据 columnMap 条件）<br>Params:<br>columnMap – 表字段 map 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>COLUMN_MAP<span class="token punctuation">)</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"根据 columnMap 条件查询"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectByMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Jone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByMap</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE name = ? AND age = ?==&gt; Parameters: Jone(String), 18(Integer)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 1, Jone, 18, test1@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：如果<code>columnMap</code>为<code>null</code>或者<code>empty</code>,则是全量查询</strong></p><h4 id="4-BaseMapper-selectOne"><a href="#4-BaseMapper-selectOne" class="headerlink" title="4. BaseMapper#selectOne"></a>4. BaseMapper#selectOne</h4><blockquote><p>根据 entity 条件，查询一条记录<br>Params:<br>queryWrapper – 实体对象封装操作类（可以为 null）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里出现了一个新的对象<code>Wrapper</code>，我们先看一下这个类的继承实现关系！</p></blockquote><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210212234659828.png" alt="image-20210212234659828"></p><p>如图，标记出来的是跟查询相关的<code>Wrapper</code>。下面我们就写一下对应的单元测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"查询一条记录1(不推荐)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectOneTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 这种写法不推荐，列名需要使用字符串维护，很容易写错，而且写错只能到运行时才能发现</span>  <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Jone"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"is_delete"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不能写错成 isDelete</span>    <span class="token comment">//        // 也可以使用 Wrappers 中的静态方法</span>  <span class="token comment">//        QueryWrapper&lt;User&gt; eq = Wrappers.&lt;User&gt;query()</span>  <span class="token comment">//                .eq("name", "Jone")</span>  <span class="token comment">//                .eq("age", 18)</span>  <span class="token comment">//                .eq("is_delete", false);</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"查询一条记录2(推荐)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectOneTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 相比上一个例子，更推荐这个，通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"Jone"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//        // 也可以使用 Wrappers 中的静态方法</span>  <span class="token comment">//        LambdaQueryWrapper&lt;User&gt; eq = Wrappers.&lt;User&gt;lambdaQuery()</span>  <span class="token comment">//                .eq(User::getName, "Jone")</span>  <span class="token comment">//                .eq(User::getAge, 18)</span>  <span class="token comment">//                .eq(User::getIsDelete, false);</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"查询一条记录3-链式(不推荐)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectOneTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 这种写法不推荐，列名需要使用字符串维护，很容易写错，而且写错只能到运行时才能发现</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryChainWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>userMapper<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Jone"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"is_delete"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//        // 也可以使用 Wrappers 中的静态方法</span>  <span class="token comment">//        User user = ChainWrappers.queryChain(userMapper)</span>  <span class="token comment">//                .eq("name", "Jone")</span>  <span class="token comment">//                .eq("age", 18)</span>  <span class="token comment">//                .eq("is_delete", false)</span>  <span class="token comment">//                .one();</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"查询一条记录4-链式(推荐)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectOneTest4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 相比上一个例子，更推荐这个，通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryChainWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>userMapper<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"Jone"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        // 也可以使用 Wrappers 中的静态方法</span><span class="token comment">//        User user = ChainWrappers.lambdaQueryChain(userMapper)</span><span class="token comment">//                .eq(User::getName, "Jone")</span><span class="token comment">//                .eq(User::getAge, 18)</span><span class="token comment">//                .eq(User::getIsDelete, false)</span><span class="token comment">//                .one();</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (name = ? AND age = ? AND is_delete = ?)==&gt; Parameters: Jone(String), 18(Integer), false(Boolean)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 1, Jone, 18, test1@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p><strong><code>selectOne</code>方法查询到多条数据会出现异常！</strong></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"查询一条记录5-查到多条"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectOneTest5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryChainWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>userMapper<span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果（单元测试通过）：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (age &gt; ? AND is_delete = ?)==&gt; Parameters: 20(Integer), false(Boolean)&lt;==    Columns: id, name, age, email, sex, is_delete, create_time, update_time&lt;==        Row: 3, Tom, 28, test3@baomidou.com, MAIL, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 4, Sandy, 21, test4@baomidou.com, FEMALE, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==        Row: 5, Billie, 24, test5@baomidou.com, FEMALE, 0, 2021-02-12 22:43:00, 2021-02-12 22:43:00&lt;==      Total: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>返回Optional</strong></p><p>如果我们查询一条数据时，想直接返回<code>Optional</code>对象，那我可以链式操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"查询一条记录6-Optional"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectOneTest6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryChainWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>userMapper<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">oneOpt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果（测试通过）:</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user WHERE (age &gt; ? AND is_delete = ?)==&gt; Parameters: 100(Integer), false(Boolean)&lt;==      Total: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>总结一下：</strong></p><p>构建<code>Wrapper</code>建议使用<code>Lambda</code>表达式的方式，类型安全！</p><h4 id="5-BaseMapper-selectCount"><a href="#5-BaseMapper-selectCount" class="headerlink" title="5. BaseMapper#selectCount"></a>5. BaseMapper#selectCount</h4><blockquote><p>根据 Wrapper 条件，查询总记录数<br>Params:<br>queryWrapper – 实体对象封装操作类（可以为 null）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>WRAPPER<span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"查询总记录数"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectCountTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> eq <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIsDelete</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> integer <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>integer <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: SELECT COUNT( * ) FROM user WHERE (age &gt; ? AND is_delete = ?)==&gt; Parameters: 20(Integer), false(Boolean)&lt;==    Columns: COUNT( * )&lt;==        Row: 3&lt;==      Total: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-BaseMapper-selectList，BaseMapper-selectMaps，BaseMapper-selectObjs"><a href="#6-BaseMapper-selectList，BaseMapper-selectMaps，BaseMapper-selectObjs" class="headerlink" title="6. BaseMapper#selectList，BaseMapper#selectMaps，BaseMapper#selectObjs"></a>6. BaseMapper#selectList，BaseMapper#selectMaps，BaseMapper#selectObjs</h4><blockquote><p>这些就不一一举例了</p></blockquote><h4 id="7-BaseMapper-selectPage，BaseMapper-selectMapsPage"><a href="#7-BaseMapper-selectPage，BaseMapper-selectMapsPage" class="headerlink" title="7. BaseMapper#selectPage，BaseMapper#selectMapsPage"></a>7. BaseMapper#selectPage，BaseMapper#selectMapsPage</h4><blockquote><p>对于分页，后面会单独讲</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mybatis plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> mybatis plus </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus 系列2 —— 常用注解</title>
      <link href="2021/02/12/mybatis-plus-chang-yong-zhu-jie/"/>
      <url>2021/02/12/mybatis-plus-chang-yong-zhu-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一章我们讲了 <a href="/2021/02/12/mybatis-plus-qi-bu/" title="Mybatis Plus 系列1 —— 起步">Mybatis Plus 系列1 —— 起步</a>，这一章我们继续了解常用注解部分！</p></blockquote><h4 id="一-TableName"><a href="#一-TableName" class="headerlink" title="一. @TableName"></a>一. @TableName</h4><blockquote><p>表名注解</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 数据库表相关 * * @author hubin, hanchunlin * @since 2016-01-23 */</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">TableName</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 实体对应的表名     */</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 配置此值将覆盖全局配置的 schema     * @since 3.1.1     */</span>    <span class="token class-name">String</span> <span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 是否保持使用全局的 tablePrefix 的值     * 只生效于 既设置了全局的 tablePrefix 也设置了上面 #value() 的值     * 如果是 false , 全局的 tablePrefix 不生效      * @since 3.1.1     */</span>    <span class="token keyword">boolean</span> <span class="token function">keepGlobalPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 实体映射结果集,     * 只生效与 mp 自动注入的 method     */</span>    <span class="token class-name">String</span> <span class="token function">resultMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 是否自动构建 resultMap 并使用,     * 只生效与 mp 自动注入的 method,     * 如果设置 resultMap 则不会进行 resultMap 的自动构建并注入,     * 只适合个别字段 设置了 typeHandler 或 jdbcType 的情况     * @since 3.1.2     */</span>    <span class="token keyword">boolean</span> <span class="token function">autoResultMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 需要排除的属性名     * @since 3.3.1     */</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里我们挑几个常用的属性具体说明下</p></blockquote><h5 id="1-value属性作用"><a href="#1-value属性作用" class="headerlink" title="1. value属性作用"></a>1. value属性作用</h5><p>默认情况下，我们的实体类名会自动映射为表名，对应的规则会将驼峰的类名转为带下划线的表名，如：</p><p><code>CreditUser -&gt; credit_user</code></p><p>有时会为了避免实体类名称过长，或者表名前缀只有一个字母（如：t_user,这种映射成对应的实体会出新一些意料之外的情况），我们会将实体命名成另外的名称，如将上面的实体类命名为<code>User</code>,这个时候，我们需要做的就是在<code>User</code>类上加上注解<code>@TableName("credit_user")</code>即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"credit_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-schema"><a href="#2-schema" class="headerlink" title="2. schema"></a>2. schema</h5><blockquote><p>这个应该会比较少用到，也看下效果：</p></blockquote><p>首先，看一下我们数据库的配置，连接的<code>schema</code>是<code>test</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.h2.Driver    <span class="token key atrule">schema</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/schema<span class="token punctuation">-</span>h2.sql    <span class="token key atrule">data</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/data<span class="token punctuation">-</span>h2.sql    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>test    <span class="token key atrule">username</span><span class="token punctuation">:</span> test    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们在<code>User</code>上添加注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// 添加注解，注意：这里数据库表名已经改为user了，不再是credit_userl了</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>schema <span class="token operator">=</span> <span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行测试方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------ selectAll method test ------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果报错：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210212180102625.png" alt="image-20210212180102625"></p><p>可以看到已经去访问<code>demo.user</code>了。</p><h5 id="3-autoResultMap"><a href="#3-autoResultMap" class="headerlink" title="3. autoResultMap"></a>3. autoResultMap</h5><blockquote><p>这个代码注释上也说明了，需要配和配合 typeHandler 或 numericScale使用，碰到对应的场景我们再进行说明。</p></blockquote><h5 id="4-excludeProperty"><a href="#4-excludeProperty" class="headerlink" title="4. excludeProperty"></a>4. excludeProperty</h5><blockquote><p>如果实体类上有属性不是表中的某个字段，我们就可以使用该属性来排除。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>excludeProperty <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token comment">/**     * 表中没有的字段      */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> abcd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续执行上面的测试方法：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210212180738347.png" alt="image-20210212180738347"></p><p>可以看到<code>select</code>语句并没有包含<code>abcd</code>字段,同时插入、更新也会忽略该字段，这里就不演示了。</p><p>要排除某个字段，我这里还是推荐在对应字段上使用<code>@TableField(exist = false)</code>，因为<code>@TableName(excludeProperty = "abcd")</code>需要维护字符串<code>abcd</code>，不是类型安全的，使用<code>TableField</code>如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// 这里不需要 @TableName(excludeProperty = "abcd") 了</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token comment">/**     * 忽略该字段     */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> abcd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二-TableId"><a href="#二-TableId" class="headerlink" title="二. @TableId"></a>二. @TableId</h4><blockquote><p>主键注解</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">TableId</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 字段名（该值可无）     */</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 主键类型     * {@link IdType}     */</span>    <span class="token class-name">IdType</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>NONE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>type取值情况：</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">AUTO</td><td align="center">数据库ID自增</td></tr><tr><td align="center">NONE</td><td align="center">该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td></tr><tr><td align="center">INPUT</td><td align="center">用户输入ID，insert前自行set主键值</td></tr><tr><td align="center">ASSIGN_ID</td><td align="center">以下3种类型、只有当插入对象ID 为空，才自动填充分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td align="center">ASSIGN_UUID</td><td align="center">分配UUID (主键类型为 string) 默认实现类 com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator(UUID.replace(“-“,””))</td></tr></tbody></table><p>在我们的 <a href="/2021/02/12/mybatis-plus-qi-bu/" title="Mybatis Plus 起步">Mybatis Plus 起步</a>例子里，我们使用的是<code>AUTO</code>，因为我们的数据库表设置了自增属性：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210212182547539.png" alt="image-20210212182547539"></p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210212182647716.png" alt="image-20210212182647716"></p><p>测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 这里没有设置id值</span>       <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"自增"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210212182951910.png" alt="image-20210212182951910"></p><h4 id="三-TableField"><a href="#三-TableField" class="headerlink" title="三. @TableField"></a>三. @TableField</h4><blockquote><p>字段注解(非主键)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">TableField</span> <span class="token punctuation">{</span>    <span class="token comment">/**     数据库字段值     不需要配置该值的情况:     当 com.baomidou.mybatisplus.core.MybatisConfiguration.mapUnderscoreToCamelCase 为 true 时, (mp下默认是          true,mybatis默认是false), 数据库字段值.replace("_","").toUpperCase() == 实体属性名.toUpperCase()     当 com.baomidou.mybatisplus.core.MybatisConfiguration.mapUnderscoreToCamelCase 为 false 时, 数据库字段  值.toUpperCase() == 实体属性名.toUpperCase()     */</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 是否为数据库表字段     * 默认 true 存在，false 不存在     */</span>    <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 字段 where 实体查询比较条件     * 默认 {@link SqlCondition.EQUAL}     */</span>    <span class="token class-name">String</span> <span class="token function">condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**    字段 update set 部分注入, 该注解优于 el 注解使用例1：@TableField(.. , update="%s+1") 其中 %s 会填充为字段 输出 SQL 为：update 表 set 字段=字段+1 where ...例2：@TableField(.. , update="now()") 使用数据库时间 输出 SQL 为：update 表 set 字段=now() where ...     */</span>    <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 字段验证策略之 insert: 当insert操作时，该字段拼接insert语句时的策略     * IGNORED: 直接拼接 insert into table_a(column) values (#{columnProperty});     * NOT_NULL: insert into table_a(&lt;if test="columnProperty != null"&gt;column&lt;/if&gt;) values (&lt;if test="columnProperty != null"&gt;#{columnProperty}&lt;/if&gt;)     * NOT_EMPTY: insert into table_a(&lt;if test="columnProperty != null and columnProperty!=''"&gt;column&lt;/if&gt;) values (&lt;if test="columnProperty != null and columnProperty!=''"&gt;#{columnProperty}&lt;/if&gt;)     * NOT_EMPTY 如果针对的是非 CharSequence 类型的字段则效果等于 NOT_NULL     * @since 3.1.2     */</span>    <span class="token class-name">FieldStrategy</span> <span class="token function">insertStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">FieldStrategy</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>    <span class="token comment">/**     * 字段验证策略之 update: 当更新操作时，该字段拼接set语句时的策略     * &lt;p&gt;     * IGNORED: 直接拼接 update table_a set column=#{columnProperty}, 属性为null/空string都会被set进去     * NOT_NULL: update table_a set &lt;if test="columnProperty != null"&gt;column=#{columnProperty}&lt;/if&gt;     * NOT_EMPTY: update table_a set &lt;if test="columnProperty != null and columnProperty!=''"&gt;column=#{columnProperty}&lt;/if&gt;     * NOT_EMPTY 如果针对的是非 CharSequence 类型的字段则效果等于 NOT_NULL     *     * @since 3.1.2     */</span>    <span class="token class-name">FieldStrategy</span> <span class="token function">updateStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">FieldStrategy</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>    <span class="token comment">/**     * 字段验证策略之 where: 表示该字段在拼接where条件时的策略     * IGNORED: 直接拼接 column=#{columnProperty}     * NOT_NULL: &lt;if test="columnProperty != null"&gt;column=#{columnProperty}&lt;/if&gt;     * NOT_EMPTY: &lt;if test="columnProperty != null and columnProperty!=''"&gt;column=#{columnProperty}&lt;/if&gt;     * NOT_EMPTY 如果针对的是非 CharSequence 类型的字段则效果等于 NOT_NULL     *     * @since 3.1.2     */</span>    <span class="token class-name">FieldStrategy</span> <span class="token function">whereStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">FieldStrategy</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>    <span class="token comment">/**     * 字段自动填充策略     * 在对应模式下将会忽略 insertStrategy 或 updateStrategy 的配置,等于断言该字段必有值     */</span>    <span class="token class-name">FieldFill</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>    <span class="token comment">/**     * 是否进行 select 查询     * 大字段可设置为 false 不加入 select 查询范围     */</span>    <span class="token keyword">boolean</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 是否保持使用全局的 columnFormat 的值     * 只生效于 既设置了全局的 columnFormat 也设置了上面 {@link #value()} 的值     * 如果是 false , 全局的 columnFormat 不生效     *     * @since 3.1.1     */</span>    <span class="token keyword">boolean</span> <span class="token function">keepGlobalFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * JDBC类型 (该默认值不代表会按照该值生效),     * 只生效与 mp 自动注入的 method,     * 建议配合 {@link TableName#autoResultMap()} 一起使用     * {@link ResultMapping#jdbcType} and {@link ParameterMapping#jdbcType}     *     * @since 3.1.2     */</span>    <span class="token class-name">JdbcType</span> <span class="token function">jdbcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span>UNDEFINED<span class="token punctuation">;</span>    <span class="token comment">/**     * 类型处理器 (该默认值不代表会按照该值生效),     * 只生效与 mp 自动注入的 method,     * 建议配合 {@link TableName#autoResultMap()} 一起使用     * {@link ResultMapping#typeHandler} and {@link ParameterMapping#typeHandler}     *     * @since 3.1.2     */</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeHandler</span><span class="token punctuation">&gt;</span></span> <span class="token function">typeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">UnknownTypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 只在使用了 {@link #typeHandler()} 时判断是否辅助追加 javaType     * &lt;p&gt;     * 一般情况下不推荐使用     * {@link ParameterMapping#javaType}     *     * @since 3.4.0 @2020-07-23     */</span>    <span class="token keyword">boolean</span> <span class="token function">javaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 指定小数点后保留的位数,     * 只生效于 mp 自动注入的 method,     * 建议配合 {@link TableName#autoResultMap()} 一起使用     * {@link ParameterMapping#numericScale}     *     * @since 3.1.2     */</span>    <span class="token class-name">String</span> <span class="token function">numericScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个注解是属性最多，也最复杂的一个。我们也挑几个常用的属性具体说明下</p></blockquote><h5 id="1-value"><a href="#1-value" class="headerlink" title="1. value"></a>1. value</h5><blockquote><p>数据库字段名，如果实体类里面的字段名称不想和数据库”一致”，可以使用value指定数据库字段名称。</p></blockquote><p>比如：数据库有字段<code>is_delete</code>，但是在实体类里面你不想使用<code>private Boolean isDelete;</code>你想使用<code>private Boolean deleted;</code></p><p>我们不修改表结构，直接如下操作，可使程序正常运行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"is_delete"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Boolean</span> deleted<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-exist"><a href="#2-exist" class="headerlink" title="2. exist"></a>2. exist</h5><blockquote><p>是否为数据库表字段，比较简单，在说<code>@TableName</code>也举例过，这里不做过多说明了！</p></blockquote><h5 id="3-insertStrategy"><a href="#3-insertStrategy" class="headerlink" title="3. insertStrategy"></a>3. insertStrategy</h5><blockquote><p>字段验证策略之 <code>insert</code>: 当<code>insert</code>操作时，该字段拼接<code>insert</code>语句时的策略</p><ul><li>IGNORED: 直接拼接 insert into table_a(column) values (#{columnProperty});</li><li>NOT_NULL: insert into table_a(<if test="columnProperty != null">column</if>) values (<if test="columnProperty != null">#{columnProperty}</if>)</li><li>NOT_EMPTY: insert into table_a(<if test="columnProperty != null and columnProperty!=''">column</if>) values (<if test="columnProperty != null and columnProperty!=''">#{columnProperty}</if>) NOT_EMPTY 如果针对的是非 CharSequence 类型的字段则效果等于 NOT_NULL</li><li>DEFAULT：默认的,一般只用于注解里，1. 在全局里代表 NOT_NULL 2. 在注解里代表 跟随全局</li><li>NEVER：不加入 SQL</li></ul></blockquote><p>默认情况下，会根据全局配置生效，全局配置默认为<code>NOT_NULL</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> not_null <span class="token comment"># 默认就是 not_null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在不加注解情况下，我们跑一下测试方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 测试</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"自增"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入</span>  userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: INSERT INTO user ( name, age, email ) VALUES ( ?, ?, ? )==&gt; Parameters: 自增(String), 22(Integer), 22@qq.com(String)&lt;==    Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于我们的全局插入策略是：<code>insert-strategy: not_null</code>，<code>sex</code>字段值为<code>null</code>，所以插入时就忽略了。</p><p>那我修改一下全局策略看看结果：</p><p>情况一：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> IGNORED <span class="token comment"># 默认就是 not_null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 虽然报错了（由于有些字段设置了not null）,但是sql已经打印出来了：</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>                  age<span class="token punctuation">,</span>                  email<span class="token punctuation">,</span>                  sex<span class="token punctuation">,</span>                  is_delete<span class="token punctuation">,</span>                  create_time<span class="token punctuation">,</span>                  update_time<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span>?<span class="token punctuation">,</span>        ?<span class="token punctuation">,</span>        ?<span class="token punctuation">,</span>        ?<span class="token punctuation">,</span>        ?<span class="token punctuation">,</span>        ?<span class="token punctuation">,</span>        ?<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况二：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> NOT_EMPTY <span class="token comment"># 默认就是 not_null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"自增"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置为字符串</span>  user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入</span>  userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">-- 结果 同样忽略了 sex 字段==&gt;  Preparing: INSERT INTO user ( name, age, email ) VALUES ( ?, ?, ? )==&gt; Parameters: 自增(String), 22(Integer), 22@qq.com(String)&lt;==    Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>情况三：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> NEVER <span class="token comment"># 根本不会这么设置，做一下演示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"自增"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置为字符串</span>  user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入</span>  userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">-- 结果 直接报错### Error updating database.  Cause: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO USER    VALUES[*]"; expected "ROW, (, DEFAULT, NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:INSERT INTO user    VALUES [42001-200]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>到此我们先恢复，全局的默认配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> not_null <span class="token comment"># 默认就是 not_null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后测试一下<code>@TableFiled</code>的<code>insertStrategy</code>属性（该配置比全局配置优先级高）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"自增"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入</span>  userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果,<code>sex</code>在<code>sql</code>中：</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: INSERT INTO user ( name, age, email, sex ) VALUES ( ?, ?, ?, ? )==&gt; Parameters: 自增(String), 22(Integer), 22@qq.com(String), (String)&lt;==    Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置<code>@TableField(insertStrategy = FieldStrategy.NOT_EMPTY)</code>,如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>insertStrategy <span class="token operator">=</span> <span class="token class-name">FieldStrategy</span><span class="token punctuation">.</span>NOT_EMPTY<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"自增"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入</span>  userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果，<code>sex</code>不在<code>sql</code>中了:</p><pre class="line-numbers language-none"><code class="language-none">==&gt;  Preparing: INSERT INTO user ( name, age, email ) VALUES ( ?, ?, ? )==&gt; Parameters: 自增(String), 22(Integer), 22@qq.com(String)&lt;==    Updates: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="4-updateStrategy"><a href="#4-updateStrategy" class="headerlink" title="4. updateStrategy"></a>4. updateStrategy</h5><blockquote><p>字段验证策略之 update,在 update 的时候的字段验证策略,可参考<code>insertStrategy</code>.</p></blockquote><h5 id="5-whereStrategy"><a href="#5-whereStrategy" class="headerlink" title="5. whereStrategy"></a>5. whereStrategy</h5><blockquote><p>表示该字段在拼接where条件时的策略,可参考<code>insertStrategy</code>.</p></blockquote><h5 id="6-fill"><a href="#6-fill" class="headerlink" title="6. fill"></a>6. fill</h5><blockquote><p>字段自动填充策略</p></blockquote><p>通常在开发中，我们每个表中可能都有两个字段表示创建时间和更新时间，如：create_time，update_time。为了避免每次新增或修改的时候给这两个字段赋值，我们可能会采用数据库默认值，对于更新时间，mysql可以采用<code>on update CURRENT_TIMESTAMP</code>实现。说下我们之前使用mysql时，是通过数据库自身功能实现的，sql如下：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210212194602581.png" alt="image-20210212194602581"></p><p>这样在新增，修改表时就可以不关注这两个字段了，但是有一点<code>on update CURRENT_TIMESTAMP</code>并不是所有数据库都支持，我们测试例子中使用的<code>h2</code>就不支持。</p><p>要实现这个效果，我们就可以使用<code>mybatis plus</code>的自动填充功能，下面开始测试：</p><ol><li><p>修改<code>schema-h2.sql</code>去掉<code>create_time</code>和<code>update_time</code>的默认值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id          <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>    name        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age         <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    email       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    sex         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>    is_delete   <span class="token keyword">TINYINT</span>              <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否删除'</span><span class="token punctuation">,</span>    create_time <span class="token keyword">timestamp</span>            <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    update_time <span class="token keyword">timestamp</span>            <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 注意data-h2.sql文件里的初始化sql先注释掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在相关字段上添加注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 数据库设置了 ID自增     */</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 逻辑删除字段     */</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isDelete<span class="token punctuation">;</span>     <span class="token comment">/**     * 创建时间  ====== 插入时填充字段 ======      */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新时间 ====== 插入和更新时填充字段 ======     */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现<code>MetaObjectHandler</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====== start insert fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 严格填充,只针对非主键的字段,只有该表注解了fill 并且 字段名和字段属性 能匹配到才会进行填充(严格模式填充策略,默认有值不覆盖,如果提供的值为null也不填充)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictInsertFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictInsertFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span> <span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====== start update fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 严格填充,只针对非主键的字段,只有该表注解了fill 并且 字段名和字段属性 能匹配到才会进行填充(严格模式填充策略,默认有值不覆盖,如果提供的值为null也不填充)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictUpdateFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span> <span class="token string">"updateTime"</span><span class="token punctuation">,</span>  <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>单元测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"自增"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"22@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入</span>  userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 查询结果</span>  userRepository<span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210212201347787.png" alt="image-20210212201347787"></p></li></ol><p>可以看到已经默认赋值了。</p><h4 id="四-EnumValue"><a href="#四-EnumValue" class="headerlink" title="四. @EnumValue"></a>四. @EnumValue</h4><blockquote><p>后面再单独举例子讲</p></blockquote><h4 id="五-Version"><a href="#五-Version" class="headerlink" title="五. @Version"></a>五. @Version</h4><blockquote><p>乐观锁注解、标记 <code>@Verison</code> 在字段上，后面再单独举例子讲</p></blockquote><h4 id="六-TableLogic"><a href="#六-TableLogic" class="headerlink" title="六. @TableLogic"></a>六. @TableLogic</h4><blockquote><p>表字段逻辑处理注解（逻辑删除），这个我用的较少，都是自己代码处理！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mybatis plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> mybatis plus </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Plus 系列1 —— 起步</title>
      <link href="2021/02/12/mybatis-plus-qi-bu/"/>
      <url>2021/02/12/mybatis-plus-qi-bu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先说明在这里我们不讨论<code>mybatis</code>和<code>jpa</code>孰优孰劣的问题，毕竟这个问题已经争论很多年了，每个人都有自己的喜好和习惯，不做过多评价。在国内，使用<code>mybatis</code>的还是比<code>jpa</code>多，<code>mybatis</code>更加轻量级，上手快！从自己使用体验来讲，使用<code>mybatis</code>，在表上添加字段确实是一个痛点，相当麻烦，要修改实体类，xml等。虽然可以使用一些生成器来自动生成，但是还是有点麻烦。这里我们就体验一下<code>mybatis plus</code>，看看是否能提高我们编码的效率！</p></blockquote><h4 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h4><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis </a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><strong>特点：</strong></p><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h4 id="二-快速开始"><a href="#二-快速开始" class="headerlink" title="二. 快速开始"></a>二. 快速开始</h4><p>这里我使用<code>spring boot</code>来集成<code>mybatis plus</code>，使用<a href="https://start.spring.io/">Spring Initializer</a>或者<code>idea</code>初始化应用。</p><p>目录结构：</p><pre class="line-numbers language-none"><code class="language-none">.├── HELP.md├── build.gradle├── gradle│&nbsp;&nbsp; └── wrapper│&nbsp;&nbsp;     ├── gradle-wrapper.jar│&nbsp;&nbsp;     └── gradle-wrapper.properties├── gradlew├── gradlew.bat├── settings.gradle└── src    ├── main    │&nbsp;&nbsp; ├── generated    │&nbsp;&nbsp; ├── java    │&nbsp;&nbsp; │&nbsp;&nbsp; └── cn    │&nbsp;&nbsp; │&nbsp;&nbsp;     └── justmr    │&nbsp;&nbsp; │&nbsp;&nbsp;         └── mybatisplus    │&nbsp;&nbsp; │&nbsp;&nbsp;             └── demo    │&nbsp;&nbsp; │&nbsp;&nbsp;                 ├── DemoApplication.java    │&nbsp;&nbsp; │&nbsp;&nbsp;                 ├── entity    │&nbsp;&nbsp; │&nbsp;&nbsp;                 │&nbsp;&nbsp; ├── BaseEntity.java    │&nbsp;&nbsp; │&nbsp;&nbsp;                 │&nbsp;&nbsp; └── User.java    │&nbsp;&nbsp; │&nbsp;&nbsp;                 └── mapper    │&nbsp;&nbsp; │&nbsp;&nbsp;                     └── UserMapper.java    │&nbsp;&nbsp; └── resources    │&nbsp;&nbsp;     ├── application.yml    │&nbsp;&nbsp;     ├── db    │&nbsp;&nbsp;     │&nbsp;&nbsp; ├── data-h2.sql    │&nbsp;&nbsp;     │&nbsp;&nbsp; └── schema-h2.sql    │&nbsp;&nbsp;     ├── static    │&nbsp;&nbsp;     └── templates    └── test        └── java            └── cn                └── justmr                    └── mybatisplus                        └── demo                            └── demo                                ├── DemoApplicationTests.java                                └── UserTests.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-build-gradle"><a href="#1-build-gradle" class="headerlink" title="1. build.gradle"></a>1. build.gradle</h5><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">plugins <span class="token punctuation">{</span>    id <span class="token string">'org.springframework.boot'</span> version <span class="token string">'2.3.4.RELEASE'</span>    id <span class="token string">'io.spring.dependency-management'</span> version <span class="token string">'1.0.10.RELEASE'</span>    id <span class="token string">'java'</span><span class="token punctuation">}</span>group <span class="token operator">=</span> <span class="token string">'cn.justmr.mybatis-plus.demo'</span>version <span class="token operator">=</span> <span class="token string">'0.0.1-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token string">'1.8'</span>configurations <span class="token punctuation">{</span>    compileOnly <span class="token punctuation">{</span>        extendsFrom annotationProcessor    <span class="token punctuation">}</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    <span class="token comment">// 为了加快速度，配置阿里镜像仓库</span>    maven <span class="token punctuation">{</span> url <span class="token string gstring">"http://maven.aliyun.com/nexus/content/groups/public"</span> <span class="token punctuation">}</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ext <span class="token punctuation">{</span>    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'mybaitsPlusVersion'</span><span class="token punctuation">,</span> <span class="token string gstring">"3.4.2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    compileOnly <span class="token string">'org.projectlombok:lombok'</span>    testCompileOnly <span class="token string">'org.projectlombok:lombok'</span>    <span class="token comment">// 这里采用内存数据库</span>    runtimeOnly <span class="token string">'com.h2database:h2'</span>    <span class="token comment">// 引入mybatis plus</span>    compile <span class="token string gstring">"com.baomidou:mybatis-plus-boot-starter:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">{</span>mybaitsPlusVersion<span class="token punctuation">}</span></span>"</span>    annotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    testAnnotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    <span class="token function">testImplementation</span><span class="token punctuation">(</span><span class="token string">'org.springframework.boot:spring-boot-starter-test'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        exclude group<span class="token punctuation">:</span> <span class="token string">'org.junit.vintage'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'junit-vintage-engine'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-application-yml"><a href="#2-application-yml" class="headerlink" title="2. application.yml"></a>2. application.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.h2.Driver    <span class="token comment"># 启动应用后会自动执行该sql</span>    <span class="token key atrule">schema</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/schema<span class="token punctuation">-</span>h2.sql    <span class="token comment"># 启动应用后会自动执行该sql</span>    <span class="token key atrule">data</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/data<span class="token punctuation">-</span>h2.sql    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>test    <span class="token key atrule">username</span><span class="token punctuation">:</span> test    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>  <span class="token key atrule">h2</span><span class="token punctuation">:</span>    <span class="token key atrule">console</span><span class="token punctuation">:</span>      <span class="token comment"># 开启h2控制台</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 这里根据需要配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>  <span class="token comment"># 打印日志</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl    <span class="token comment"># 开启自动驼峰命名规则（camel case）映射,默认就是true</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment"># 插入策略 忽略 null</span>      <span class="token key atrule">insert-strategy</span><span class="token punctuation">:</span> not_null      <span class="token comment"># 更新策略 忽略 null</span>      <span class="token key atrule">update-strategy</span><span class="token punctuation">:</span> not_null  <span class="token comment"># 处理枚举    </span>  <span class="token key atrule">type-enums-package</span><span class="token punctuation">:</span> cn.<span class="token important">**.enums</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-初始化表和数据"><a href="#3-初始化表和数据" class="headerlink" title="3. 初始化表和数据"></a>3. 初始化表和数据</h5><p><strong>schema-h2.sql</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id          <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>    name        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    age         <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>    email       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    sex         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>    is_delete   <span class="token keyword">TINYINT</span>              <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否删除'</span><span class="token punctuation">,</span>    create_time <span class="token keyword">timestamp</span>            <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    update_time <span class="token keyword">timestamp</span>            <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>data-h2.sql</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">,</span> <span class="token string">'MAIL'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">,</span> <span class="token string">'MAIL'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">,</span> <span class="token string">'MAIL'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">,</span> <span class="token string">'FEMALE'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">,</span> <span class="token string">'FEMALE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-编码"><a href="#4-编码" class="headerlink" title="4. 编码"></a>4. 编码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>justmr<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"cn.justmr.mybatisplus.demo.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>justmr<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>justmr<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Select</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 数据库设置了 ID自增     */</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 逻辑删除字段     */</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isDelete<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">UserTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------ selectAll method test ------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询全量数据</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-none"><code class="language-none">...2021-02-12 14:11:57.669  INFO [,,,] 24178 --- [           main] c.j.mybatisplus.demo.demo.UserTests      : ------ selectAll method test ------2021-02-12 14:11:57.736 DEBUG [,,,] 24178 --- [           main] c.j.m.demo.mapper.UserMapper.selectList  : ==&gt;  Preparing: SELECT id,name,age,email,sex,is_delete,create_time,update_time FROM user2021-02-12 14:11:57.770 DEBUG [,,,] 24178 --- [           main] c.j.m.demo.mapper.UserMapper.selectList  : ==&gt; Parameters: 2021-02-12 14:11:57.804 DEBUG [,,,] 24178 --- [           main] c.j.m.demo.mapper.UserMapper.selectList  : &lt;==      Total: 5User(super=BaseEntity(id=1, isDelete=false, createTime=2021-02-12T14:11:54.279, updateTime=2021-02-12T14:11:54.279), name=Jone, age=18, email=test1@baomidou.com, sex=MAIL)User(super=BaseEntity(id=2, isDelete=false, createTime=2021-02-12T14:11:54.279, updateTime=2021-02-12T14:11:54.279), name=Jack, age=20, email=test2@baomidou.com, sex=MAIL)User(super=BaseEntity(id=3, isDelete=false, createTime=2021-02-12T14:11:54.279, updateTime=2021-02-12T14:11:54.279), name=Tom, age=28, email=test3@baomidou.com, sex=MAIL)User(super=BaseEntity(id=4, isDelete=false, createTime=2021-02-12T14:11:54.279, updateTime=2021-02-12T14:11:54.279), name=Sandy, age=21, email=test4@baomidou.com, sex=FEMALE)User(super=BaseEntity(id=5, isDelete=false, createTime=2021-02-12T14:11:54.279, updateTime=2021-02-12T14:11:54.279), name=Billie, age=24, email=test5@baomidou.com, sex=FEMALE)...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h4><p>看到这里，相对于<code>mybatis</code>来说，有改变的是配置项需要根据<code>mybatis-plus</code>的配置来定义，这里我们也没有写对应的SQL语句，只是简单的继承了接口<code>BaseMapper</code>，如下是该接口的结构:</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/BaseMapper.png" alt="BaseMapper"></p><p>我们可以直接使用该接口里面的方法而不需要编写对应的sql！是不是很爽！</p><h4 id="四-参考"><a href="#四-参考" class="headerlink" title="四. 参考"></a>四. 参考</h4><ul><li>[1] <a href="https://mybatis.org/mybatis-3/">mybatis</a></li><li>[2] <a href="https://mp.baomidou.com/">MyBatis-Plus</a></li><li>[3] <a href="https://start.spring.io/">Spring Initializer</a></li><li>[4] <a href="https://h2database.com/html/tutorial.html">h2database</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> mybatis plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> mybatis plus </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收集线程池的metrics信息</title>
      <link href="2021/02/11/shou-ji-xian-cheng-chi-de-metrics-xin-xi/"/>
      <url>2021/02/11/shou-ji-xian-cheng-chi-de-metrics-xin-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>了解线程池的状态，比如，活跃线程数量、缓冲队列的排队情况，对我们来说非常有意义，可以让我们了解应用的状态，对是否需要调整线程池参数提供了有力的依据。</p></blockquote><p>由于我们公司的微服务已经开始使用metrics来收集应用运行指标，结合<code>prometheus</code>和<code>grafana</code>来统一收集和可视化。所以我就想通过这一套体系来收集线程池运行时的相关信息，并通过<code>grafana</code>展示出来，如图所示，部署在两台服务器上的某个线程池数据展示：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210211155758983.png" alt="image-20210211155758983"></p><p>下面我们就开始在应该中做相关的数据采集。</p><h4 id="1-build-gradle"><a href="#1-build-gradle" class="headerlink" title="1. build.gradle"></a>1. build.gradle</h4><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">plugins <span class="token punctuation">{</span>    id <span class="token string">'org.springframework.boot'</span> version <span class="token string">'2.4.1'</span>    id <span class="token string">'io.spring.dependency-management'</span> version <span class="token string">'1.0.10.RELEASE'</span>    id <span class="token string">'java'</span><span class="token punctuation">}</span>group <span class="token operator">=</span> <span class="token string">'com.example'</span>version <span class="token operator">=</span> <span class="token string">'0.0.1-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token string">'1.8'</span>configurations <span class="token punctuation">{</span>    compileOnly <span class="token punctuation">{</span>        extendsFrom annotationProcessor    <span class="token punctuation">}</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    maven <span class="token punctuation">{</span> url <span class="token string">'https://repo.spring.io/milestone'</span> <span class="token punctuation">}</span>    maven <span class="token punctuation">{</span> url <span class="token string gstring">"http://maven.aliyun.com/nexus/content/groups/public/"</span> <span class="token punctuation">}</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ext <span class="token punctuation">{</span>    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'springCloudVersion'</span><span class="token punctuation">,</span> <span class="token string gstring">"2020.0.0-M6"</span><span class="token punctuation">)</span>    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'mybatisPlusVersion'</span><span class="token punctuation">,</span> <span class="token string gstring">"3.4.0"</span><span class="token punctuation">)</span>    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'beetlVersion'</span><span class="token punctuation">,</span> <span class="token string gstring">"3.3.0.RELEASE"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-validation'</span>    implementation <span class="token string">'org.springframework.cloud:spring-cloud-starter-sleuth'</span>    compileOnly <span class="token string">'org.projectlombok:lombok'</span>    testCompileOnly <span class="token string">'org.projectlombok:lombok'</span>    annotationProcessor <span class="token string">'org.springframework.boot:spring-boot-configuration-processor'</span>    annotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    testAnnotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    testImplementation <span class="token string">'org.springframework.boot:spring-boot-starter-test'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-actuator'</span>    runtimeOnly <span class="token string">'io.micrometer:micrometer-registry-prometheus'</span><span class="token punctuation">}</span>dependencyManagement <span class="token punctuation">{</span>    imports <span class="token punctuation">{</span>        mavenBom <span class="token string gstring">"org.springframework.cloud:spring-cloud-dependencies:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">{</span>springCloudVersion<span class="token punctuation">}</span></span>"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-application-yml"><a href="#2-application-yml" class="headerlink" title="2. application.yml"></a>2. application.yml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">shutdown</span><span class="token punctuation">:</span> graceful<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> demo  <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>    <span class="token key atrule">timeout-per-shutdown-phase</span><span class="token punctuation">:</span> 30s  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>    <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8<span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">base-path</span><span class="token punctuation">:</span> /actuator      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-线程池配置"><a href="#3-线程池配置" class="headerlink" title="3. 线程池配置"></a>3. 线程池配置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutorConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SERVICE_EXECUTOR <span class="token operator">=</span> <span class="token string">"serviceExecutor"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BossExecutorProperties</span> executorProperties<span class="token punctuation">;</span>       <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>SERVICE_EXECUTOR<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolTaskExecutor</span> <span class="token function">serviceExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>executorProperties<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span>executorProperties<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span>executorProperties<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueueCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> executorProperties<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKeepAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"executor-service-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 线程池对拒绝任务的处理策略：这里采用了CallerRunsPolicy策略，当线程池没有处理能力的时候，该策略会直接在 execute 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务</span>        executor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setWaitForTasksToCompleteOnShutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setAwaitTerminationSeconds</span><span class="token punctuation">(</span>executorProperties<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAwaitTerminationSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Validated</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"boss.config.executor"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BossCuiShouExecutorProperties</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Valid</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token keyword">private</span> <span class="token class-name">ExecutorProperties</span> async<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Valid</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token keyword">private</span> <span class="token class-name">ExecutorProperties</span> service<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExecutorProperties</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@NotNull</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> corePoolSize<span class="token punctuation">;</span>        <span class="token annotation punctuation">@NotNull</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> maxPoolSize<span class="token punctuation">;</span>        <span class="token annotation punctuation">@NotNull</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> queueCapacity<span class="token punctuation">;</span>        <span class="token annotation punctuation">@NotNull</span>        <span class="token keyword">private</span> <span class="token class-name">Duration</span> keepAlive<span class="token punctuation">;</span>        <span class="token annotation punctuation">@NotNull</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> awaitTerminationSeconds <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-收集线程池运行数据"><a href="#4-收集线程池运行数据" class="headerlink" title="4. 收集线程池运行数据"></a>4. 收集线程池运行数据</h4><blockquote><p>这里我们使用<code>micrometer</code>来收集数据.</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 关建的收集metrics信息的代码就在这 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricsSupport</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MeterRegistry</span> meterRegistry<span class="token punctuation">;</span>       <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>SERVICE_EXECUTOR<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">ThreadPoolTaskExecutor</span> serviceExecutor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">initServiceExecutorMetrics</span><span class="token punctuation">(</span>serviceExecutor<span class="token punctuation">,</span> <span class="token string">"executor.service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 线程池metrics指标监控     * @param serviceExecutor 线程池     * @param namePrefix 指标名称前缀     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initServiceExecutorMetrics</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolTaskExecutor</span> serviceExecutor<span class="token punctuation">,</span> <span class="token class-name">String</span> namePrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Gauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>namePrefix <span class="token operator">+</span> <span class="token string">".active"</span><span class="token punctuation">,</span> serviceExecutor<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token operator">::</span><span class="token function">getActiveCount</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>meterRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Gauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>namePrefix <span class="token operator">+</span> <span class="token string">".core"</span><span class="token punctuation">,</span> serviceExecutor<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token operator">::</span><span class="token function">getCorePoolSize</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>meterRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Gauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>namePrefix <span class="token operator">+</span> <span class="token string">".max"</span><span class="token punctuation">,</span> serviceExecutor<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token operator">::</span><span class="token function">getMaxPoolSize</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>meterRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Gauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>namePrefix <span class="token operator">+</span> <span class="token string">".pool"</span><span class="token punctuation">,</span> serviceExecutor<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token operator">::</span><span class="token function">getPoolSize</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>meterRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Gauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>namePrefix <span class="token operator">+</span> <span class="token string">".queue"</span><span class="token punctuation">,</span> serviceExecutor<span class="token punctuation">,</span> executor <span class="token operator">-&gt;</span> executor<span class="token punctuation">.</span><span class="token function">getThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>meterRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Gauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>namePrefix <span class="token operator">+</span> <span class="token string">".task"</span><span class="token punctuation">,</span> serviceExecutor<span class="token punctuation">,</span> executor <span class="token operator">-&gt;</span> executor<span class="token punctuation">.</span><span class="token function">getThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>meterRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Gauge</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>namePrefix <span class="token operator">+</span> <span class="token string">".complete"</span><span class="token punctuation">,</span> serviceExecutor<span class="token punctuation">,</span> executor <span class="token operator">-&gt;</span> executor<span class="token punctuation">.</span><span class="token function">getThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCompletedTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>meterRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要的工作其实就是第4步，做好之后启动应用就可以通过端口<code>/actuator/prometheus</code>看到对应的<code>metrics</code>信息！最后还需要在<code>grafana</code>上配置相应的图形展示。</p>]]></content>
      
      
      
        <tags>
            
            <tag> metrics </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot + spring cache + redis 缓存使用方式</title>
      <link href="2021/02/10/spring-boot-spring-cache-redis-huan-cun-shi-yong-fang-shi/"/>
      <url>2021/02/10/spring-boot-spring-cache-redis-huan-cun-shi-yong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="spring-boot-spring-cache-redis-缓存使用方式"><a href="#spring-boot-spring-cache-redis-缓存使用方式" class="headerlink" title="spring boot + spring cache + redis 缓存使用方式"></a>spring boot + spring cache + redis 缓存使用方式</h3><blockquote><p> 对于缓存的使用，我们并不陌生。这里我们不讨论缓存击穿，缓存穿透和雪崩等问题。主要是讲怎么将spring boot + spring cache + redis优雅的结合起来。</p></blockquote><h4 id="一-spring-cache"><a href="#一-spring-cache" class="headerlink" title="一. spring cache"></a>一. spring cache</h4><p>对于缓存，可以使用的框架太多，如<code>reids</code>,<code>caffeine</code>,<code>ehcache</code>等等，各有各自的优势。如果我们要想使用缓存，就得与这些框架耦合，为了避免这种情况，<code>spring cache</code>就利用<code>AOP</code>，实现基于注解的缓存功能，并进行合理的抽象，使业务代码不用担心底层使用了什么缓存框架。</p><h4 id="二-编码"><a href="#二-编码" class="headerlink" title="二. 编码"></a>二. 编码</h4><h5 id="1-gradle配置"><a href="#1-gradle配置" class="headerlink" title="1. gradle配置"></a>1. gradle配置</h5><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">plugins <span class="token punctuation">{</span>    id <span class="token string">'org.springframework.boot'</span> version <span class="token string">'2.4.1'</span>    id <span class="token string">'io.spring.dependency-management'</span> version <span class="token string">'1.0.10.RELEASE'</span>    id <span class="token string">'java'</span><span class="token punctuation">}</span>group <span class="token operator">=</span> <span class="token string">'com.example'</span>version <span class="token operator">=</span> <span class="token string">'0.0.1-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token string">'1.8'</span>configurations <span class="token punctuation">{</span>    compileOnly <span class="token punctuation">{</span>        extendsFrom annotationProcessor    <span class="token punctuation">}</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    maven <span class="token punctuation">{</span> url <span class="token string">'https://repo.spring.io/milestone'</span> <span class="token punctuation">}</span>    maven <span class="token punctuation">{</span> url <span class="token string gstring">"http://maven.aliyun.com/nexus/content/groups/public/"</span> <span class="token punctuation">}</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ext <span class="token punctuation">{</span>    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'springCloudVersion'</span><span class="token punctuation">,</span> <span class="token string gstring">"2020.0.0-M6"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-validation'</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-actuator'</span>    implementation <span class="token string">'org.springframework.cloud:spring-cloud-starter-sleuth'</span>    compileOnly <span class="token string">'org.projectlombok:lombok'</span>    testCompileOnly <span class="token string">'org.projectlombok:lombok'</span>    annotationProcessor <span class="token string">'org.springframework.boot:spring-boot-configuration-processor'</span>    annotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    testAnnotationProcessor <span class="token string">'org.projectlombok:lombok'</span>    testImplementation <span class="token string">'org.springframework.boot:spring-boot-starter-test'</span>     <span class="token comment">// spring cache starter</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-cache'</span>    <span class="token comment">// redis starter</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-data-redis'</span><span class="token punctuation">}</span>dependencyManagement <span class="token punctuation">{</span>    imports <span class="token punctuation">{</span>        mavenBom <span class="token string gstring">"org.springframework.cloud:spring-cloud-dependencies:<span class="token expression"><span class="token punctuation">$</span><span class="token punctuation">{</span>springCloudVersion<span class="token punctuation">}</span></span>"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>test <span class="token punctuation">{</span>    <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-application-yml"><a href="#2-application-yml" class="headerlink" title="2. application.yml"></a>2. application.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">shutdown</span><span class="token punctuation">:</span> graceful<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> demo  <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>    <span class="token key atrule">timeout-per-shutdown-phase</span><span class="token punctuation">:</span> 30s  <span class="token comment"># 缓存设置</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis    <span class="token key atrule">redis</span><span class="token punctuation">:</span>      <span class="token key atrule">time-to-live</span><span class="token punctuation">:</span> 1d  <span class="token comment"># redis 配置</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token important">*******</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-程序入口"><a href="#3-程序入口" class="headerlink" title="3. 程序入口"></a>3. 程序入口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo20201212Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Demo20201212Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-redis配置"><a href="#4-redis配置" class="headerlink" title="4. redis配置"></a>4. redis配置</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo20201212<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonTypeInfo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">SerializationFeature</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>jsontype<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">LaissezFaireSubTypeValidator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>module<span class="token punctuation">.</span></span><span class="token class-name">SimpleModule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>datatype<span class="token punctuation">.</span>jdk8<span class="token punctuation">.</span></span><span class="token class-name">Jdk8Module</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>datatype<span class="token punctuation">.</span>jsr310<span class="token punctuation">.</span></span><span class="token class-name">JavaTimeModule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>module<span class="token punctuation">.</span>paramnames<span class="token punctuation">.</span></span><span class="token class-name">ParameterNamesModule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CacheProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">EnableConfigurationProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableCaching</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ResourceLoader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializationContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCacheConfig</span> <span class="token punctuation">{</span>  <span class="token comment">// 缓存名称</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DECODE_PREFIX <span class="token operator">=</span> <span class="token string">"demo:test1"</span><span class="token punctuation">;</span>    <span class="token comment">// 这里是为了对不同的缓存进行不同的过期时间配置，如果有需求对不同的数据应用不同的缓存时间，可以在这边增加一个对应的枚举</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@AllArgsConstructor</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CacheNameEnum</span> <span class="token punctuation">{</span>        <span class="token function">DECODE_PREFIX_CACHE</span><span class="token punctuation">(</span>DECODE_PREFIX<span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Duration</span> timeToLive<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 覆盖默认的redis缓存管理器，目的是为了自定义缓存过期时间</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">,</span> <span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">,</span> <span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 设置jackson配置 </span>        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token class-name">SerializationFeature</span><span class="token punctuation">.</span>WRITE_DATES_AS_TIMESTAMPS<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">registerModules</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JavaTimeModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ParameterNamesModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Jdk8Module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">activateDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">LaissezFaireSubTypeValidator</span><span class="token punctuation">.</span>instance<span class="token punctuation">,</span> <span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">,</span> <span class="token class-name">JsonTypeInfo<span class="token punctuation">.</span>As</span><span class="token punctuation">.</span>WRAPPER_ARRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisCacheManager<span class="token punctuation">.</span>RedisCacheManagerBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span><span class="token function">determineConfiguration</span><span class="token punctuation">(</span>cacheProperties<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> om<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cacheNames <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getCacheNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheNames<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">initialCacheNames</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>cacheNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 自定义过期时间</span>        <span class="token function">customize</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> cacheProperties<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> om<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">RedisCacheManager<span class="token punctuation">.</span>RedisCacheManagerBuilder</span> builder<span class="token punctuation">,</span> <span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">,</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">&gt;</span></span> cacheConfigMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CacheNameEnum</span> value <span class="token operator">:</span> <span class="token class-name">CacheNameEnum</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cacheConfigMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">determineConfiguration</span><span class="token punctuation">(</span>cacheProperties<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> objectMapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>timeToLive<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        builder<span class="token punctuation">.</span><span class="token function">withInitialCacheConfigurations</span><span class="token punctuation">(</span>cacheConfigMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">RedisCacheConfiguration</span> <span class="token function">determineConfiguration</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">,</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CacheProperties<span class="token punctuation">.</span>Redis</span> redisProperties <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用这种jackson的序列化会导致反序列化到对应实体失败，出现类型转换异常</span>        <span class="token comment">//        config = config.serializeValuesWith(</span><span class="token comment">//                RedisSerializationContext.SerializationPair.fromSerializer(new Jackson2JsonRedisSerializer&lt;&gt;(Object.class)));</span>        <span class="token comment">// 可以使用jdk自带的序列化方式，这种就是在redis查看时，看不到具体的缓存信息</span><span class="token comment">//        config = config.serializeValuesWith(</span><span class="token comment">//                RedisSerializationContext.SerializationPair.fromSerializer(new JdkSerializationRedisSerializer(classLoader)));</span>        config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>                <span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isCacheNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">CacheTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CommonCacheService</span> commonCacheService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameAndValue</span><span class="token punctuation">&gt;</span></span> sex <span class="token operator">=</span> commonCacheService<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"first === {}"</span><span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameAndValue</span><span class="token punctuation">&gt;</span></span> sex1 <span class="token operator">=</span> commonCacheService<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"second === {}"</span><span class="token punctuation">,</span> sex1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameAndValue</span><span class="token punctuation">&gt;</span></span> sex2 <span class="token operator">=</span> commonCacheService<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"third === {}"</span><span class="token punctuation">,</span> sex2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonCacheService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 这里利用注解来进行缓存，没有涉及到业务代码的书写，也无需关系底层的缓存实现是什么     * 可以看到这个缓存的配置的过期时间室30分钟     */</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token class-name">RedisCacheConfig</span><span class="token punctuation">.</span>DECODE_PREFIX<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameAndValue</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"====== 获取性别字典 ======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NameAndValue</span> nameAndValue1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NameAndValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameAndValue1<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameAndValue1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameAndValue1<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NameAndValue</span> nameAndValue2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NameAndValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameAndValue2<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameAndValue2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameAndValue</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nameAndValue1<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nameAndValue2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">...2021-02-10 22:55:09.045  INFO [demo,,] 40666 --- [           main] c.e.d.service.CommonCacheService         : ====== 获取性别字典 ======2021-02-10 22:55:09.153  INFO [demo,,] 40666 --- [           main] com.example.demo20201212.CacheTests      : first === [NameAndValue(value=1, name=男, createTime=2021-02-10T22:55:09.045), NameAndValue(value=2, name=女, createTime=null)]2021-02-10 22:55:09.256  INFO [demo,,] 40666 --- [           main] com.example.demo20201212.CacheTests      : second === [NameAndValue(value=1, name=男, createTime=2021-02-10T22:55:09.045), NameAndValue(value=2, name=女, createTime=null)]2021-02-10 22:55:09.300  INFO [demo,,] 40666 --- [           main] com.example.demo20201212.CacheTests      : third === [NameAndValue(value=1, name=男, createTime=2021-02-10T22:55:09.045), NameAndValue(value=2, name=女, createTime=null)]...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到”====== 获取性别字典 ======”日志只打印了一次，第一次走了<code>getSex()</code>内部逻辑，剩下两次没有，可见剩下两次走了缓存。我们也可以看看这次缓存的过期时间：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/image-20210210225905768.png" alt="image-20210210225905768"></p><p>可见缓存时间也是生效了的。</p><h4 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h4><p>利用<code>spring cache</code>来使用缓存，可以使我们避免与某种缓存框架硬耦合，避免编写固定的模板代码，使代码更专注于业务实现。</p>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> cache </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc源码分析6——HandlerMethodReturnValueHandler</title>
      <link href="2020/02/28/springmvc-yuan-ma-fen-xi-6-handlermethodreturnvaluehandler/"/>
      <url>2020/02/28/springmvc-yuan-ma-fen-xi-6-handlermethodreturnvaluehandler/</url>
      
        <content type="html"><![CDATA[<p>回到<a href="/2020/02/26/springmvc-yuan-ma-fen-xi-5.1-handlermethodargumentresolver/" title="SpringMvc源码分析5.1——HandlerMethodArgumentResolver">SpringMvc源码分析5.1——HandlerMethodArgumentResolver</a>的源码分析<code>ServletInvocableHandlerMethod#invokeAndHandle(..)</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invokeAndHandle</span><span class="token punctuation">(</span><span class="token class-name">ServletWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span>      <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>   <span class="token comment">// 重点，从请求上下文中解析出参数值，然后调用方法</span>   <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token function">invokeForRequest</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置响应状态</span>   <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>returnValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequestNotModified</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">getResponseStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> mavContainer<span class="token punctuation">.</span><span class="token function">isRequestHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">disableContentCachingIfNecessary</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>         mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token function">getResponseStatusReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"No return value handlers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// 重点关注，调用匹配的HandlerMethodReturnValueHandler</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers<span class="token punctuation">.</span><span class="token function">handleReturnValue</span><span class="token punctuation">(</span>            returnValue<span class="token punctuation">,</span> <span class="token function">getReturnValueType</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token function">formatErrorForReturnValue</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于参数解析的那一块我们前面已经分析过，所以我们接着分析<code>handleReturnValue(..)</code>返回值处理这一块。</p><h3 id="一-源码分析"><a href="#一-源码分析" class="headerlink" title="一. 源码分析"></a>一. 源码分析</h3><blockquote><p> 追踪一下 <code>this.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest)</code>方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleReturnValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span><span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span> <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 遍历找到支持的HandlerMethodReturnValueHandler</span><span class="token class-name">HandlerMethodReturnValueHandler</span> handler <span class="token operator">=</span> <span class="token function">selectHandler</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unknown return value type: "</span> <span class="token operator">+</span> returnType<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    handler<span class="token punctuation">.</span><span class="token function">handleReturnValue</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历已经注册的<code>HandlerMethodReturnValueHandler</code>，找到匹配的并执行它的<code>handleReturnValue(..)</code>。</p><p>首先我们看一下已经注册的<code>HandlerMethodReturnValueHandler</code>：</p><p><img src="returnValueHandlers.jpg" alt="returnValueHandlers"></p><p>然后看一下<code>HandlerMethodReturnValueHandler</code>的接口定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerMethodReturnValueHandler</span> <span class="token punctuation">{</span>   <span class="token comment">/**    * Whether the given {@linkplain MethodParameter method return type} is    * supported by this handler.    * @param returnType the method return type to check    * @return {@code true} if this handler supports the supplied return type;    * {@code false} otherwise    */</span>   <span class="token keyword">boolean</span> <span class="token function">supportsReturnType</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/**    * Handle the given return value by adding attributes to the model and    * setting a view or setting the    * {@link ModelAndViewContainer#setRequestHandled} flag to {@code true}    * to indicate the response has been handled directly.    * @param returnValue the value returned from the handler method    * @param returnType the type of the return value. This type must have    * previously been passed to {@link #supportsReturnType} which must    * have returned {@code true}.    * @param mavContainer the ModelAndViewContainer for the current request    * @param webRequest the current request    * @throws Exception if the return value handling results in an error    */</span>   <span class="token keyword">void</span> <span class="token function">handleReturnValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span>         <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span> <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>策略接口，用于处理从<code>handler</code>方法调用返回的值。</p></blockquote><p>接口的实现：</p><p><img src="HandlerMethodReturnValueHandler.jpg" alt="HandlerMethodReturnValueHandler"></p><p>这些策略实现，使的程序方便的处理各种返回值，比如<code>String</code>，<code>ModelAndView</code>，<code>Map</code>,<code>HttpEntity</code>，<code>@RequestBody</code>注解等等。那我<code>SpringMvc</code>支持那些返回值呢,看一下<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-arguments">官方文档</a>:</p><table><thead><tr><th align="left">Controller method return value</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>@ResponseBody</code></td><td align="left">The return value is converted through <code>HttpMessageConverter</code> implementations and written to the response. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-responsebody"><code>@ResponseBody</code></a>.</td></tr><tr><td align="left"><code>HttpEntity</code>, <code>ResponseEntity</code></td><td align="left">The return value that specifies the full response (including HTTP headers and body) is to be converted through <code>HttpMessageConverter</code> implementations and written to the response. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-responseentity">ResponseEntity</a>.</td></tr><tr><td align="left"><code>HttpHeaders</code></td><td align="left">For returning a response with headers and no body.</td></tr><tr><td align="left"><code>String</code></td><td align="left">A view name to be resolved with <code>ViewResolver</code> implementations and used together with the implicit model — determined through command objects and <code>@ModelAttribute</code> methods. The handler method can also programmatically enrich the model by declaring a <code>Model</code> argument (see <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestmapping-registration">Explicit Registrations</a>).</td></tr><tr><td align="left"><code>View</code></td><td align="left">A <code>View</code> instance to use for rendering together with the implicit model — determined through command objects and <code>@ModelAttribute</code> methods. The handler method can also programmatically enrich the model by declaring a <code>Model</code> argument (see <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestmapping-registration">Explicit Registrations</a>).</td></tr><tr><td align="left"><code>java.util.Map</code>, <code>org.springframework.ui.Model</code></td><td align="left">Attributes to be added to the implicit model, with the view name implicitly determined through a <code>RequestToViewNameTranslator</code>.</td></tr><tr><td align="left"><code>@ModelAttribute</code></td><td align="left">An attribute to be added to the model, with the view name implicitly determined through a <code>RequestToViewNameTranslator</code>.Note that <code>@ModelAttribute</code> is optional. See “Any other return value” at the end of this table.</td></tr><tr><td align="left"><code>ModelAndView</code> object</td><td align="left">The view and model attributes to use and, optionally, a response status.</td></tr><tr><td align="left"><code>void</code></td><td align="left">A method with a <code>void</code> return type (or <code>null</code> return value) is considered to have fully handled the response if it also has a <code>ServletResponse</code>, an <code>OutputStream</code> argument, or an <code>@ResponseStatus</code> annotation. The same is also true if the controller has made a positive <code>ETag</code> or <code>lastModified</code> timestamp check (see <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-caching-etag-lastmodified">Controllers</a> for details).If none of the above is true, a <code>void</code> return type can also indicate “no response body” for REST controllers or a default view name selection for HTML controllers.</td></tr><tr><td align="left"><code>DeferredResult</code></td><td align="left">Produce any of the preceding return values asynchronously from any thread — for example, as a result of some event or callback. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async">Asynchronous Requests</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-deferredresult"><code>DeferredResult</code></a>.</td></tr><tr><td align="left"><code>Callable</code></td><td align="left">Produce any of the above return values asynchronously in a Spring MVC-managed thread. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async">Asynchronous Requests</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-callable"><code>Callable</code></a>.</td></tr><tr><td align="left"><code>ListenableFuture</code>, <code>java.util.concurrent.CompletionStage</code>, <code>java.util.concurrent.CompletableFuture</code></td><td align="left">Alternative to <code>DeferredResult</code>, as a convenience (for example, when an underlying service returns one of those).</td></tr><tr><td align="left"><code>ResponseBodyEmitter</code>, <code>SseEmitter</code></td><td align="left">Emit a stream of objects asynchronously to be written to the response with <code>HttpMessageConverter</code> implementations. Also supported as the body of a <code>ResponseEntity</code>. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async">Asynchronous Requests</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-http-streaming">HTTP Streaming</a>.</td></tr><tr><td align="left"><code>StreamingResponseBody</code></td><td align="left">Write to the response <code>OutputStream</code> asynchronously. Also supported as the body of a <code>ResponseEntity</code>. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async">Asynchronous Requests</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-http-streaming">HTTP Streaming</a>.</td></tr><tr><td align="left">Reactive types — Reactor, RxJava, or others through <code>ReactiveAdapterRegistry</code></td><td align="left">Alternative to <code>DeferredResult</code> with multi-value streams (for example, <code>Flux</code>, <code>Observable</code>) collected to a <code>List</code>.For streaming scenarios (for example, <code>text/event-stream</code>, <code>application/json+stream</code>), <code>SseEmitter</code> and <code>ResponseBodyEmitter</code> are used instead, where <code>ServletOutputStream</code> blocking I/O is performed on a Spring MVC-managed thread and back pressure is applied against the completion of each write.See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async">Asynchronous Requests</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-reactive-types">Reactive Types</a>.</td></tr><tr><td align="left">Any other return value</td><td align="left">Any return value that does not match any of the earlier values in this table and that is a <code>String</code> or <code>void</code> is treated as a view name (default view name selection through <code>RequestToViewNameTranslator</code> applies), provided it is not a simple type, as determined by <a href="https://docs.spring.io/spring-framework/docs/5.2.4.RELEASE/javadoc-api/org/springframework/beans/BeanUtils.html#isSimpleProperty-java.lang.Class-">BeanUtils#isSimpleProperty</a>. Values that are simple types remain unresolved.</td></tr></tbody></table><p>官方文档列的也比较详细，但是有一点还是有必要说明一下，就是当使用<code>@ResponseBody</code>，<code>HttpEntity</code>, <code>ResponseEntity</code>时候，我们可以利用<code>ResponseBodyAdvice</code>在<code>HttpMessageConverter#write(..)</code>前做一些小处理，源码位置在<code>AbstractMessageConverterMethodProcessor#writeWithMessageConverters(T, org.springframework.core.MethodParameter, org.springframework.http.server.ServletServerHttpRequest, org.springframework.http.server.ServletServerHttpResponse)</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> converter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">GenericHttpMessageConverter</span> genericConverter <span class="token operator">=</span> <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">GenericHttpMessageConverter</span> <span class="token operator">?</span>                                                    <span class="token punctuation">(</span><span class="token class-name">GenericHttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> converter <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">GenericHttpMessageConverter</span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> valueType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">)</span> <span class="token operator">:</span>        converter<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span>valueType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 利用ResponseBodyAdvice做一些提前处理</span>      body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span>                                         <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> converter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> theBody <span class="token operator">=</span> body<span class="token punctuation">;</span>        <span class="token class-name">LogFormatUtils</span><span class="token punctuation">.</span><span class="token function">traceDebug</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> traceOn <span class="token operator">-&gt;</span>                                  <span class="token string">"Writing ["</span> <span class="token operator">+</span> <span class="token class-name">LogFormatUtils</span><span class="token punctuation">.</span><span class="token function">formatValue</span><span class="token punctuation">(</span>theBody<span class="token punctuation">,</span> <span class="token operator">!</span>traceOn<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addContentDispositionHeader</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          genericConverter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Nothing to write: null body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义<code>ResponseBodyAdvice</code>的方式，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseBodyAdviceExample</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// todo</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">String</span> body<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> selectedContentType<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> selectedConverterType<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// todo</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以在返回值处理之前实现自己的处理逻辑。</p><h3 id="二-总结"><a href="#二-总结" class="headerlink" title="二. 总结"></a>二. 总结</h3><ol><li><code>springMvc</code>会使用<code>returnValueHandlers</code>来处理<code>handler</code>的调用的返回值；</li><li><code>springMvc</code>支持的<code>controller</code>方法返回值有哪些；</li><li><code>ResponseBodyAdvice</code>的作用，以及如何自定义<code>ResponseBodyAdvice</code>;</li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringMvc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc源码分析5.2——HandlerMethodArgumentResolver</title>
      <link href="2020/02/27/springmvc-yuan-ma-fen-xi-5-2-handlermethodargumentresolver/"/>
      <url>2020/02/27/springmvc-yuan-ma-fen-xi-5-2-handlermethodargumentresolver/</url>
      
        <content type="html"><![CDATA[<blockquote><p>接着上一篇，我们来探究一下<code>RequestResponseBodyMethodProcessor</code>。</p></blockquote><h3 id="一-类实现图"><a href="#一-类实现图" class="headerlink" title="一. 类实现图"></a>一. 类实现图</h3><p><img src="AbstractMessageConverterMethodArgumentResolver.png" alt="AbstractMessageConverterMethodArgumentResolver"></p><p>回顾一下<code>HandlerMethodArgumentResolver</code>的两个方法：</p><pre class="line-numbers language-none"><code class="language-none">public interface HandlerMethodArgumentResolver {   boolean supportsParameter(MethodParameter parameter);      Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,         NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-源码分析"><a href="#二-源码分析" class="headerlink" title="二. 源码分析"></a>二. 源码分析</h3><p>我们首先从抽象类<code>AbstractMessageConverterMethodArgumentResolver</code>看起，</p><h4 id="1-AbstractMessageConverterMethodArgumentResolver"><a href="#1-AbstractMessageConverterMethodArgumentResolver" class="headerlink" title="1. AbstractMessageConverterMethodArgumentResolver"></a>1. AbstractMessageConverterMethodArgumentResolver</h4><blockquote><p>通过使用<code>HttpMessageConverter</code>从请求的主体读取内容来解析方法参数值的基类</p></blockquote><p>该抽象类里面包含了一些属性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 支持的http方法</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMethod</span><span class="token punctuation">&gt;</span></span> SUPPORTED_METHODS <span class="token operator">=</span><span class="token class-name">EnumSet</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>PATCH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 消息转换器(重要)</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> messageConverters<span class="token punctuation">;</span><span class="token comment">// 支持的MediaType</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">&gt;</span></span> allSupportedMediaTypes<span class="token punctuation">;</span><span class="token comment">// 这个的作用是在GenericHttpMessageConverter.read前后做一些自定义处理</span><span class="token comment">// 我们可以实现RequestBodyAdvice或者ResponseBodyAdvice并标注@ControllerAdvice，从而自定义一些处理</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RequestResponseBodyAdviceChain</span> advice<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该抽象类定义一些供子类使用的方法。如<code>readWithMessageConverters(..)</code>从<code>HttpInputMessage</code>中读取并创建期待的参数值，还有<code>validateIfApplicable(..)</code>参数值的校验等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Object</span> <span class="token function">readWithMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">HttpInputMessage</span> inputMessage<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span>      <span class="token class-name">Type</span> targetType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMediaTypeNotSupportedException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotReadableException</span> <span class="token punctuation">{</span>   <span class="token class-name">MediaType</span> contentType<span class="token punctuation">;</span>   <span class="token keyword">boolean</span> noContentType <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      contentType <span class="token operator">=</span> inputMessage<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidMediaTypeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMediaTypeNotSupportedException</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      noContentType <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      contentType <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_OCTET_STREAM<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> contextClass <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getContainingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>targetType <span class="token keyword">instanceof</span> <span class="token class-name">Class</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> targetType <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">ResolvableType</span> resolvableType <span class="token operator">=</span> <span class="token class-name">ResolvableType</span><span class="token punctuation">.</span><span class="token function">forMethodParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>      targetClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> resolvableType<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token class-name">HttpMethod</span> httpMethod <span class="token operator">=</span> <span class="token punctuation">(</span>inputMessage <span class="token keyword">instanceof</span> <span class="token class-name">HttpRequest</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span><span class="token punctuation">)</span> inputMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Object</span> body <span class="token operator">=</span> NO_VALUE<span class="token punctuation">;</span>   <span class="token class-name">EmptyBodyCheckingHttpInputMessage</span> message<span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmptyBodyCheckingHttpInputMessage</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> converter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converterType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> converter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">GenericHttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> genericConverter <span class="token operator">=</span>               <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">GenericHttpMessageConverter</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">GenericHttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> converter <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> genericConverter<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> contextClass<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span> <span class="token operator">:</span>               <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> converter<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">hasBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token class-name">HttpInputMessage</span> msgToUse <span class="token operator">=</span>                     <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beforeBodyRead</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>               body <span class="token operator">=</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> genericConverter<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> contextClass<span class="token punctuation">,</span> msgToUse<span class="token punctuation">)</span> <span class="token operator">:</span>                     <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> msgToUse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterBodyRead</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> msgToUse<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>               body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleEmptyBody</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMessageNotReadableException</span><span class="token punctuation">(</span><span class="token string">"I/O error while reading input message"</span><span class="token punctuation">,</span> ex<span class="token punctuation">,</span> inputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">==</span> NO_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>httpMethod <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>SUPPORTED_METHODS<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>httpMethod<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token punctuation">(</span>noContentType <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>message<span class="token punctuation">.</span><span class="token function">hasBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMediaTypeNotSupportedException</span><span class="token punctuation">(</span>contentType<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allSupportedMediaTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token class-name">MediaType</span> selectedContentType <span class="token operator">=</span> contentType<span class="token punctuation">;</span>   <span class="token class-name">Object</span> theBody <span class="token operator">=</span> body<span class="token punctuation">;</span>   <span class="token class-name">LogFormatUtils</span><span class="token punctuation">.</span><span class="token function">traceDebug</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> traceOn <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> formatted <span class="token operator">=</span> <span class="token class-name">LogFormatUtils</span><span class="token punctuation">.</span><span class="token function">formatValue</span><span class="token punctuation">(</span>theBody<span class="token punctuation">,</span> <span class="token operator">!</span>traceOn<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"Read \""</span> <span class="token operator">+</span> selectedContentType <span class="token operator">+</span> <span class="token string">"\" to ["</span> <span class="token operator">+</span> formatted <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> body<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">validateIfApplicable</span><span class="token punctuation">(</span><span class="token class-name">WebDataBinder</span> binder<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> ann <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Validated</span> validatedAnn <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>ann<span class="token punctuation">,</span> <span class="token class-name">Validated</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>validatedAnn <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> ann<span class="token punctuation">.</span><span class="token function">annotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Valid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> hints <span class="token operator">=</span> <span class="token punctuation">(</span>validatedAnn <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> validatedAnn<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>ann<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> validationHints <span class="token operator">=</span> <span class="token punctuation">(</span>hints <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> hints <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>hints<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>binder<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>validationHints<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-RequestPartMethodArgumentResolver"><a href="#2-RequestPartMethodArgumentResolver" class="headerlink" title="2. RequestPartMethodArgumentResolver"></a>2. RequestPartMethodArgumentResolver</h4><blockquote><p>该参数解析器支持<code>@RequestPart</code>,处理文件的上传。可以与<code>@RequestParam</code>处理上传做一个对比。这两个注解处理文件上传用的不是一个参数解析器。</p></blockquote><h4 id="3-AbstractMessageConverterMethodProcessor"><a href="#3-AbstractMessageConverterMethodProcessor" class="headerlink" title="3. AbstractMessageConverterMethodProcessor"></a>3. AbstractMessageConverterMethodProcessor</h4><blockquote><p>拓展了<code>AbstractMessageConverterMethodArgumentResolver</code>使其能够使用<code>HttpMessageConverters</code>处理方法的返回。多实现了一个<code>HandlerMethodReturnValueHandler</code>接口。</p></blockquote><p>这个类里面主要封装了一些对<code>handler</code>返回值的写出，返回值的处理我们暂不说明。</p><h4 id="4-RequestResponseBodyMethodProcessor"><a href="#4-RequestResponseBodyMethodProcessor" class="headerlink" title="4. RequestResponseBodyMethodProcessor"></a>4. RequestResponseBodyMethodProcessor</h4><blockquote><p>支持<code>@RequestBody</code>参数的处理，参数的解析核心还是调用<code>RequestResponseBodyMethodProcessor#readWithMessageConverters(..)</code></p></blockquote><h4 id="5-HttpEntityMethodProcessor"><a href="#5-HttpEntityMethodProcessor" class="headerlink" title="5. HttpEntityMethodProcessor"></a>5. HttpEntityMethodProcessor</h4><blockquote><p>支持<code>HttpEntity</code>或者<code>RequestEntity</code>参数的处理，参数的解析核心还是调用<code>RequestResponseBodyMethodProcessor#readWithMessageConverters(..)</code></p></blockquote><p>整个下来，发现，核心还是在<code>RequestResponseBodyMethodProcessor#readWithMessageConverters(..)</code>。</p><p>那我们直接看一下该方法<code>readWithMessageConverters(..)</code>关键的解析<code>body</code>的一段:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> converter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converterType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> converter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GenericHttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> genericConverter <span class="token operator">=</span>              <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">GenericHttpMessageConverter</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">GenericHttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> converter <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> genericConverter<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> contextClass<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span> <span class="token operator">:</span>              <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> converter<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">hasBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// RequestBodyAdvice前置处理</span>              <span class="token class-name">HttpInputMessage</span> msgToUse <span class="token operator">=</span>                    <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beforeBodyRead</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 消息转换</span>              body <span class="token operator">=</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> genericConverter<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> contextClass<span class="token punctuation">,</span> msgToUse<span class="token punctuation">)</span> <span class="token operator">:</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> msgToUse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//  RequestBodyAdvice后置处理</span>             body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterBodyRead</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> msgToUse<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">else</span> <span class="token punctuation">{</span>              body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleEmptyBody</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面涉及到了<code>HttpMessageConverter</code>和<code>RequestResponseBodyAdviceChain</code>这两个主要类。找到匹配的<code>HttpMessageConverter</code>读取<code>HttpInputMessage</code>。在之前我们其实debug看到过<code>spring</code>容器里面这些实例的值。咱们再次debug查看一下吧，先写一个能被该参数解析器处理的接口(这不是必须的)：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>curl    </code>命令请求：</p><pre class="line-numbers language-none"><code class="language-none">curl -H "Content-Type:application/json" -X POST --data '{"username":"jack"}' http://localhost:8080/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到这两个关键对象的值。</p><p><img src="Xnip2020-02-27_16-13-35.jpg" alt="Xnip2020-02-27_16-13-35"></p><p>我们继续debug，可以发现处理我们<code>/test</code>请求的<code>HttpMessageConverter</code>为<code>MappingJackson2HttpMessageConverter</code>，是利用<code>jackson</code>来将我们的<code>json</code>串转为<code>User    </code>对象的。</p><p>在这里这个<code>advice</code>类并没有起到作用，因为没有找到匹配的<code>RequestBodyAdvice</code>。截图里面的<code>JsonViewRequestBodyAdvice</code>需要参数上带有<code>@JsonView</code>注解才能处理。</p><blockquote><p><code>@JsonView</code>是<code>jackson</code>提供的一个注解，作用是可以按需过滤对象属性，可以参考<a href="/2019/05/05/jackson-annotations-er/" title="Jackson Annotations(二)">Jackson Annotations(二)</a>。其实我们可以参考<code>JsonViewRequestBodyAdvice</code>来实现一些功能，比如：某个参数乃至整个请求体的加解密，使我们避免重复的样板代码。</p></blockquote><p>如果我们想要在消息转换前后实现自己的<code>advice</code>逻辑，我们可以在<code>springboot</code>如下实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 标注注解 2. 继承RequestBodyAdviceAdapter或者RequestBodyAdvice</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestBodyAdviceExample</span> <span class="token keyword">extends</span> <span class="token class-name">RequestBodyAdviceAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span> <span class="token class-name">Type</span> targetType<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// todo</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">// override其他方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，再次debug查看，可以看到我们自定义的<code>advice</code>已经注入。</p><p><img src="Xnip2020-02-27_17-12-34.jpg" alt="Xnip2020-02-27_17-12-34"></p><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h3><ol><li>主要讲解了一下<code>AbstractMessageConverterMethodArgumentResolver</code>类型的参数解析器,从请求体里面获取消息并转换；</li><li><code>AbstractMessageConverterMethodArgumentResolver</code>会利用<code>HttpMessageConverter</code>去转换<code>http</code>消息体里面的消息；</li><li><code>RequestBodyAdvice</code>的作用，以及怎么实现自己的<code>RequestBodyAdvice</code>逻辑；</li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringMvc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc源码分析5.1——HandlerMethodArgumentResolver</title>
      <link href="2020/02/26/springmvc-yuan-ma-fen-xi-5.1-handlermethodargumentresolver/"/>
      <url>2020/02/26/springmvc-yuan-ma-fen-xi-5.1-handlermethodargumentresolver/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 上一节<a href="#">Post not found: SpringMvc源码分析4.2——HandlerAdapter SpringMvc源码分析4.2——HandlerAdapter</a>，我们留下了几个问题。这里就先来分析一下遗留的第一个问题——<code>handler</code>参数的解析过程。</p></blockquote><h3 id="一-追踪源码"><a href="#一-追踪源码" class="headerlink" title="一. 追踪源码"></a>一. 追踪源码</h3><p>上一节，我们定位到了<code>ServletInvocableHandlerMethod#invokeAndHandle</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invokeAndHandle</span><span class="token punctuation">(</span><span class="token class-name">ServletWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span>      <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>   <span class="token comment">// 重点，从请求上下文中解析出参数值，然后调用方法</span>   <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token function">invokeForRequest</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置响应状态</span>   <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>returnValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequestNotModified</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">getResponseStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> mavContainer<span class="token punctuation">.</span><span class="token function">isRequestHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">disableContentCachingIfNecessary</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>         mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token function">getResponseStatusReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"No return value handlers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// 重点关注，调用匹配的HandlerMethodReturnValueHandler</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers<span class="token punctuation">.</span><span class="token function">handleReturnValue</span><span class="token punctuation">(</span>            returnValue<span class="token punctuation">,</span> <span class="token function">getReturnValueType</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token function">formatErrorForReturnValue</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们就看一下<code>invokeForRequest(webRequest, mavContainer, providedArgs)</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invokeForRequest</span><span class="token punctuation">(</span><span class="token class-name">NativeWebRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token comment">// 解析参数</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token function">getMethodArgumentValues</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Arguments: "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">doInvoke</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法主要就是解析参数，然后调用。</p><p>主要看下<code>Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs)</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMethodArgumentValues</span><span class="token punctuation">(</span><span class="token class-name">NativeWebRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">MethodParameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> <span class="token function">getMethodParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> EMPTY_ARGS<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>parameters<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">MethodParameter</span> parameter <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 设置参数名称解析器，主要用于获取变量参数名称</span>parameter<span class="token punctuation">.</span><span class="token function">initParameterNameDiscovery</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parameterNameDiscoverer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 从提供的providedArgs获取参数值</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findProvidedArgument</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolvers<span class="token punctuation">.</span><span class="token function">supportsParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token function">formatArgumentError</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> <span class="token string">"No suitable resolver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 利用resolvers解析参数，重点关注</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resolvers<span class="token punctuation">.</span><span class="token function">resolveArgument</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataBinderFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Leave stack trace for later, exception may actually be resolved and handled...</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> exMsg <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>exMsg <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exMsg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">getExecutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toGenericString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token function">formatArgumentError</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> exMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> args<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考上面代码上的注释。主要我们关注<code>this.resolvers.resolveArgument(..)</code>.而<code>resolvers</code>是从<code>RequestMappingHandlerAdapter</code>设置过来的。</p><p><img src="resolvers.jpg" alt="resolvers"></p><p>然后从这些<code>argumentResolvers</code>找到匹配的<code>HandlerMethodArgumentResolver</code>,然后执行它的<code>resolveArgument(..)</code>获得参数值。：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span><span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">WebDataBinderFactory</span> binderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">HandlerMethodArgumentResolver</span> resolver <span class="token operator">=</span> <span class="token function">getArgumentResolver</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>resolver <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unsupported parameter type ["</span> <span class="token operator">+</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]."</span> <span class="token operator">+</span><span class="token string">" supportsParameter should be called first."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> resolver<span class="token punctuation">.</span><span class="token function">resolveArgument</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">,</span> binderFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这我们可以看到参数的解析会依赖<code>HandlerMethodArgumentResolver</code>。所以接下来我们就主要看一下<code>HandlerMethodArgumentResolver</code>。</p><h3 id="二-HandlerMethodArgumentResolver"><a href="#二-HandlerMethodArgumentResolver" class="headerlink" title="二. HandlerMethodArgumentResolver"></a>二. HandlerMethodArgumentResolver</h3><blockquote><p>该接口是一个从请求上下文解析方法参数的策略接口</p></blockquote><h4 id="1-接口规范"><a href="#1-接口规范" class="headerlink" title="1. 接口规范"></a>1. 接口规范</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerMethodArgumentResolver</span> <span class="token punctuation">{</span><span class="token comment">/** * Whether the given {@linkplain MethodParameter method parameter} is * supported by this resolver. * @param parameter the method parameter to check * @return {@code true} if this resolver supports the supplied parameter; * {@code false} otherwise */</span>  <span class="token comment">// 是否支持给某个方法参数的解析</span><span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * Resolves a method parameter into an argument value from a given request. * A {@link ModelAndViewContainer} provides access to the model for the * request. A {@link WebDataBinderFactory} provides a way to create * a {@link WebDataBinder} instance when needed for data binding and * type conversion purposes. * @param parameter the method parameter to resolve. This parameter must * have previously been passed to {@link #supportsParameter} which must * have returned {@code true}. * @param mavContainer the ModelAndViewContainer for the current request * @param webRequest the current request * @param binderFactory a factory for creating {@link WebDataBinder} instances * @return the resolved argument value, or {@code null} if not resolvable * @throws Exception in case of errors with the preparation of argument values */</span><span class="token annotation punctuation">@Nullable</span>  <span class="token comment">// 从给定的请求解析参数值</span><span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span><span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">WebDataBinderFactory</span> binderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-接口实现"><a href="#2-接口实现" class="headerlink" title="2. 接口实现"></a>2. 接口实现</h4><p><img src="HandlerMethodArgumentResolver.png" alt="HandlerMethodArgumentResolver"></p><p>可以看到的实现的类非常多。我们测试的接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello: "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匹配到的则是<code>RequestParamMethodArgumentResolver</code>.</p><p>那我们来看一下<code>RequestParamMethodArgumentResolver#supportsParameter</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">nestedIfOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNestedParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">RequestParam</span> requestParam <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>requestParam <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestPart</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      parameter <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">nestedIfOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MultipartResolutionDelegate</span><span class="token punctuation">.</span><span class="token function">isMultipartArgument</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>useDefaultResolution<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">isSimpleProperty</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">getNestedParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>RequestParamMethodArgumentResolver</code>支持:</p><ol><li><code>@RequestParam</code>标注的参数的处理，</li><li>没有标注<code>@RequestParam</code>的简单类型，如<code>int, long,String</code>等;</li><li><code>结合MultipartResolver</code>，也支持<code>@RequestParam MultipartFile file</code></li><li>结合<code>Servlet 3.0 multipart requests</code>，也支持<code>javax.servlet.http.Part</code>  </li></ol><p><code>HandlerMethodArgumentResolver</code>的实现类非常多。我们一定使用过<code>@RequestParam</code>,<code>PathVariable</code>,<code>@Value</code>,<code>@RequestHeader</code>,<code>@CookieValue</code>,<code>SessionAttribute</code>,<code>RequestAttribute</code>等等。而这些的解析起都是<code>AbstractNamedValueMethodArgumentResolver</code>的子类。我们先来看一下类的实现继承关系图，然后再分析源码：</p><p><img src="AbstractNamedValueMethodArgumentResolver.png" alt="AbstractNamedValueMethodArgumentResolver"></p><h4 id="3-AbstractNamedValueMethodArgumentResolver"><a href="#3-AbstractNamedValueMethodArgumentResolver" class="headerlink" title="3. AbstractNamedValueMethodArgumentResolver"></a>3. AbstractNamedValueMethodArgumentResolver</h4><blockquote><p>这是一个从命名值中解析方法参数的基类。比如从请求参数，请求头路径变量中获取。每种方式都有一个名称，是否必须的标识以及一个默认值。</p><p>子类需要做的事情：</p><ul><li>获取方法参数的命名值信息</li><li>将名称解析为参数值</li><li>在需要参数值时处理缺少的参数值</li><li>（可选）处理解析值</li></ul><p>需要注意的一点就是默认String值支持<code>${...}</code>和<code>EL</code>表达式，但是这歌功能的支持需要<code>ConfigurableBeanFactory</code>的支持。</p></blockquote><p>看一下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractNamedValueMethodArgumentResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerMethodArgumentResolver</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Nullable</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConfigurableBeanFactory</span> configurableBeanFactory<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Nullable</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BeanExpressionContext</span> expressionContext<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodParameter</span><span class="token punctuation">,</span> <span class="token class-name">NamedValueInfo</span><span class="token punctuation">&gt;</span></span> namedValueInfoCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token annotation punctuation">@Nullable</span>   <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span>         <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">WebDataBinderFactory</span> binderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>     <span class="token comment">// 这一步获取参数名称相关信息</span>      <span class="token class-name">NamedValueInfo</span> namedValueInfo <span class="token operator">=</span> <span class="token function">getNamedValueInfo</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//对于Optional的处理</span>      <span class="token class-name">MethodParameter</span> nestedParameter <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">nestedIfOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 解析${...}，EL表达式，获取解析后的nama值</span>      <span class="token class-name">Object</span> resolvedName <span class="token operator">=</span> <span class="token function">resolveStringValue</span><span class="token punctuation">(</span>namedValueInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>               <span class="token string">"Specified name must not resolve to null: ["</span> <span class="token operator">+</span> namedValueInfo<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token comment">// 获取参数值，模版方法，具体的实现交给子类</span>      <span class="token class-name">Object</span> arg <span class="token operator">=</span> <span class="token function">resolveName</span><span class="token punctuation">(</span>resolvedName<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nestedParameter<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>namedValueInfo<span class="token punctuation">.</span>defaultValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// 设置了默认值</span>            arg <span class="token operator">=</span> <span class="token function">resolveStringValue</span><span class="token punctuation">(</span>namedValueInfo<span class="token punctuation">.</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>namedValueInfo<span class="token punctuation">.</span>required <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>nestedParameter<span class="token punctuation">.</span><span class="token function">isOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 处理没有值的情况，默认抛出异常，子类可以Override</span>            <span class="token function">handleMissingValue</span><span class="token punctuation">(</span>namedValueInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> nestedParameter<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         arg <span class="token operator">=</span> <span class="token function">handleNullValue</span><span class="token punctuation">(</span>namedValueInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> nestedParameter<span class="token punctuation">.</span><span class="token function">getNestedParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> namedValueInfo<span class="token punctuation">.</span>defaultValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         arg <span class="token operator">=</span> <span class="token function">resolveStringValue</span><span class="token punctuation">(</span>namedValueInfo<span class="token punctuation">.</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// 数据绑定</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>binderFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">WebDataBinder</span> binder <span class="token operator">=</span> binderFactory<span class="token punctuation">.</span><span class="token function">createBinder</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> namedValueInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 是否需要进行参数类型的转换</span>            arg <span class="token operator">=</span> binder<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ConversionNotSupportedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MethodArgumentConversionNotSupportedException</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getRequiredType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  namedValueInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TypeMismatchException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MethodArgumentTypeMismatchException</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getRequiredType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  namedValueInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>           <span class="token comment">// protected的方法，交给子类去复写（并不是必须的）</span>      <span class="token function">handleResolvedValue</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> namedValueInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> arg<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">/**    * Obtain the named value for the given method parameter.    */</span>   <span class="token keyword">private</span> <span class="token class-name">NamedValueInfo</span> <span class="token function">getNamedValueInfo</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">NamedValueInfo</span> namedValueInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>namedValueInfoCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>namedValueInfo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 抽象方法，交给子类实现</span>         namedValueInfo <span class="token operator">=</span> <span class="token function">createNamedValueInfo</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>         namedValueInfo <span class="token operator">=</span> <span class="token function">updateNamedValueInfo</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> namedValueInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>namedValueInfoCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> namedValueInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> namedValueInfo<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">/**    * Represents the information about a named value, including name, whether it's required and a default value.    */</span>   <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NamedValueInfo</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> required<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Nullable</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">NamedValueInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> required<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>required <span class="token operator">=</span> required<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>defaultValue <span class="token operator">=</span> defaultValue<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用模版设计模式，该抽象类中定义了解析参数的主要逻辑，子类只需要实现对应的抽象模版方法即可。<br>这里面规定了如下流程:</p><ol><li>基于<code>MethodParameter</code>构建<code>NameValueInfo</code>，主要是要解析方法参数上标注的注解</li><li>解析<code>${}</code>占位符以及<code>SpEL</code>得到解析后的<code>name</code></li><li> <code>Object arg = resolveName(resolvedName.toString(), nestedParameter, webRequest)</code>，解析参数值(具体由子类去实现)</li><li>处理没有解析出参数值的一些情况</li><li>通过<code>WebDataBinder</code>将<code>arg</code>转换成<code>Methodparameter.getParameterType()</code>类型。</li></ol><p>所以子类的话，需要做的就是：</p><ol><li><p>实现<code>public boolean supportsParameter(MethodParameter parameter)</code></p></li><li><p>实现<code>protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter);</code></p></li><li><p>实现<code>protected abstract Object resolveName(String name, MethodParameter parameter, NativeWebRequest request) throws Exception</code></p></li><li><p>其他非必须的，比如<code>handleMissingValue(..)</code>,<code>handleResolvedValue(..)</code></p></li></ol><p>那么我们来看一下一些具体的子类实现：</p><h5 id="1-RequestParamMethodArgumentResolver"><a href="#1-RequestParamMethodArgumentResolver" class="headerlink" title="1. RequestParamMethodArgumentResolver"></a>1. RequestParamMethodArgumentResolver</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">nestedIfOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNestedParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">RequestParam</span> requestParam <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>requestParam <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestPart</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>parameter <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">nestedIfOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MultipartResolutionDelegate</span><span class="token punctuation">.</span><span class="token function">isMultipartArgument</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>useDefaultResolution<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">isSimpleProperty</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">getNestedParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>支持的方法参数的判断，比如@RequestParam，Optional,简单类型的解析。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">NamedValueInfo</span> <span class="token function">createNamedValueInfo</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">RequestParam</span> ann <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RequestParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>ann <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">RequestParamNamedValueInfo</span><span class="token punctuation">(</span>ann<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RequestParamNamedValueInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其实就是获取<code>@RequestParam</code>注解里面的信息</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">resolveName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token class-name">NativeWebRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">HttpServletRequest</span> servletRequest <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getNativeRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>servletRequest <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> mpArg <span class="token operator">=</span> <span class="token class-name">MultipartResolutionDelegate</span><span class="token punctuation">.</span><span class="token function">resolveMultipartArgument</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> servletRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mpArg <span class="token operator">!=</span> <span class="token class-name">MultipartResolutionDelegate</span><span class="token punctuation">.</span>UNRESOLVABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> mpArg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Object</span> arg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">MultipartRequest</span> multipartRequest <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getNativeRequest</span><span class="token punctuation">(</span><span class="token class-name">MultipartRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>multipartRequest <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MultipartFile</span><span class="token punctuation">&gt;</span></span> files <span class="token operator">=</span> multipartRequest<span class="token punctuation">.</span><span class="token function">getFiles</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>files<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arg <span class="token operator">=</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> files<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> files<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramValues <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>paramValues <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arg <span class="token operator">=</span> <span class="token punctuation">(</span>paramValues<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> paramValues<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> paramValues<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>利用request.getParameterValues(name)获取值，也支持Multipart请求(如：文件上传)的解析。</p></blockquote><p>这里举一个<code>${..}</code>和<code>el</code>表达式的示例吧：</p><p>在配置文件<code>application.yml</code>里面添加配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">app</span><span class="token punctuation">:</span>  <span class="token key atrule">arg0</span><span class="token punctuation">:</span> name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后添加一个接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"${app.arg0}"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> a<span class="token punctuation">,</span>                <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"#{12 * 2}"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"a: {}, b: {}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们就是要演示通过占位符获取<code>name</code>的值，和得到默认的<code>age</code>，请求：</p><pre class="line-numbers language-none"><code class="language-none">curl http://localhost:8080/namedValue/test10?name=jack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印结果：</p><pre class="line-numbers language-none"><code class="language-none">2020-02-26 21:51:32.396  INFO 84285 --- [nio-8080-exec-1] c.j.s.c.ArgumentsResolveController       : a: jack, b: 24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-PathVariableMethodArgumentResolver"><a href="#2-PathVariableMethodArgumentResolver" class="headerlink" title="2. PathVariableMethodArgumentResolver"></a>2. PathVariableMethodArgumentResolver</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PathVariable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">nestedIfOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNestedParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">PathVariable</span> pathVariable <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PathVariable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>pathVariable <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>pathVariable<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>支持@PathVariable的解析</p></blockquote><h5 id="3-ExpressionValueMethodArgumentResolver"><a href="#3-ExpressionValueMethodArgumentResolver" class="headerlink" title="3. ExpressionValueMethodArgumentResolver"></a>3. ExpressionValueMethodArgumentResolver</h5><blockquote><p>这个比较简单，支持<code>@Value</code>的解析，<code>resolveName(..)</code>直接返回<code>null</code>，主要是利用默认值来解析<code>@Value</code>里<code>value</code>值。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 支持@Value参数</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 直接返回null</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">resolveName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token comment">// No name to resolve</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">NamedValueInfo</span> <span class="token function">createNamedValueInfo</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Value</span> ann <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>ann <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"No Value annotation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExpressionValueNamedValueInfo</span><span class="token punctuation">(</span>ann<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionValueNamedValueInfo</span> <span class="token keyword">extends</span> <span class="token class-name">NamedValueInfo</span> <span class="token punctuation">{</span><span class="token comment">// 将注解的value值赋值给defaultValue，利用defaultValue的解析得到参数值</span>  <span class="token keyword">private</span> <span class="token class-name">ExpressionValueNamedValueInfo</span><span class="token punctuation">(</span><span class="token class-name">Value</span> annotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"@Value"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下一些就不去一一记录了，原理差不多，也比简单。</p><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h3><p>总结一下到这主要分析得到了些什么:</p><ol><li>代码定位到了参数解析这一步，并debug看到了默认的<code>resolvers</code>，可以看到其中默认的顺序;</li><li>了解<code>HandlerMethodArgumentResolver</code>的作用以及它的实现结构图；</li><li>分析了<code>AbstractNamedValueMethodArgumentResolver</code>的作用，了解了它一些子类的的实现。</li></ol><p>在controller方法里到底支持那些参数类型呢？直接拿<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-arguments">官方文档</a>看一下：</p><table><thead><tr><th align="left">Controller method argument</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>WebRequest</code>, <code>NativeWebRequest</code></td><td align="left">Generic access to request parameters and request and session attributes, without direct use of the Servlet API.</td></tr><tr><td align="left"><code>javax.servlet.ServletRequest</code>, <code>javax.servlet.ServletResponse</code></td><td align="left">Choose any specific request or response type — for example, <code>ServletRequest</code>, <code>HttpServletRequest</code>, or Spring’s <code>MultipartRequest</code>, <code>MultipartHttpServletRequest</code>.</td></tr><tr><td align="left"><code>javax.servlet.http.HttpSession</code></td><td align="left">Enforces the presence of a session. As a consequence, such an argument is never <code>null</code>. Note that session access is not thread-safe. Consider setting the <code>RequestMappingHandlerAdapter</code> instance’s <code>synchronizeOnSession</code> flag to <code>true</code> if multiple requests are allowed to concurrently access a session.</td></tr><tr><td align="left"><code>javax.servlet.http.PushBuilder</code></td><td align="left">Servlet 4.0 push builder API for programmatic HTTP/2 resource pushes. Note that, per the Servlet specification, the injected <code>PushBuilder</code> instance can be null if the client does not support that HTTP/2 feature.</td></tr><tr><td align="left"><code>java.security.Principal</code></td><td align="left">Currently authenticated user — possibly a specific <code>Principal</code> implementation class if known.</td></tr><tr><td align="left"><code>HttpMethod</code></td><td align="left">The HTTP method of the request.</td></tr><tr><td align="left"><code>java.util.Locale</code></td><td align="left">The current request locale, determined by the most specific <code>LocaleResolver</code> available (in effect, the configured <code>LocaleResolver</code> or <code>LocaleContextResolver</code>).</td></tr><tr><td align="left"><code>java.util.TimeZone</code> + <code>java.time.ZoneId</code></td><td align="left">The time zone associated with the current request, as determined by a <code>LocaleContextResolver</code>.</td></tr><tr><td align="left"><code>java.io.InputStream</code>, <code>java.io.Reader</code></td><td align="left">For access to the raw request body as exposed by the Servlet API.</td></tr><tr><td align="left"><code>java.io.OutputStream</code>, <code>java.io.Writer</code></td><td align="left">For access to the raw response body as exposed by the Servlet API.</td></tr><tr><td align="left"><code>@PathVariable</code></td><td align="left">For access to URI template variables. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestmapping-uri-templates">URI patterns</a>.</td></tr><tr><td align="left"><code>@MatrixVariable</code></td><td align="left">For access to name-value pairs in URI path segments. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-matrix-variables">Matrix Variables</a>.</td></tr><tr><td align="left"><code>@RequestParam</code></td><td align="left">For access to the Servlet request parameters, including multipart files. Parameter values are converted to the declared method argument type. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestparam"><code>@RequestParam</code></a> as well as <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-multipart-forms">Multipart</a>.Note that use of <code>@RequestParam</code> is optional for simple parameter values. See “Any other argument”, at the end of this table.</td></tr><tr><td align="left"><code>@RequestHeader</code></td><td align="left">For access to request headers. Header values are converted to the declared method argument type. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestheader"><code>@RequestHeader</code></a>.</td></tr><tr><td align="left"><code>@CookieValue</code></td><td align="left">For access to cookies. Cookies values are converted to the declared method argument type. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-cookievalue"><code>@CookieValue</code></a>.</td></tr><tr><td align="left"><code>@RequestBody</code></td><td align="left">For access to the HTTP request body. Body content is converted to the declared method argument type by using <code>HttpMessageConverter</code> implementations. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestbody"><code>@RequestBody</code></a>.</td></tr><tr><td align="left"><code>HttpEntity</code></td><td align="left">For access to request headers and body. The body is converted with an <code>HttpMessageConverter</code>. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-httpentity">HttpEntity</a>.</td></tr><tr><td align="left"><code>@RequestPart</code></td><td align="left">For access to a part in a <code>multipart/form-data</code> request, converting the part’s body with an <code>HttpMessageConverter</code>. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-multipart-forms">Multipart</a>.</td></tr><tr><td align="left"><code>java.util.Map</code>, <code>org.springframework.ui.Model</code>, <code>org.springframework.ui.ModelMap</code></td><td align="left">For access to the model that is used in HTML controllers and exposed to templates as part of view rendering.</td></tr><tr><td align="left"><code>RedirectAttributes</code></td><td align="left">Specify attributes to use in case of a redirect (that is, to be appended to the query string) and flash attributes to be stored temporarily until the request after redirect. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-redirecting-passing-data">Redirect Attributes</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-flash-attributes">Flash Attributes</a>.</td></tr><tr><td align="left"><code>@ModelAttribute</code></td><td align="left">For access to an existing attribute in the model (instantiated if not present) with data binding and validation applied. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-method-args"><code>@ModelAttribute</code></a> as well as <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-methods">Model</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-initbinder"><code>DataBinder</code></a>.Note that use of <code>@ModelAttribute</code> is optional (for example, to set its attributes). See “Any other argument” at the end of this table.</td></tr><tr><td align="left"><code>Errors</code>, <code>BindingResult</code></td><td align="left">For access to errors from validation and data binding for a command object (that is, a <code>@ModelAttribute</code> argument) or errors from the validation of a <code>@RequestBody</code> or <code>@RequestPart</code> arguments. You must declare an <code>Errors</code>, or <code>BindingResult</code> argument immediately after the validated method argument.</td></tr><tr><td align="left"><code>SessionStatus</code> + class-level <code>@SessionAttributes</code></td><td align="left">For marking form processing complete, which triggers cleanup of session attributes declared through a class-level <code>@SessionAttributes</code> annotation. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-sessionattributes"><code>@SessionAttributes</code></a> for more details.</td></tr><tr><td align="left"><code>UriComponentsBuilder</code></td><td align="left">For preparing a URL relative to the current request’s host, port, scheme, context path, and the literal part of the servlet mapping. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-uri-building">URI Links</a>.</td></tr><tr><td align="left"><code>@SessionAttribute</code></td><td align="left">For access to any session attribute, in contrast to model attributes stored in the session as a result of a class-level <code>@SessionAttributes</code> declaration. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-sessionattribute"><code>@SessionAttribute</code></a> for more details.</td></tr><tr><td align="left"><code>@RequestAttribute</code></td><td align="left">For access to request attributes. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestattrib"><code>@RequestAttribute</code></a> for more details.</td></tr><tr><td align="left">Any other argument</td><td align="left">If a method argument is not matched to any of the earlier values in this table and it is a simple type (as determined by <a href="https://docs.spring.io/spring-framework/docs/5.2.3.RELEASE/javadoc-api/org/springframework/beans/BeanUtils.html#isSimpleProperty-java.lang.Class-">BeanUtils#isSimpleProperty</a>, it is a resolved as a <code>@RequestParam</code>. Otherwise, it is resolved as a <code>@ModelAttribute</code>.</td></tr></tbody></table><p>对于每种支持的类型，我们都可以找到具体的<code>HandlerMethodArgumentResolver</code>，大家可以debug一探究竟。在工作中我使用的比较多的还有<code>@RequestBody</code>,那么也很有必要去分析一下对应的源码。这就涉及到<code>RequestResponseBodyMethodProcessor</code>了，我们下一篇接着分析。</p>]]></content>
      
      
      <categories>
          
          <category> SpringMvc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc源码分析4.2——HandlerAdapter</title>
      <link href="2020/02/25/springmvc-yuan-ma-fen-xi-4-2-handleradapter/"/>
      <url>2020/02/25/springmvc-yuan-ma-fen-xi-4-2-handleradapter/</url>
      
        <content type="html"><![CDATA[<h3 id="一-准备"><a href="#一-准备" class="headerlink" title="一. 准备"></a>一. 准备</h3><p>接着上一篇，我们暴露的接口:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello: "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bebug到<code>DispatcherServlet#doDispatch</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 关注点一</span>mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 关注点二</span><span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3. todo待分析，关注点三</span>mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4. todo待分析，关注点四</span><span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5. todo待分析，关注点五</span>   <span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-分析"><a href="#二-分析" class="headerlink" title="二. 分析"></a>二. 分析</h3><h4 id="1-关注几个属性值"><a href="#1-关注几个属性值" class="headerlink" title="1. 关注几个属性值"></a>1. 关注几个属性值</h4><p>我们先看一下<code>DispatcherServlet</code>内部几个属性此时的值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** List of HandlerMappings used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMapping</span><span class="token punctuation">&gt;</span></span> handlerMappings<span class="token punctuation">;</span><span class="token comment">/** List of HandlerAdapters used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerAdapter</span><span class="token punctuation">&gt;</span></span> handlerAdapters<span class="token punctuation">;</span><span class="token comment">/** List of HandlerExceptionResolvers used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">&gt;</span></span> handlerExceptionResolvers<span class="token punctuation">;</span><span class="token comment">/** RequestToViewNameTranslator used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">RequestToViewNameTranslator</span> viewNameTranslator<span class="token punctuation">;</span><span class="token comment">/** List of ViewResolvers used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ViewResolver</span><span class="token punctuation">&gt;</span></span> viewResolvers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>handlerMappings   <img src="handlerMappings.jpg" alt="handlerMappings"></p></li><li><p>handlerAdapters</p><p><img src="handlerAdapters.jpg"></p></li><li><p>handlerExceptionResolvers  <img src="handlerExceptionResolvers.jpg" alt="handlerExceptionResolvers"></p></li><li><p>viewNameTranslator<img src="viewNameTranslator.jpg" alt="viewNameTranslator"></p></li><li><p>viewResolvers<img src="viewResolvers.jpg" alt="viewResolvers"></p></li></ul><h4 id="2-关注点三源码"><a href="#2-关注点三源码" class="headerlink" title="2. 关注点三源码"></a>2. 关注点三源码</h4><blockquote><p>mv = ha.handle(processedRequest, response, mappedHandler.getHandler())</p></blockquote><p>执行具体的<code>handler</code>并返回<code>ModelAndView</code>对象；从<a href="#">Post not found: SpringMvc源码分析4.1——HandlerAdapter SpringMvc源码分析4.1——HandlerAdapter</a>可以知道，这里的<code>ha</code>为<code>RequestMappingHandlerAdapter</code>。顺序执行链我们最终定位到<code>RequestMappingHandlerAdapter#handleInternal</code>，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">HandlerMethod</span> handlerMethod<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">ModelAndView</span> mav<span class="token punctuation">;</span>  <span class="token comment">// 校验请求的method和是否需要session</span><span class="token function">checkRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Execute invokeHandlerMethod in synchronized block if required.</span>  <span class="token comment">// 这里有一个配置，因为session不是线程安全的，这里可以配置使其同步执行</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>synchronizeOnSession<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> mutex <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getSessionMutex</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// No HttpSession available -&gt; no mutex necessary</span>mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// No synchronization on session demanded at all...</span>      <span class="token comment">// todo待分析</span>mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">// 删减</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> mav<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法里面首先进行了一个校验<code>checkRequest</code>主要是校验请求的<code>method</code>和是否需要<code>session</code>。然后做了一个是否需要在<code>session</code>上的同步判断。该<code>synchronizeOnSession</code>默认值为<code>false</code>的，默认<code>Session</code>是有线程安全问题的，如果这个值设置为<code>true</code>而且有<code>session</code>的话，就会同步执行<code>invokeHandlerMethod()</code>，从而避免<code>session</code>的线程安全问题。接着，再调用<code>mav = invokeHandlerMethod(request, response, handlerMethod);</code>执行<code>handler</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">HandlerMethod</span> handlerMethod<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">ServletWebRequest</span> webRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// 包含了对@InitBinder的处理</span><span class="token class-name">WebDataBinderFactory</span> binderFactory <span class="token operator">=</span> <span class="token function">getDataBinderFactory</span><span class="token punctuation">(</span>handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 包含了对@ModelAttribute的处理</span><span class="token class-name">ModelFactory</span> modelFactory <span class="token operator">=</span> <span class="token function">getModelFactory</span><span class="token punctuation">(</span>handlerMethod<span class="token punctuation">,</span> binderFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 设置参数解析器，参数名解析等</span><span class="token class-name">ServletInvocableHandlerMethod</span> invocableMethod <span class="token operator">=</span> <span class="token function">createInvocableHandlerMethod</span><span class="token punctuation">(</span>handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>invocableMethod<span class="token punctuation">.</span><span class="token function">setHandlerMethodArgumentResolvers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>invocableMethod<span class="token punctuation">.</span><span class="token function">setHandlerMethodReturnValueHandlers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>invocableMethod<span class="token punctuation">.</span><span class="token function">setDataBinderFactory</span><span class="token punctuation">(</span>binderFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>invocableMethod<span class="token punctuation">.</span><span class="token function">setParameterNameDiscoverer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parameterNameDiscoverer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ModelAndViewContainer</span> mavContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndViewContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mavContainer<span class="token punctuation">.</span><span class="token function">addAllAttributes</span><span class="token punctuation">(</span><span class="token class-name">RequestContextUtils</span><span class="token punctuation">.</span><span class="token function">getInputFlashMap</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modelFactory<span class="token punctuation">.</span><span class="token function">initModel</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> invocableMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>mavContainer<span class="token punctuation">.</span><span class="token function">setIgnoreDefaultModelOnRedirect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ignoreDefaultModelOnRedirect<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 删除异步请求的处理代码</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token comment">// 调用方法并通过配置的HandlerMethodReturnValueHandlers之一来处理返回值。重点关注</span>invocableMethod<span class="token punctuation">.</span><span class="token function">invokeAndHandle</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token comment">// ModelAndView</span><span class="token keyword">return</span> <span class="token function">getModelAndView</span><span class="token punctuation">(</span>mavContainer<span class="token punctuation">,</span> modelFactory<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>webRequest<span class="token punctuation">.</span><span class="token function">requestCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这，我们先来看一下<code>RequestMappingHandlerAdapter</code>里面的几个属性此时的值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">// 自定义参数解析器，会后于内置的参数解析器</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">&gt;</span></span> customArgumentResolvers<span class="token punctuation">;</span><span class="token comment">// 参数解析器</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">HandlerMethodArgumentResolverComposite</span> argumentResolvers<span class="token punctuation">;</span> <span class="token comment">// 在{@code @InitBinder}方法中配置支持的参数类型</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">HandlerMethodArgumentResolverComposite</span> initBinderArgumentResolvers<span class="token punctuation">;</span><span class="token comment">// 自定义返回值处理器，会后于内置的返回值处理器</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodReturnValueHandler</span><span class="token punctuation">&gt;</span></span> customReturnValueHandlers<span class="token punctuation">;</span> <span class="token comment">// 返回值处理器</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">HandlerMethodReturnValueHandlerComposite</span> returnValueHandlers<span class="token punctuation">;</span> <span class="token comment">// 消息转换器</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> messageConverters<span class="token punctuation">;</span>  <span class="token comment">// RequestBodyAdvice或者ResponseBodyAdvice</span> <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> requestResponseBodyAdvice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>customArgumentResolvers</li></ul><p>​    此时为空，没有自定义</p><ul><li>argumentResolvers</li></ul><p><img src="argumentResolvers.jpg" alt="argumentResolvers"></p><ul><li>initBinderArgumentResolvers</li></ul><p><img src="initBinderArgumentResolvers.jpg" alt="initBinderArgumentResolvers"></p><ul><li>customReturnValueHandlers</li></ul><p>​    为空，没有自定义</p><ul><li>returnValueHandlers</li></ul><p><img src="returnValueHandlers.jpg" alt="returnValueHandlers"></p><ul><li>messageConverters</li></ul><p><img src="messageConverters.jpg" alt="messageConverters"></p><ul><li>requestResponseBodyAdvice</li></ul><p><img src="requestResponseBodyAdvice.jpg" alt="requestResponseBodyAdvice"></p><p>从源码上看，我们需要重点关注一下<code>invocableMethod.invokeAndHandle(webRequest, mavContainer);</code>,如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invokeAndHandle</span><span class="token punctuation">(</span><span class="token class-name">ServletWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span>      <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>   <span class="token comment">// 重点，从请求上下文中解析出参数值，然后调用方法</span>   <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token function">invokeForRequest</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置响应状态</span>   <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>returnValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRequestNotModified</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">getResponseStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> mavContainer<span class="token punctuation">.</span><span class="token function">isRequestHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">disableContentCachingIfNecessary</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>         mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token function">getResponseStatusReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"No return value handlers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// 重点关注，调用匹配的HandlerMethodReturnValueHandler</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers<span class="token punctuation">.</span><span class="token function">handleReturnValue</span><span class="token punctuation">(</span>            returnValue<span class="token punctuation">,</span> <span class="token function">getReturnValueType</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token function">formatErrorForReturnValue</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法，里面就包括了<code>handler</code>方法参数的解析，方法的处理，返回值的处理等，这需要我们重点分析。分析这一块我们能看到<code>@RequestParam</code>，<code>@RequestBody</code>，<code>@ResponseBody</code>等的处理过程。内容有点多，放到下一节单独分析。</p><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h3><p>到此，我们大概分析了一下<code>ha.handle(processedRequest, response, mappedHandler.getHandler())</code>的执行逻辑。这其中有很多复杂的逻辑，由于我们的测试请求很简单，项目也没有做什么其他的配置，所以很多流程代码执行不到。但是没关系，我们从简单的做起，也能了解得到<code>SpringMvc</code>处理请求一个大概的流程。OK，回顾一下，这一节主要了解到了：</p><ol><li><code>synchronizeOnSession</code>的作用；</li><li>参数值的解析，需要用到<code>argumentResolvers</code>，<strong>todo分析</strong>；</li><li>返回值的主力需要用到<code>returnValueHandlers</code>，<strong>todo分析</strong>；</li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringMvc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc源码分析4.1——HandlerAdapter</title>
      <link href="2020/02/25/springmvc-yuan-ma-fen-xi-4-1-handleradapter/"/>
      <url>2020/02/25/springmvc-yuan-ma-fen-xi-4-1-handleradapter/</url>
      
        <content type="html"><![CDATA[<h3 id="一-准备"><a href="#一-准备" class="headerlink" title="一. 准备"></a>一. 准备</h3><p>接着上一篇，我们暴露的接口:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello: "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bebug到<code>DispatcherServlet#doDispatch</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 关注点一</span>mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. todo待分析，关注点二</span><span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3. todo待分析，关注点三</span>mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4. todo待分析，关注点四</span><span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5. todo待分析，关注点五</span>   <span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-分析"><a href="#二-分析" class="headerlink" title="二. 分析"></a>二. 分析</h3><h4 id="1-关注几个属性值"><a href="#1-关注几个属性值" class="headerlink" title="1. 关注几个属性值"></a>1. 关注几个属性值</h4><p>我们先看一下<code>DispatcherServlet</code>内部几个属性此时的值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** List of HandlerMappings used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMapping</span><span class="token punctuation">&gt;</span></span> handlerMappings<span class="token punctuation">;</span><span class="token comment">/** List of HandlerAdapters used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerAdapter</span><span class="token punctuation">&gt;</span></span> handlerAdapters<span class="token punctuation">;</span><span class="token comment">/** List of HandlerExceptionResolvers used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">&gt;</span></span> handlerExceptionResolvers<span class="token punctuation">;</span><span class="token comment">/** RequestToViewNameTranslator used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">RequestToViewNameTranslator</span> viewNameTranslator<span class="token punctuation">;</span><span class="token comment">/** List of ViewResolvers used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ViewResolver</span><span class="token punctuation">&gt;</span></span> viewResolvers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>handlerMappings   <img src="handlerMappings.jpg" alt="handlerMappings"></p></li><li><p>handlerAdapters</p><p><img src="handlerAdapters.jpg"></p></li><li><p>handlerExceptionResolvers  <img src="handlerExceptionResolvers.jpg" alt="handlerExceptionResolvers"></p></li><li><p>viewNameTranslator<img src="viewNameTranslator.jpg" alt="viewNameTranslator"></p></li><li><p>viewResolvers<img src="viewResolvers.jpg" alt="viewResolvers"></p></li></ul><h4 id="2-关注点二源码"><a href="#2-关注点二源码" class="headerlink" title="2. 关注点二源码"></a>2. 关注点二源码</h4><blockquote><p>HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</p></blockquote><p>这里主要是根据获取到的<code>handler</code>找到匹配的<code>HandlerAdapter</code>,源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerAdapter</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerAdapter</span> adapter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>adapter<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> adapter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"No adapter for handler ["</span> <span class="token operator">+</span> handler <span class="token operator">+</span><span class="token string">"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们再次看一下<code>HandlerAdapter结构图</code>：</p><p><img src="HandlerAdapter.png" alt="HandlerAdapter"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">{</span><span class="token comment">// 判断是否支持给定的handler</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 用给定的handler处理请求</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">ModelAndView</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">getLastModified</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如，我们测试的项目，注入的<code>HandlerAdapter</code>为：</p><p><img src="handlerAdapters.jpg" alt="handlerAdapters"></p><table><thead><tr><th>HandlerAdapter类型</th><th>支持的handler</th></tr></thead><tbody><tr><td>HttpRequestHandlerAdapter</td><td>HttpRequestHandler</td></tr><tr><td>SimpleControllerHandlerAdapter</td><td>org.springframework.web.servlet.mvc.Controller实例</td></tr><tr><td>RequestMappingHandlerAdapter</td><td>handler instanceof HandlerMethod</td></tr></tbody></table><p>从<a href="/2020/02/25/springmvc-yuan-ma-fen-xi-3-handlermapping/" title="SpringMvc源码分析3——HandlerMapping">SpringMvc源码分析3——HandlerMapping</a>可以知道，<code>handler</code>类型为<code>HandlerMethod</code>,所以，这一步<code>getHandlerAdapter</code>得到的<code>HandlerAdapter</code>为<code>RequestMappingHandlerAdapter</code>。</p><p><em>关注点二就分析到这，那么大家有没有疑问，<code>DispatcherServlet</code>里面的这些属性，如<code>handlerAdapters</code>是什么时候初始化的呢？</em></p><h3 id="三-handlerAdapters等的初始化"><a href="#三-handlerAdapters等的初始化" class="headerlink" title="三. handlerAdapters等的初始化"></a>三. handlerAdapters等的初始化</h3><blockquote><p>既然<code>DispatcherServlet</code>是<code>Servlet</code>，那么就肯定会执行它的<code>init()</code>方法；</p></blockquote><p>观察<code>DispatcherServlet</code>，发现里面有一个<code>DispatcherServlet#initStrategies</code>方法,如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面包含了一系列属性的初始化。那么直接在这个方法内debug，然后启动<code>springboot</code>应用，可以看到调用栈：</p><p><img src="initStrategies.jpg" alt="initStrategies"></p><p>我们可以看到<code>Servlet</code>的<code>init()</code>调用过程。</p><p>然后来看下，<code>    initHandlerAdapters(context)</code>源码:</p><pre class="line-numbers language-none"><code class="language-none">private void initHandlerAdapters(ApplicationContext context) {   this.handlerAdapters = null;   //  detectAllHandlerAdapters 默认为true   if (this.detectAllHandlerAdapters) {      // Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.      Map&lt;String, HandlerAdapter&gt; matchingBeans =            BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, true, false);      if (!matchingBeans.isEmpty()) {         this.handlerAdapters = new ArrayList&lt;&gt;(matchingBeans.values());         // We keep HandlerAdapters in sorted order.         AnnotationAwareOrderComparator.sort(this.handlerAdapters);      }   }   else {      try {         HandlerAdapter ha = context.getBean(HANDLER_ADAPTER_BEAN_NAME, HandlerAdapter.class);         this.handlerAdapters = Collections.singletonList(ha);      }      catch (NoSuchBeanDefinitionException ex) {         // Ignore, we'll add a default HandlerAdapter later.      }   }   // Ensure we have at least some HandlerAdapters, by registering   // default HandlerAdapters if no other adapters are found.   if (this.handlerAdapters == null) {      this.handlerAdapters = getDefaultStrategies(context, HandlerAdapter.class);      if (logger.isTraceEnabled()) {         logger.trace("No HandlerAdapters declared for servlet '" + getServletName() +               "': using default strategies from DispatcherServlet.properties");      }   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化<code>handlerAdapters</code>分了这几种情况：</p><ol><li><p><code>detectAllHandlerAdapter</code>为<code>true</code>(默认就为<code>true</code>)，会从应用上下文中找到所有的<code>HandlerAdapters</code>,然后做一个排序。</p></li><li><p><code>detectAllHandlerAdapter</code>为<code>false</code>，就会找到名称为<code>handlerAdapter</code>的<code>handlerAdapter</code>。</p></li><li><p>最后，如果<code>handlerAdapters</code>仍然为空，则会走默认的策略。这默认的实现可以在<code>DispatcherServlet.properties</code>查看到，如下：</p><pre class="line-numbers language-none"><code class="language-none"># Default implementation classes for DispatcherServlet's strategy interfaces.# Used as fallback when no matching beans are found in the DispatcherServlet context.# Not meant to be customized by application developers.org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolverorg.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolverorg.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMappingorg.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapterorg.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver,\org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverorg.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatororg.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolverorg.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringMvc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc源码分析3——HandlerMapping</title>
      <link href="2020/02/25/springmvc-yuan-ma-fen-xi-3-handlermapping/"/>
      <url>2020/02/25/springmvc-yuan-ma-fen-xi-3-handlermapping/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMvc源码分析3——HandlerMapping"><a href="#SpringMvc源码分析3——HandlerMapping" class="headerlink" title="SpringMvc源码分析3——HandlerMapping"></a>SpringMvc源码分析3——HandlerMapping</h2><h3 id="一-准备"><a href="#一-准备" class="headerlink" title="一. 准备"></a>一. 准备</h3><p>首先再次贴一下<code>HandlerMapping</code>结构图：</p><p><img src="HandlerMapping.png" alt="HandlerMapping"></p><p>接着上一篇，我们暴露的接口:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello: "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bebug到<code>DispatcherServlet#doDispatch</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 1. todo待分析，关注点一</span>    mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. todo待分析，关注点二</span>    <span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. todo待分析，关注点三</span>    mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4. todo待分析，关注点四</span>    <span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5. todo待分析，关注点五</span>    <span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-分析"><a href="#二-分析" class="headerlink" title="二. 分析"></a>二. 分析</h3><h4 id="1-关注几个属性值"><a href="#1-关注几个属性值" class="headerlink" title="1. 关注几个属性值"></a>1. 关注几个属性值</h4><p>我们先看一下<code>DispatcherServlet</code>内部几个属性此时的值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** List of HandlerMappings used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMapping</span><span class="token punctuation">&gt;</span></span> handlerMappings<span class="token punctuation">;</span><span class="token comment">/** List of HandlerAdapters used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerAdapter</span><span class="token punctuation">&gt;</span></span> handlerAdapters<span class="token punctuation">;</span><span class="token comment">/** List of HandlerExceptionResolvers used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">&gt;</span></span> handlerExceptionResolvers<span class="token punctuation">;</span><span class="token comment">/** RequestToViewNameTranslator used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">RequestToViewNameTranslator</span> viewNameTranslator<span class="token punctuation">;</span><span class="token comment">/** List of ViewResolvers used by this servlet. */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ViewResolver</span><span class="token punctuation">&gt;</span></span> viewResolvers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>handlerMappings   <img src="handlerMappings.jpg" alt="handlerMappings"></p></li><li><p>handlerAdapters</p><p><img src="handlerAdapters.jpg"></p></li><li><p>handlerExceptionResolvers  <img src="handlerExceptionResolvers.jpg" alt="handlerExceptionResolvers"></p></li><li><p>viewNameTranslator<img src="viewNameTranslator.jpg" alt="viewNameTranslator"></p></li><li><p>viewResolvers<img src="viewResolvers.jpg" alt="viewResolvers"></p></li></ul><h4 id="2-关注点一源码"><a href="#2-关注点一源码" class="headerlink" title="2. 关注点一源码"></a>2. 关注点一源码</h4><blockquote><p>mappedHandler = getHandler(processedRequest);</p></blockquote><p>这里主要是根据请求找到匹配的<code>HandlerMapping</code>，然后得到相应的<code>handler</code>和拦截器，封装成<code>HandlerExecutionChain</code>返回。</p><p>源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMapping</span> mapping <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// todo分析</span><span class="token class-name">HandlerExecutionChain</span> handler <span class="token operator">=</span> mapping<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到的匹配到<code>HandlerMapping</code>为<code>RequestMappingHandlerMapping</code>.接着执行:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token comment">// 得到handler</span>  <span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>handler <span class="token operator">=</span> <span class="token function">getDefaultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">// 获取到请求的拦截器，封装成HandlerExecutionChain返回</span><span class="token class-name">HandlerExecutionChain</span> executionChain <span class="token operator">=</span> <span class="token function">getHandlerExecutionChain</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> executionChain<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RequestMappingHandlerMapping</code>里面维护着<code>mappingRegistry</code>,它的值为：</p><blockquote><p>其实<code>mappingRegistry</code>属性在<code>AbstractHandlerMethodMapping</code>里面。</p></blockquote><p><img src="mappingRegistry.jpg" alt="mappingRegistry">然后根据请求找出里面匹配到的<code>RequestMappingInfo</code>，从而得到<code>HandlerMethod</code>对象。</p><p>最后得到的<code>handler</code>为：</p><p><img src="handler.jpg" alt="handler"></p><p>之后，获取到请求的拦截器，再封装成HandlerExecutionChain返回。对应代码为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandlerExecutionChain</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">HandlerExecutionChain</span> chain <span class="token operator">=</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token operator">?</span><span class="token punctuation">(</span><span class="token class-name">HandlerExecutionChain</span><span class="token punctuation">)</span> handler <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">HandlerExecutionChain</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> lookupPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>urlPathHelper<span class="token punctuation">.</span><span class="token function">getLookupPathForRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerInterceptor</span> interceptor <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adaptedInterceptors<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>interceptor <span class="token keyword">instanceof</span> <span class="token class-name">MappedInterceptor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">MappedInterceptor</span> mappedInterceptor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappedInterceptor</span><span class="token punctuation">)</span> interceptor<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mappedInterceptor<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pathMatcher<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>chain<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>mappedInterceptor<span class="token punctuation">.</span><span class="token function">getInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>chain<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> chain<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h3><p><code>HandlerMapping</code>的作用其实就是请求和具体<code>Handler</code>处理器(这里的<code>Handler</code>一般为<code>Controller</code>里的一个方法<code>method</code>，或者<code>org.springframework.web.servlet.mvc.Controller</code>等)之间的一个映射关系。</p><p>如<code>SimpleUrlHandlerMapping</code>则是会根据内部维护的<code>urlMap</code>(以路径作为键，并以处理程序bean或bean名称作为值的Map)查找具体的<code>handler</code>。</p><p>而<code>RequestMappingHandlerMapping</code>则会处理请求和注解(<code>@Controller</code>，<code>@RequestMapping</code>)方法对应的映射关系。</p>]]></content>
      
      
      <categories>
          
          <category> SpringMvc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc源码分析2——DispatcherServlet</title>
      <link href="2020/02/24/springmvc-yuan-ma-fen-xi-2-dispatcherservlet/"/>
      <url>2020/02/24/springmvc-yuan-ma-fen-xi-2-dispatcherservlet/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从SpringMvc的中心处理器<code>DispatcherServlet</code>开始说起。源码主要是基于<code>jdk1.8</code>,<code>springboot 2.1.6.RELEASE</code>,添加一个<code>spring-boot-starter-web</code>依赖。</p></blockquote><h3 id="一-DispatcherServlet结构图"><a href="#一-DispatcherServlet结构图" class="headerlink" title="一. DispatcherServlet结构图"></a>一. DispatcherServlet结构图</h3><p><img src="DispatcherServlet.png" alt="DispatcherServlet"></p><h3 id="二-测试代码"><a href="#二-测试代码" class="headerlink" title="二. 测试代码"></a>二. 测试代码</h3><blockquote><p>首先我们先暴露一个接口</p></blockquote><pre class="line-numbers language-none"><code class="language-none">@RestControllerpublic class IndexController {    @GetMapping("/hello")    public String hello(String name) {        return "hello: " + name;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>http://localhost:8080/hello</code>:</p><h4 id="1-调用链"><a href="#1-调用链" class="headerlink" title="1. 调用链"></a>1. 调用链</h4><p>Debug一下: 查看一下调用链，如下：</p><p><img src="Xnip2020-02-24_15-02-06.jpg" alt="Xnip2020-02-24_15-02-06"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">HttpServlet</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token number">2.</span> <span class="token class-name">FrameworkServlet</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token number">3.</span> <span class="token class-name">HttpServlet</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token number">4.</span> <span class="token class-name">FrameworkServlet</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span>  <span class="token number">5.</span> <span class="token class-name">DispatcherServlet</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token number">6.</span> <span class="token class-name">DispatcherServlet</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们查看一下具体的代码，</p><h4 id="2-FrameworkServlet-processRequest"><a href="#2-FrameworkServlet-processRequest" class="headerlink" title="2. FrameworkServlet#processRequest"></a>2. <code>FrameworkServlet#processRequest</code></h4><blockquote><p>代码进行了一些删减</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 处理此请求，不考虑结果而发布事件,实际事件处理由抽象执行 */</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  <span class="token class-name">LocaleContext</span> previousLocaleContext <span class="token operator">=</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocaleContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocaleContext</span> localeContext <span class="token operator">=</span> <span class="token function">buildLocaleContext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RequestAttributes</span> previousAttributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServletRequestAttributes</span> requestAttributes <span class="token operator">=</span> <span class="token function">buildRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> previousAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>asyncManager<span class="token punctuation">.</span><span class="token function">registerCallableInterceptor</span><span class="token punctuation">(</span><span class="token class-name">FrameworkServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RequestBindingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置了LocaleContextHolder和RequestContextHolder，使用ThreadLocal保存，所以在之后可以直接通过LocaleContextHolder，RequestContextHolder获取相关信息</span><span class="token function">initContextHolders</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> localeContext<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// todo下面分析</span><span class="token function">doService</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>failureCause <span class="token operator">=</span> ex<span class="token punctuation">;</span><span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>failureCause <span class="token operator">=</span> ex<span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Request processing failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment">// 重置LocaleContextHolder和RequestContextHolder</span><span class="token function">resetContextHolders</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> previousLocaleContext<span class="token punctuation">,</span> previousAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>requestAttributes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>requestAttributes<span class="token punctuation">.</span><span class="token function">requestCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">logResult</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failureCause<span class="token punctuation">,</span> asyncManager<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 发布相关事件</span><span class="token function">publishRequestHandledEvent</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> failureCause<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前一部分是将当前请求的Locale对象和请求的属性，通过<code>LocaleContextHolder</code>和<code>RequestContextHolder</code>设置到<code>ThreadLocal</code>对象中，也就是分别将这两个对象和请求线程做了绑定。之后我们就可以从里面获取这些绑定的值使用。调用<code>doService()</code>处理结束后，再通过<code>LocaleContextHolder</code>和<code>RequestContextHolder</code>恢复相应的绑定。接着发布了一个<code>ServletRequestHandledEvent</code>事件。具体我们再看<code>doService()</code>方法。</p><h4 id="3-DispatcherServlet-doService"><a href="#3-DispatcherServlet-doService" class="headerlink" title="3. DispatcherServlet#doService"></a>3. <code>DispatcherServlet#doService</code></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token function">logRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Keep a snapshot of the request attributes in case of an include,</span><span class="token comment">// to be able to restore the original attributes after the include.</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributesSnapshot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">isIncludeRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>attributesSnapshot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> attrNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>attrNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> attrNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cleanupAfterInclude <span class="token operator">||</span> attrName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>DEFAULT_STRATEGIES_PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>attributesSnapshot<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Make framework objects available to handlers and view objects.</span>  <span class="token comment">// 给request设置一些属性</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> <span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>LOCALE_RESOLVER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>THEME_RESOLVER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>themeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>THEME_SOURCE_ATTRIBUTE<span class="token punctuation">,</span> <span class="token function">getThemeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">FlashMap</span> inputFlashMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">.</span><span class="token function">retrieveAndUpdate</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inputFlashMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>INPUT_FLASH_MAP_ATTRIBUTE<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>inputFlashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>OUTPUT_FLASH_MAP_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FlashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>FLASH_MAP_MANAGER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token function">doDispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Restore the original attribute snapshot, in case of an include.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>attributesSnapshot <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">restoreAttributesAfterInclude</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> attributesSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面有几个<code>requet.setAttribute()</code>方法的调用，将之前在初始化流程中实例化的对象设置到<code>request</code>的属性中，供下一步处理使用，这里有web上下文，本地化解析器等。然后继续调用<code>doDispatch()</code>处理请求。</p><h4 id="4-DispatcherServlet-doDispatch"><a href="#4-DispatcherServlet-doDispatch" class="headerlink" title="4. DispatcherServlet#doDispatch"></a>4. <code>DispatcherServlet#doDispatch</code></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">HttpServletRequest</span> processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span><span class="token class-name">HandlerExecutionChain</span> mappedHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> multipartRequestParsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Exception</span> dispatchException <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>processedRequest <span class="token operator">=</span> <span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>multipartRequestParsed <span class="token operator">=</span> <span class="token punctuation">(</span>processedRequest <span class="token operator">!=</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Determine handler for the current request.</span>        <span class="token comment">// 根据当前请求获取HandlerMapping，并得到HandlerExecutionChain</span>mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Determine handler adapter for the current request.</span>        <span class="token comment">// 获取匹配的HandlerAdapter</span><span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Process last-modified header, if supported by the handler.</span><span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isGet <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isGet <span class="token operator">||</span> <span class="token string">"HEAD"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">long</span> lastModified <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkNotModified</span><span class="token punctuation">(</span>lastModified<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isGet<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token comment">// 执行拦截器的 preHandle()方法</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyPreHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Actually invoke the handler.</span>        <span class="token comment">// 调用handler，得到ModelAndView</span>mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行拦截器的 postHandle()方法</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyPostHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>dispatchException <span class="token operator">=</span> ex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span><span class="token comment">// making them available for @ExceptionHandler methods and other scenarios.</span>dispatchException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler dispatch failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token comment">// 处理ModelAndView,最后再执行拦截器的 afterCompletion()方法</span><span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 异常，执行拦截器的 afterCompletion()方法</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 异常，执行拦截器的 afterCompletion()方法</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler processing failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Instead of postHandle and afterCompletion</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyAfterConcurrentHandlingStarted</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// Clean up any resources used by a multipart request.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>multipartRequestParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">cleanupMultipart</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此终于找了处理流程的主线，我们看到了一系列<a href="/2020/02/24/springmvc-yuan-ma-fen-xi-1/" title="SpringMvc源码分析1">SpringMvc源码分析1</a> 中介绍的对象，以及处理流程。</p><p>这里会从<code>DispatcherServlet</code>内维护的<code>handlerMappings</code>中找到匹配的<code>HandlerMapping</code>方法，并执行其<code>getHandler()</code>方法，得到<code>HandlerExecutionChain</code>,看一下具体的内部结构：</p><p><img src="HandlerExecutionChain.png" alt="HandlerExecutionChain.png"></p><p>可以看到维护了<code>handler</code>和拦截器列表。</p><p>接着<code>HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</code>得到<code>HandlerAdapter</code>，然后执行拦截器的<code>postHandle()</code>方法。之后调用<code>HandlerAdapter</code>的<code>handle()</code>,处理<code>controller</code>里面的逻辑，得到<code>ModelAndView</code>,接着执行拦截器的<code>postHandle()</code>方法。然后就会根据<code>viewResolvers</code>得到具体的视图<code>View</code>，最后就是渲染视图，返回给客户端。</p><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h3><p>到此，我们可以了解<code>DispatcherServlet</code>大概的处理流程。其中</p><p><code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</code>还有很多的处理逻辑，包括<code>HandlerMethodArgumentResolver</code>,<code>HandlerMethodReturnValueHandler</code>,<code>HttpMessageConverter</code>等的处理，我们后面继续分析。</p>]]></content>
      
      
      <categories>
          
          <category> SpringMvc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc源码分析1</title>
      <link href="2020/02/24/springmvc-yuan-ma-fen-xi-1/"/>
      <url>2020/02/24/springmvc-yuan-ma-fen-xi-1/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMvc源码分析1"><a href="#SpringMvc源码分析1" class="headerlink" title="SpringMvc源码分析1"></a>SpringMvc源码分析1</h2><blockquote><p>由于疫情影响，在家正好抽时间整理一下SpringMvc相关源码内容。望疫情早点结束，迎暖阳，赏春光！</p></blockquote><h3 id="一-架构流程"><a href="#一-架构流程" class="headerlink" title="一. 架构流程"></a>一. 架构流程</h3><blockquote><p>首先，画了一个大概的springmvc处理请求的流程图。</p></blockquote><p><img src="mvc1.jpg" alt="mvc"></p><p><strong>1:</strong> 客户端发起请求，请求进入<code>DispatcherServlet</code>统一处理;</p><p><strong>2-3:</strong> <code>DispatcherServlet</code>从内部维护的<code>handlerMappings</code>列表中查找适合的<code>HandlerMapping</code>,然后调用其<code>getHandler(request)</code>方法，返回<code>HandlerExecutionChain</code>。<code>HandlerExecutionChain</code>包含了具体的处理器<code>handler</code>和拦截器列表<code>interceptorList</code>;</p><p><strong>4:</strong> 根据得到的<code>handler</code>从内部维护的<code>handlerAdapters</code>中获取匹配的<code>HandlerAdapter</code>；</p><p><strong>5-7:</strong> 执行<code>HandlerAdapter</code>的<code>handle(HttpServletRequest request, HttpServletResponse response, Object handler)</code>方法,返回<code>ModelAndView</code>;</p><p><strong>8-9:</strong> 使用从内部维护的<code>viewResolvers</code>得到具体的视图<code>View</code>对象;</p><p><strong>10-11:</strong> 渲染该视图<code>View</code>，返回给客户端；</p><h3 id="二-接口抽象"><a href="#二-接口抽象" class="headerlink" title="二. 接口抽象"></a>二. 接口抽象</h3><blockquote><p>我们来关注几个关键的接口</p></blockquote><ol><li><h4 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a><code>HandlerMapping</code></h4></li></ol><blockquote><p>该接口主要就是根据请求，来获取处理器执行链——包括具体的处理器和拦截器。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerMapping</span> <span class="token punctuation">{</span>     <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看一下接口实现图(已删除一些)：</p><p><img src="HandlerMapping.png" alt="HandlerMapping"></p><blockquote><p>之后我们会具体关注<code>RequestMappingHandlerMapping</code>。</p></blockquote><ol start="2"><li><h4 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a><code>HandlerAdapter</code></h4></li></ol><blockquote><p>用来处理具体的handler逻辑，如调用controller里面的代码。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">{</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ModelAndView</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">getLastModified</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看一下接口实现图：</p><p><img src="HandlerAdapter.png" alt="HandlerAdapter"></p><blockquote><p>之后我们会具体关注<code>RequestMappingHandlerAdapter</code></p></blockquote><p>这一块内容包括很多，比如参数的绑定，handler方法的执行，返回值的绑定等等。我们先大概了解一下SpringMvc处理请求的流程，接下来我们再查看具体的源码。OK，这一篇先记录到这里。</p>]]></content>
      
      
      <categories>
          
          <category> SpringMvc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控Feign调用metrics</title>
      <link href="2020/02/22/jian-kong-feign-diao-yong-metrics/"/>
      <url>2020/02/22/jian-kong-feign-diao-yong-metrics/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们公司的微服务去年已经开始使用metrics来收集应用运行指标，结合prometheus和grafana来统一收集和可视化。服务间的调用我们是使用Feign来进行调用的，但是发现springboot应用没法收集Feign调用得metrics信息，特此，记录一下怎么收集Feign调用的metrics信息。</p></blockquote><p>首先我们来看一下springboot2.X默认使用的metrics指标工具<a href="http://micrometer.io/">micrometer</a>,查看它的官方文档，我们发现它对okhttp做了支持，如下：<br><img src="https://gitee.com/shiv/md-images/raw/master/blog/Xnip2020-02-22_11-18-23.jpg"></p><ul><li><a href="http://micrometer.io/docs/ref/okhttpclient">OkHttpClient Metrics</a></li></ul><p>既然如此，那么我们可以调整Feign的默认底层调用实现，使其使用okhttp来调用，从而解决Feign的metrics指标问题。</p><p>在此，我们需要注意的是<code>OkHttpClient Metrics</code>使用的okhttp的<code>eventListener</code>功能，这个功能在早期的okhttp没有提供。我查看了一下<a href="https://square.github.io/okhttp/changelog_3x/">okhttp文档</a>,发现如下：</p><pre class="line-numbers language-none"><code class="language-none">Version 3.11.0...New: The EventListener API previewed in OkHttp 3.9 has graduated to a stable API. Use this interface to track metrics and monitor HTTP requests’ size and duration.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>表明，在3.11.0版本，该功能已经稳定。所以我们需要的版本&gt;=3.11.0<br>下面，开始演示。</p><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><h4 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1. pom.xml"></a>1. pom.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>10.7.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.squareup.okhttp3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.squareup.okhttp3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.14.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>micrometer-registry-prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Feign底层使用okhttp"><a href="#2-Feign底层使用okhttp" class="headerlink" title="2. Feign底层使用okhttp"></a>2. Feign底层使用okhttp</h4><ul><li>配置文件<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">okhttp</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>springboot配置<blockquote><p>我们可以直接将FeignAutoConfiguration里面的okhttp配置拿出来</p></blockquote></li></ul><p>配置如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">OkHttpClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"com.netflix.loadbalancer.ILoadBalancer"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span><span class="token string">"feign.okhttp.enabled"</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OkHttpFeignConfiguration</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">okhttp3<span class="token punctuation">.</span></span>OkHttpClient</span> okHttpClient<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">ConnectionPool</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">ConnectionPool</span> <span class="token function">httpClientConnectionPool</span><span class="token punctuation">(</span>                <span class="token class-name">FeignHttpClientProperties</span> httpClientProperties<span class="token punctuation">,</span>                <span class="token class-name">OkHttpClientConnectionPoolFactory</span> connectionPoolFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> maxTotalConnections <span class="token operator">=</span> httpClientProperties<span class="token punctuation">.</span><span class="token function">getMaxConnections</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> timeToLive <span class="token operator">=</span> httpClientProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TimeUnit</span> ttlUnit <span class="token operator">=</span> httpClientProperties<span class="token punctuation">.</span><span class="token function">getTimeToLiveUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> connectionPoolFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>maxTotalConnections<span class="token punctuation">,</span> timeToLive<span class="token punctuation">,</span> ttlUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">okhttp3<span class="token punctuation">.</span></span>OkHttpClient</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token class-name">OkHttpClientFactory</span> httpClientFactory<span class="token punctuation">,</span>                                           <span class="token class-name">ConnectionPool</span> connectionPool<span class="token punctuation">,</span>                                           <span class="token class-name">FeignHttpClientProperties</span> httpClientProperties<span class="token punctuation">,</span>                                           <span class="token class-name">OkHttpMetricsEventListener</span> okHttpMetricsEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>okHttpClient <span class="token operator">=</span> httpClientFactory<span class="token punctuation">.</span><span class="token function">createBuilder</span><span class="token punctuation">(</span>httpClientProperties<span class="token punctuation">.</span><span class="token function">isDisableSslValidation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span>okHttpMetricsEventListener<span class="token punctuation">)</span> <span class="token comment">// 配置metrics监听器</span>                    <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span>httpClientProperties<span class="token punctuation">.</span><span class="token function">getConnectionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">followRedirects</span><span class="token punctuation">(</span>httpClientProperties<span class="token punctuation">.</span><span class="token function">isFollowRedirects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">connectionPool</span><span class="token punctuation">(</span>connectionPool<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>okHttpClient<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@PreDestroy</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>okHttpClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>okHttpClient<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>okHttpClient<span class="token punctuation">.</span><span class="token function">connectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">evictAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">OkHttpMetricsEventListener</span> <span class="token function">okHttpMetricsEventListener</span><span class="token punctuation">(</span><span class="token class-name">MeterRegistry</span> meterRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>  <span class="token class-name">OkHttpMetricsEventListener</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>meterRegistry<span class="token punctuation">,</span> <span class="token string">"ok"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">uriMapper</span><span class="token punctuation">(</span>request <span class="token operator">-&gt;</span> request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodedPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 默认也支持URI_PATTERN header支持uri tag</span>                    <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这里可以指定自定义的tag</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">Client</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">Client</span> <span class="token function">feignClient</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">okhttp3<span class="token punctuation">.</span></span>OkHttpClient</span> client<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要是增加了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span>okHttpMetricsEventListener<span class="token punctuation">)</span> <span class="token comment">// 配置metrics监听器</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">OkHttpMetricsEventListener</span> <span class="token function">okHttpMetricsEventListener</span><span class="token punctuation">(</span><span class="token class-name">MeterRegistry</span> meterRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>  <span class="token class-name">OkHttpMetricsEventListener</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>meterRegistry<span class="token punctuation">,</span> <span class="token string">"ok"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">uriMapper</span><span class="token punctuation">(</span>request <span class="token operator">-&gt;</span> request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodedPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-Feign请求代码"><a href="#3-Feign请求代码" class="headerlink" title="3. Feign请求代码"></a>3. Feign请求代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/test"</span><span class="token punctuation">)</span>    <span class="token class-name">BaseResp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignTestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TestClient</span> testClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BaseResp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> test <span class="token operator">=</span> testClient<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过web暴露出这个接口给外部调用。</p><h4 id="4-观察metrics信息"><a href="#4-观察metrics信息" class="headerlink" title="4. 观察metrics信息"></a>4. 观察metrics信息</h4><blockquote><p><a href="http://localhost:8080/actuator/prometheus">http://localhost:8080/actuator/prometheus</a></p></blockquote><p>如下，是一段相关的信息</p><pre class="line-numbers language-none"><code class="language-none"># HELP ok_seconds Timer of OkHttp operation# TYPE ok_seconds summaryok_seconds_count{host="localhost",method="GET",status="200",uri="/api/test",} 8.0ok_seconds_sum{host="localhost",method="GET",status="200",uri="/api/test",} 0.109059855# HELP ok_seconds_max Timer of OkHttp operation# TYPE ok_seconds_max gaugeok_seconds_max{host="localhost",method="GET",status="200",uri="/api/test",} 0.004678218<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，我们就可以获取到相关的Feign调用信息，然后就可以进行相关的监控和可视化展示。</p>]]></content>
      
      
      
        <tags>
            
            <tag> feign </tag>
            
            <tag> metrics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot: no suitable HttpMessageConverter found for response</title>
      <link href="2020/02/21/springboot-no-suitable-httpmessageconverter-found-for-response/"/>
      <url>2020/02/21/springboot-no-suitable-httpmessageconverter-found-for-response/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在使用<code>springboot</code>调用第三方接口的时候，出现了这个异常Could not extract response: no suitable HttpMessageConverter found for response type [cn.justme.sboot.entity.BaseResp&lt;java.lang.String&gt;] and content type [text/plain;charset=UTF-8],这里就来分析一下具体问题</p></blockquote><h3 id="事件还原"><a href="#事件还原" class="headerlink" title="事件还原"></a>事件还原</h3><h4 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1. pom.xml"></a>1. pom.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-feign调用"><a href="#2-feign调用" class="headerlink" title="2. feign调用"></a>2. feign调用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/test"</span><span class="token punctuation">)</span>    <span class="token class-name">BaseResp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三方接口返回的是json，这里我是使用feign调用。</p><h4 id="3-第三方接口"><a href="#3-第三方接口" class="headerlink" title="3. 第三方接口"></a>3. 第三方接口</h4><blockquote><p>接口: <code>/api/test</code></p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Xnip2020-02-21_15-00-38.jpg"><br>我们可以看到<code>Content-Type: text/plain;charset=UTF-8</code>,</p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>springboot默认的处理json的<code>HttpMessageConverter</code>为<code>MappingJackson2HttpMessageConverter</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MediaType</span><span class="token punctuation">(</span><span class="token string">"application"</span><span class="token punctuation">,</span> <span class="token string">"*+json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是<code>MappingJackson2HttpMessageConverter</code>只支持<code>APPLICATION_JSON</code>类型,所以springboot没有找到合适的<code>HttpMessageConverter</code>,于是报出了上面的异常。</p><p>feign默认的Decoder为<code>SpringDecoder</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDecoder</span> <span class="token keyword">implements</span> <span class="token class-name">Decoder</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverters</span><span class="token punctuation">&gt;</span></span> messageConverters<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">SpringDecoder</span><span class="token punctuation">(</span><span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverters</span><span class="token punctuation">&gt;</span></span> messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters <span class="token operator">=</span> messageConverters<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看一下默认的<code>messageConverters</code><br><img src="Xnip2020-02-21_15-21-33.jpg"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote><p>解决该问题，只要添加<code>MediaType.TEXT_PLAIN</code>类型的支持即可</p></blockquote><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><blockquote><p>仅仅在该<code>FeignClient</code>做<code>MediaType.TEXT_PLAIN</code>的支持，不影响其他的client。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">TestClient<span class="token punctuation">.</span>FeignTestConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/test"</span><span class="token punctuation">)</span>    <span class="token class-name">BaseResp</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">FeignTestConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">Decoder</span> <span class="token function">textPlainDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">HttpMessageConverters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomMappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">CustomMappingJackson2HttpMessageConverter</span> <span class="token keyword">extends</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSupportedMediaTypes</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">&gt;</span></span> supportedMediaTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setSupportedMediaTypes</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_PLAIN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用接口，查看该<code>FeignClient</code>的<code>Decoder</code><br><img src="Xnip2020-02-21_15-29-34.jpg"><br>此时调用成功。</p><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><blockquote><p>全局修改，使所有的调用都支持<code>TEXT_PLAIN</code>的<code>Content-Type</code></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span> <span class="token function">customMappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomMappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomMappingJackson2HttpMessageConverter</span> <span class="token keyword">extends</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">CustomMappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setSupportedMediaTypes</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_PLAIN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h4><p>我们也可以实现<code>WebMvcConfigurer</code>下面接口来实现对应功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Configure the {@link HttpMessageConverter}s to use for reading or writing * to the body of the request or response. If no converters are added, a * default list of converters is registered. * &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that adding converters to the list, turns off * default converter registration. To simply add a converter without impacting * default registration, consider using the method * {@link #extendMessageConverters(java.util.List)} instead. * @param converters initially an empty list of converters */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">/** * A hook for extending or modifying the list of converters after it has been * configured. This may be useful for example to allow default converters to * be registered and then insert a custom converter through this method. * @param converters the list of configured converters to extend. * @since 4.1.3 */</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链接收藏</title>
      <link href="2020/02/08/lian-jie-shou-cang/"/>
      <url>2020/02/08/lian-jie-shou-cang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>收藏一些较好的技术链接，整理方便查看</p></blockquote><h3 id="一-java基础"><a href="#一-java基础" class="headerlink" title="一. java基础"></a>一. java基础</h3><ul><li><a href="https://www.toutiao.com/i6682990241403372035/?timestamp=1581152961&amp;app=news_article&amp;group_id=6682990241403372035&amp;req_id=2020020817092101012902702013F4CE16">java基础</a></li><li><a href="https://www.toutiao.com/i6646348468807795214/?timestamp=1581153011&amp;app=news_article&amp;group_id=6646348468807795214&amp;req_id=202002081710110101310760531978D4E6">java异常</a></li><li><a href="https://www.toutiao.com/i6673515997896376844/?timestamp=1581153031&amp;app=news_article&amp;group_id=6673515997896376844&amp;req_id=2020020817103101012903509107F6019A">java多线程</a></li><li><a href="https://www.toutiao.com/a6682830757519426055/?timestamp=1581153064&amp;app=news_article&amp;group_id=6682830757519426055&amp;req_id=2020020817110401012903514414EEC039">java原子操作</a></li><li><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">java线程池实现原理及其在美团业务中的实践</a></li></ul><h3 id="二-reactor"><a href="#二-reactor" class="headerlink" title="二. reactor"></a>二. reactor</h3><ul><li><a href="https://projectreactor.io/">project reactor官网</a></li><li><a href="https://blog.csdn.net/get_set/article/details/79466657">响应式Spring的道法术器（Spring WebFlux 教程）</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jackson LocalDateTime的反序列化问题</title>
      <link href="2020/01/05/jackson-localdatetime-de-fan-xu-lie-hua-wen-ti/"/>
      <url>2020/01/05/jackson-localdatetime-de-fan-xu-lie-hua-wen-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当我们使用java8的LocalDateTime，LocalDate等接收来自前端请求json的时间字段时，会由于格式问题会导致反序列化失败，这里提供一种全局的解决方案。</p></blockquote><h2 id="1-示例"><a href="#1-示例" class="headerlink" title="1. 示例"></a>1. 示例</h2><h3 id="1-1-代码"><a href="#1-1-代码" class="headerlink" title="1.1 代码"></a>1.1 代码</h3><p><strong>build.gradle</strong></p><pre class="line-numbers language-gradle" data-language="gradle"><code class="language-gradle">plugins {  id 'org.springframework.boot' version '2.1.11.RELEASE'  id 'io.spring.dependency-management' version '1.0.8.RELEASE'  id 'java'}group = 'com.example'version = '0.0.1-SNAPSHOT'sourceCompatibility = '1.8'repositories {  mavenCentral()  maven { url "http://maven.aliyun.com/nexus/content/groups/public" }}dependencies {  implementation 'org.springframework.boot:spring-boot-starter-web'  implementation "org.apache.commons:commons-lang3:3.9}"  testImplementation 'org.springframework.boot:spring-boot-starter-test'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>java代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Date</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputeParam</span> <span class="token punctuation">{</span>    <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/compute"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Stirng</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">ComputeParam</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> ok<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-请求"><a href="#1-2-请求" class="headerlink" title="1.2 请求"></a>1.2 请求</h3><pre class="line-numbers language-none"><code class="language-none">curl --request POST \  --url http://localhost:8080/compute \  --header 'content-type: application/json' \  --data '{"createTime": "2020-01-04 12:12:12"}'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-响应"><a href="#1-3-响应" class="headerlink" title="1.3 响应"></a>1.3 响应</h3><p><strong>异常信息</strong></p><pre class="line-numbers language-none"><code class="language-none">2020-01-05 00:41:33.506  WARN [,fa2f61967e660396,fa2f61967e660396,false] 84616 --- [nio-8080-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String "2020-01-04 12:12:12": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text '2020-01-04 12:12:12' could not be parsed at index 10; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDateTime` from String "2020-01-04 12:12:12": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text '2020-01-04 12:12:12' could not be parsed at index 10 at [Source: (PushbackInputStream); line: 2, column: 16] (through reference chain: cn.justme.justmerule.bean.param.ComputeParam["createTime"])]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>注册自定义LocalDateTimeDeserializer</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 全局生效</span><span class="token annotation punctuation">@JsonComponent</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LocalDateTimeDeserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">LocalDateTime</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">JsonParser</span> jsonParser<span class="token punctuation">,</span> <span class="token class-name">DeserializationContext</span> deserializationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNumeric</span><span class="token punctuation">(</span>jsonParser<span class="token punctuation">.</span><span class="token function">getValueAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果是时间戳形式</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>jsonParser<span class="token punctuation">.</span><span class="token function">getValueAsLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atOffset</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"+8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 默认是yyyy-MM-dd HH:mm:ss 形式，如果有多种格式，可以自行拓展</span>                <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonParser<span class="token punctuation">.</span><span class="token function">getValueAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>关于<code>@JsonComponent</code>参照<a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/#boot-features-json-components">官网</a></em></p><p><strong>如果不想全局生效:</strong></p><ol><li><p>我们可以去掉@JsonComponent注解，然后在ComputeParam实体类上添加@JsonDeserialize，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Date</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputeParam</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JsonDeserialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">JsonConfig<span class="token punctuation">.</span>LocalDateTimeDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样可以指定特定的<code>Deserializer</code>,而不影响全局其他同类型的字段。</p></li><li><p>更简单的直接在createTime字段上增加<code> @JsonFormat</code>注解即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Date</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputeParam</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> jackson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jackson </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot配置文件属性转换</title>
      <link href="2019/08/17/spring-boot-pei-zhi-wen-jian-shu-xing-zhuan-huan/"/>
      <url>2019/08/17/spring-boot-pei-zhi-wen-jian-shu-xing-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在我们用Springboot进行开发的时候，我们的很多可配置化的参数会写在配置文件内，然后可以用<code>@ConfigurationProperties </code>将其转化为bean在程序中使用。在转化为bean时，Springboot会默认给我提供一系列的Converter进行参数的转化。如字符串和数据类型的转换，Duration和对应字符串的转换等等。但是有时候一些类型的转换springboot并没有提供对应的Converter，那么我们可以自定义，具体见下文。</p></blockquote><p>这周我想在application.yml文件中配置一个工作时间的时间段，比如9:30-18:30，想转化为 LocalTime，但是发现行不通。具体如下：</p><h4 id="一-问题代码"><a href="#一-问题代码" class="headerlink" title="一 问题代码"></a>一 问题代码</h4><ol><li>application.yml</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">demo</span><span class="token punctuation">:</span>  <span class="token key atrule">startTime</span><span class="token punctuation">:</span> <span class="token string">"09:30:00"</span>  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 2m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>ConfigProperties.java</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">LocalTime</span> startTime<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token class-name">Duration</span> timeout<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>启动报错</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>APPLICATION FAILED TO START<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Description</span><span class="token operator">:</span><span class="token class-name">Failed</span> <span class="token keyword">to</span> <span class="token namespace">bind</span> properties under <span class="token string">'demo.start-time'</span> <span class="token keyword">to</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalTime</span><span class="token operator">:</span>    <span class="token class-name">Property</span><span class="token operator">:</span> demo<span class="token punctuation">.</span>starttime    <span class="token class-name">Value</span><span class="token operator">:</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">00</span>    <span class="token class-name">Origin</span><span class="token operator">:</span> <span class="token keyword">class</span> path resource <span class="token punctuation">[</span>application<span class="token punctuation">.</span>yml<span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">14</span>    <span class="token class-name">Reason</span><span class="token operator">:</span> failed <span class="token keyword">to</span> <span class="token namespace">convert</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token keyword">to</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalTime</span><span class="token class-name">Action</span><span class="token operator">:</span><span class="token class-name">Update</span> your application's configuration<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二-解决报错"><a href="#二-解决报错" class="headerlink" title="二 解决报错"></a>二 解决报错</h4><p>首先，当然我们可以用String来接<code>startTime</code>的值，然后在代码中自己在将其转为LocalTime，这样做也行，但是会存在一个问题，如果我不小心将<code>startTime</code>的值配置错了，比如配成了”08:3o:00”(其中一个0配置了字母o)。这时程序启动是不会报错的，只有程序运行到你的转换代码才会报错，我们需要避免在系统运行时才发现错误，防止对应的生产问题。</p><p>既然错误提示已经给出无法将String转为LocalTime，那么我们可以自定义Converter，只需要两步：</p><ol><li>实现**<code>Converter </code>**接口</li><li>用**@ConfigurationPropertiesBinding**注册自定义的<code>Converter</code></li></ol><p>自定义<code>Converter</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationPropertiesBinding</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">Converter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalTime</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationPropertiesBinding</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalTimeConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">LocalTime</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">LocalTime</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，万事俱备，启动程序：</p><pre class="line-numbers language-none"><code class="language-none">2019-08-17 17:23:39.902  INFO 27553 --- [on(2)-127.0.0.1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'2019-08-17 17:23:39.902  INFO 27553 --- [on(2)-127.0.0.1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'2019-08-17 17:23:39.912  INFO 27553 --- [on(2)-127.0.0.1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>大公告成，遇到相同问题的朋友可以自己动手实现自己的Converter了。</p>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapStruct ——An annotation processor for generating type-safe bean mappers</title>
      <link href="2019/08/10/mapstruct-an-annotation-processor-for-generating-type-safe-bean-mappers/"/>
      <url>2019/08/10/mapstruct-an-annotation-processor-for-generating-type-safe-bean-mappers/</url>
      
        <content type="html"><![CDATA[<blockquote><p>bean对象之间的相互映射的工具有不少，比如常见的BeanUtils，dozer，这都基本都是基于反射实现的，但是MapStruct则不同，下面我们就来看看MapStruct的使用方法吧！</p></blockquote><p>MapStruct类似lombok，在编译期生成基于转换规则的 Impl 文件，运行时直接调用 Impl 文件中的函数。所以它的速度是比其他基于反射实现的工具速度要快！！！</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1 pom.xml"></a>1 pom.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.mapstruct.version</span><span class="token punctuation">&gt;</span></span>1.3.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.mapstruct.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.projectlombok.version</span><span class="token punctuation">&gt;</span></span>1.18.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.projectlombok.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${org.projectlombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${org.projectlombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-实体"><a href="#2-实体" class="headerlink" title="2 实体"></a>2 实体</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Source</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> alias<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> anotherName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-转换"><a href="#3-转换" class="headerlink" title="3 转换"></a>3 转换</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SourceConvert</span> <span class="token punctuation">{</span>    <span class="token comment">// field不一致的，可以使用@Mapping来指定映射关系</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"alias"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"anotherName"</span><span class="token punctuation">)</span>    <span class="token class-name">Target</span> <span class="token function">sourceToTarget</span><span class="token punctuation">(</span><span class="token class-name">Source</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-使用"><a href="#4-使用" class="headerlink" title="4 使用"></a>4 使用</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceConvertTest</span> <span class="token punctuation">{</span>    <span class="token class-name">SourceConvert</span> sourceConvert <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sourceConvert <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">SourceConvert</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sourceToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Source</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">setAlias</span><span class="token punctuation">(</span><span class="token string">"mini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Source<span class="token punctuation">.</span>Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Source<span class="token punctuation">.</span>Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">setCar</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Target</span> target <span class="token operator">=</span> sourceConvert<span class="token punctuation">.</span><span class="token function">sourceToTarget</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// Target(name=jack, anotherName=mini, car=Target.Car(color=black))</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这转换已经结束。因为MapStruct是在编译期生成基于转换规则 Impl 文件，所以我们是可以看到编译后生成的SourceConvertImpl的，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceConvertImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SourceConvert</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">SourceConvertImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Target</span> <span class="token function">sourceToTarget</span><span class="token punctuation">(</span><span class="token class-name">Source</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">Target</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            target<span class="token punctuation">.</span><span class="token function">setAnotherName</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            target<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            target<span class="token punctuation">.</span><span class="token function">setCar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">carToCar</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> target<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">Car</span> <span class="token function">carToCar</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>justme<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span>Source<span class="token punctuation">.</span>Car</span> car<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">Car</span> car1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            car1<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> car1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们可以很清楚的看到内部转换的逻辑，当转换出现问题时，MapStruct比一些其他工具类更易debug，定位问题。更多功能可以参考官方文档。</p><h5 id="5-优势"><a href="#5-优势" class="headerlink" title="5 优势"></a>5 优势</h5><p>总结几点优势：</p><ol><li>速度快</li><li>类型安全</li><li>定位问题更方便</li><li>Event handling (<code>@BeforeMapping, @AfterMapping</code>）</li></ol><p>参考：</p><p><a href="http://mapstruct.org/documentation/stable/reference/html/">官网</a></p><p><a href="https://dozermapper.github.io/gitbook/">dozer</a></p>]]></content>
      
      
      <categories>
          
          <category> MapStruct </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8 Lambda Handling Exceptions</title>
      <link href="2019/07/27/java8-lambda-handling-exceptions/"/>
      <url>2019/07/27/java8-lambda-handling-exceptions/</url>
      
        <content type="html"><![CDATA[<blockquote><p>lambda表达式有利于我们写出非常简洁的代码，但是Java8中lambda表达式无法抛出受检异常，这样会使我们在lambda表达式中使用抛出Checked Exception的方法时，会出现一些问题，接下来我们就来探讨一下这个问题。</p></blockquote><h3 id="一-问题"><a href="#一-问题" class="headerlink" title="一 问题"></a>一 问题</h3><p>首先看一下出现问题的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取文件里的文本内容</span><span class="token keyword">public</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">readFiles</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">readFiles</span><span class="token punctuation">)</span> <span class="token comment">// 这里会出现编译异常</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，我们就会发现一个编译问题：</p><pre class="line-numbers language-none"><code class="language-none">Error:(64, 26) java: 方法引用中抛出的类型java.io.IOException不兼容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是由于<code>flatMap()</code>支持的函数式接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 并不支持抛出异常（没有申明throw）     * Applies this function to the given argument.     *     * @param t the function argument     * @return the function result     */</span>    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-问题"><a href="#二-问题" class="headerlink" title="二 问题"></a>二 问题</h3><p>处理这种受检异常时，我们可以先捕获，然后包装并抛出一个非受检异常。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>path <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token function">readFiles</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样可以解决问题，但是会损失lambda的简洁性。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>出现编译时异常的主要问题还是由于Function的apply方法不支持抛出异常，我们可以定义自己的函数式接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ThrowingFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">,</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">E</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在使用一个包装器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">unchecked</span><span class="token punctuation">(</span><span class="token class-name">ThrowingFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WrappedException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以这样使用了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token function">unchecked</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">readFiles</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的话就保证了代码的间接性，但是我们又不得不定义对应的函数式接口和对应的包装器。对于这个问题，我们可以利用一个开源库<code>ThrowingFunction</code>来解决。方法如下：</p><p>1 添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>pl.touk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>throwing-function<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2 代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">ThrowingFunction</span><span class="token punctuation">.</span><span class="token function">unchecked</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">readFiles</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此为止，我们可以<code>ThrowingFunction</code>很好的解决这种检测异常问题！</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次由spring-boot-devtools引发的类型转换问题</title>
      <link href="2019/07/20/ji-yi-ci-you-spring-boot-devtools-yin-fa-de-lei-xing-zhuan-huan-wen-ti/"/>
      <url>2019/07/20/ji-yi-ci-you-spring-boot-devtools-yin-fa-de-lei-xing-zhuan-huan-wen-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在我们在用Springboot开发的时候，可能会引入spring-boot-devtools包，因为这个开发工具包提供了很多很好的供开发时使用的功能，比如提供一些默认的配置，自动重启，远程应用等。但是今天我就碰到了一个与它相关的问题，困扰了我不少时间。</p></blockquote><h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一 简介"></a>一 简介</h3><p><code>spring-boot-devtools</code>为<code>Spring Boot</code>包含的一组额外的工具，可以使应用程序开发体验更加愉快。该<code>spring-boot-devtools</code>模块可以包含在任何项目中，以提供额外的开发期间功能。<code>Spring Boot</code>为了使开发者在开发时针对文件的修改能快速的生效，在<code>spring-boot-devtools</code>中就提供了一个自动重启的功能，只要类路径上的文件发生更改，就会自动重新启动应用程序。</p><p>Spring Boot提供的重启技术使用两个类加载器。不更改的类（例如，来自第三方jar的类）将加载到基类加载器中。您正在积极开发的类将加载到RestartClassLoader加载器中。重新启动应用程序时，RestartClassLoader加载器会被丢弃并重新创建一个。这种方法意味着应用程序重新启动通常比“冷启动”快得多，因为<em>基本</em>类加载器加载的类已经可用。</p><h3 id="二-问题"><a href="#二-问题" class="headerlink" title="二 问题"></a>二 问题</h3><p>我在使用dozer来进行bean的映射的时候，报出了一个<code>ClassCastException</code>异常。代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Mapper</span> mapper <span class="token operator">=</span> <span class="token class-name">DozerBeanMapperBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">withMappingBuilder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanMappingBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">ZxCreditReportDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">CreditInfoDetailDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>             <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CreditInfoDetailDTO</span> map <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>creditReportDTO<span class="token punctuation">,</span> <span class="token class-name">CreditInfoDetailDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先这段代码在Main函数或者在单元测试类运行良好，但是当我启动springboot通过http接口去调用这段代码却出现如下错误：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/1.jpg"></p><p>这里奇怪的就是居然出现类同一个类<code>CreditInfoDetailDTO</code>转换的异常，相同的类为什么会出现类型转换异常呢？于是就出现两个疑问，一，为什么用Main函数或者Junit单元测试没有出现问题？二，什么同一个类会出现类型转换异常？</p><h3 id="三-原因"><a href="#三-原因" class="headerlink" title="三 原因"></a>三 原因</h3><p>其实原因就是启动Springboot调接口与Main函数测试使用的类加载器是有差别的。使用Main函数的时候<code>CreditInfoDetailDTO</code>类都是由AppClassLoader加载器加载的。而springboot由于添加了spring-boot-devtools依赖，会有所不同。上面有这么一段代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">mapping</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">ZxCreditReportDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">CreditInfoDetailDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>进入这段代码内部，会调用MappingUtils的loadClass(String name, BeanContainer beanContainer)去加载指定的mapping类。</p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">BeanContainer</span> beanContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">DozerClassLoader</span> loader <span class="token operator">=</span> beanContainer<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>继续查看<code>beanContainer.getClassLoader()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanContainer</span> <span class="token punctuation">{</span>  <span class="token comment">// 这一段</span>    <span class="token class-name">DozerClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultClassLoader</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DozerClassLoader</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> classLoader<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里Dozer默认使用的加载器为DefaultClassLoader，而DefaultClassLoader内部有一个ClassLoader属性，这个属性值就是上面的<code>getClass().getClassLoader()</code>。由此可以知道加载CreditInfoDetailDTO的加载器与加载BeanContainer类的加载器是同一个都是AppClassLoader，由于spring-boot-devtools的作用，<code>CreditInfoDetailDTO map = mapper.map(creditReportDTO, CreditInfoDetailDTO.class);</code>左侧的CreditInfoDetailDTO是由RestartClassLoader加载的，所以是由于不同的类加载器加载从而导致类型转换异常。</p><h3 id="四-解决方案"><a href="#四-解决方案" class="headerlink" title="四 解决方案"></a>四 解决方案</h3><h4 id="1-不使用spring-boot-devtools"><a href="#1-不使用spring-boot-devtools" class="headerlink" title="1 不使用spring-boot-devtools"></a>1 不使用spring-boot-devtools</h4><h4 id="2-使用spring-devtools-properties"><a href="#2-使用spring-devtools-properties" class="headerlink" title="2 使用spring-devtools.properties"></a>2 使用spring-devtools.properties</h4><p>在reources目录下新建META-INF文件夹，再在META-INF下新建spring-devtools.properties，如下：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 支持正则</span><span class="token attr-name">restart.include.dozer</span><span class="token punctuation">=</span><span class="token attr-value">/dozer-[\\w\\d-\.]+\.jar</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更多配置信息参考<a href="https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/using-boot-devtools.html#using-boot-devtools-customizing-classload">官方文档</a></p><p>这个配置就是dozer-[\w\d-.]+.jar里的类也使用RestartClassLoader加载器加载，这样就不会出现类型转换问题了。</p><blockquote><p> <em>注意：当然其实在生产环境我们是不建议使用spring-boot-devtools的。在运行完全打包的应用程序时会自动禁用，如果您的应用程序是从<code>java -jar</code>特殊的类加载器启动或启动的，那么它将被视为“生产应用程序”。如果这不适用（即，如果您从容器运行应用程序），请考虑排除devtools或设置<code>-Dspring.devtools.restart.enabled=false</code>系统属性。</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign配置易错点</title>
      <link href="2019/07/13/feign-pei-zhi-yi-cuo-dian/"/>
      <url>2019/07/13/feign-pei-zhi-yi-cuo-dian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在我们利用spring-cloud-openfeign的时候，不同的client可能需要一些自定义的配置，我们可以在配置文件中配置，也可以写相应的配置类。而写配置类有一个易掉的坑，接下来就来讲解一下这个坑以及解决方案！</p></blockquote><p>先来看一段常见的代码。</p><h3 id="一-代码"><a href="#一-代码" class="headerlink" title="一 代码"></a>一 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"${feign.name}"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"${feign.url}"</span><span class="token punctuation">,</span> configuration<span class="token operator">=</span><span class="token class-name">FooConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FooClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/users/{id}"</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**     * 注意：     * 1. 该类可以独立出去；     * 2. 该类上也可添加@Configuration声明是一个配置类；     * 配置类上也可添加@Configuration注解，声明这是一个配置类；     * 但此时千万别将该放置在主应用程序上下文@ComponentScan所扫描的包中，     * 否则，该配置将会被所有Feign Client共享，无法实现细粒度配置！     */</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">Contract</span> <span class="token function">feignContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">feign<span class="token punctuation">.</span></span>Contract<span class="token punctuation">.</span>Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> <span class="token class-name">BasicAuthRequestInterceptor</span> <span class="token function">basicAuthRequestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BasicAuthRequestInterceptor</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的配置是我从<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-openfeign/2.1.2.RELEASE/single/spring-cloud-openfeign.html#spring-cloud-feign-overriding-defaults">官网</a>直接copy下来的。这样写，产生的效果是什么？如果配置类在<code>@ComponentScan</code>扫描路径，则该配置默认会全局生效。所以如果不仔细看一下官方文档，很容易进坑，官方文档也给出了注意点：</p><blockquote><p>FooConfiguration does not need to be annotated with @Configuration. However, if it is, then take care to exclude it from any @ComponentScan that would otherwise include this configuration as it will become the default source for feign.Decoder, feign.Encoder, feign.Contract, etc., when specified. This can be avoided by putting it in a separate, non-overlapping package from any @ComponentScan or @SpringBootApplication, or it can be explicitly excluded in @ComponentScan.</p></blockquote><p><strong>为达到目的，可以直接去掉<code>FooConfiguration</code>类上的<code>@Configuration</code>注解。</strong></p><h3 id="二-总结"><a href="#二-总结" class="headerlink" title="二 总结"></a>二 总结</h3><ul><li>配置类上也可添加<code>@Configuraiton</code> 注解，声明这是一个配置类；但此时千万别将该放置在主应用程序上下文<code>@ComponentScan</code> 所扫描的包中，<strong>否则，该配置将会被所有Feign Client共享</strong>（相当于变成了通用配置，其实本质还是Spring父子上下文扫描包重叠导致的问题），无法实现细粒度配置！</li><li>可以直接采用配置文件的配置方式（Edgware开始提供）</li></ul>]]></content>
      
      
      <categories>
          
          <category> feign </category>
          
      </categories>
      
      
        <tags>
            
            <tag> feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Optional with Jackson</title>
      <link href="2019/07/06/using-optional-with-jackson/"/>
      <url>2019/07/06/using-optional-with-jackson/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在java8的时候，针对NOP异常，提供了Optional的解决方案。但是你了解Jackson序列化含Optional字段的POJO时会发生什么吗？在本文中，将介绍Optional类，然后解释在与Jackson一起使用时可能遇到的一些问题。接下来，我们将介绍一个解决方案，让Jackson将Optional视为普通的可空对象。</p></blockquote><h3 id="1-引入Jackson"><a href="#1-引入Jackson" class="headerlink" title="1 引入Jackson"></a>1 引入Jackson</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实体类"><a href="#2-实体类" class="headerlink" title="2 实体类"></a>2 实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nickName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNickName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nickName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNickName</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nickName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nickName <span class="token operator">=</span> nickName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>请记住，Optionals不应该用作属性，这里这样做是为了说明问题。</em></p><h3 id="3-序列化"><a href="#3-序列化" class="headerlink" title="3 序列化"></a>3 序列化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> mapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"SHIV"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setNickName</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token operator">:</span><span class="token string">"SHIV"</span><span class="token punctuation">,</span><span class="token string">"nickName"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"present"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然这可能看起来很奇怪，但是这就是实际的结果。在这种情况下，isPresent()是Optional类的公共getter 。这意味着它将使用值true或false进行序列化，具体取决于它是否为空。这是Jackson的默认序列化行为。但是通常这不是我们想要的结果，我们需要的是nickName的实际值”JACK”。</p><h3 id="4-反序列化"><a href="#4-反序列化" class="headerlink" title="4 反序列化"></a>4 反序列化</h3><p>让我们将上面的输出结果反序列化一下，看看结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"{\"username\":\"SHIV\",\"nickName\":{\"present\":true}}"</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发生异常，输出结果：</p><pre class="line-numbers language-none"><code class="language-none">com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "present" (class java.util.Optional), not marked as ignorable (0 known properties: ]) at [Source: (String)"{"username":"SHIV","nickName":{"present":true}}"; line: 1, column: 46] (through reference chain: cn.justme.lockdemo.User["nickName"]-&gt;java.util.Optional["present"])    at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>jackson无法识别present字段.<br>如果用<code>String json = "{\"username\":\"SHIV\",\"nickName\":\"JACK\"}";</code>来反序列化，依然不会成功。</p><h3 id="5-解决方案"><a href="#5-解决方案" class="headerlink" title="5 解决方案"></a>5 解决方案</h3><p>我们想要的是让Jackson将空的Optional视为null，并将当前的Optional视为表示其值的字段。幸运的是，这个问题已经解决了。Jackson有一组处理JDK 8数据类型的模块，包括Optional。</p><h4 id="5-1-maven依赖"><a href="#5-1-maven依赖" class="headerlink" title="5.1 maven依赖"></a>5.1 maven依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.datatype<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-datatype-jdk8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，我们需要做的就是使用ObjectMapper注册模块</p><pre class="line-numbers language-javas" data-language="javas"><code class="language-javas">ObjectMapper mapper = new ObjectMapper();mapper.registerModule(new Jdk8Module());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-2-序列化"><a href="#5-2-序列化" class="headerlink" title="5.2 序列化"></a>5.2 序列化</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Common1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> mapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Jdk8Module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"SHIV"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setNickName</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setNickName</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-none"><code class="language-none">{"username":"SHIV","nickName":"JACK"}{"username":"SHIV","nickName":null}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-4-反序列化"><a href="#5-4-反序列化" class="headerlink" title="5.4 反序列化"></a>5.4 反序列化</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> json1 <span class="token operator">=</span> <span class="token string">"{\"username\":\"SHIV\",\"nickName\":\"JACK\"}"</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> result1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json1<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span><span class="token function">getNickName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"JACK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> json2 <span class="token operator">=</span> <span class="token string">"{\"username\":\"SHIV\",\"nickName\":null}"</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> result2 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json2<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertThat</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span><span class="token function">getNickName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单元测试成功！</p>]]></content>
      
      
      <categories>
          
          <category> jackson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jackson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 2实现分布式锁</title>
      <link href="2019/06/29/spring-boot-2-shi-xian-fen-bu-shi-suo/"/>
      <url>2019/06/29/spring-boot-2-shi-xian-fen-bu-shi-suo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>随着应用的分布式部署，有很多新的问题需要考虑解决，分布式锁就是其中一个。目前我们的项目中分布式锁是采用zk来实现的。其实Spring早就提供了分布式锁的实现。早期，分布式锁的相关代码存在于Spring Cloud的子项目Spring Cloud Cluster中，后来被迁到Spring Integration中。</p></blockquote><p>先说一下Spring Integration，这是一个企业集成模式的实现,通俗地说，Spring Integration的定位是一个轻量级的ESB，尽管它做了很多ESB不做的事情，而且Spring Cloud Stream的底层也是Spring Integration。Spring Integration提供的全局锁目前为如下存储提供了实现：</p><ul><li>Gemfire</li><li>jdbc</li><li>Redis</li><li>Zookeeper  </li></ul><p>它们使用相同的API抽象，这意味着，不论使用哪种存储，你的编码体验是一样的，有一天想更换实现，只需要修改依赖和配置就可以了，无需修改代码。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><blockquote><p>以redis实现为例    </p></blockquote><p><strong>1 pom.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-integration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.integration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-integration-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2 application.properties</strong>  </p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">localhost</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3 LockConfiguration.java</strong>  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisLockRegistry</span> <span class="token function">redisLockRegistry</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisLockRegistry</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">,</span> <span class="token string">"spring-boot"</span><span class="token punctuation">,</span> <span class="token number">5000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4 TestController.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisLockRegistry</span> redisLockRegistry<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Lock</span> lock <span class="token operator">=</span> redisLockRegistry<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"b1 is : {}"</span><span class="token punctuation">,</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"b2 is : {}"</span><span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5 测试</strong><br>首先我们启动两个实例，一个在8080端口，一个在8088端口。<br>在idea里可以直接启动两个实例(默认不行)，第一个正常启动就OK，第二个需要进行一些设置，如图：<br><img src="1.jpg"><br><img src="2.jpg"><br>先请求 <a href="http://localhost:8080/test">http://localhost:8080/test</a><br>然后迅速请求 <a href="http://localhost:8088/test">http://localhost:8088/test</a><br>日志<br>端口8080的日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2019</span>-06-29 <span class="token number">18</span>:02:26.809  INFO <span class="token number">5487</span> --- <span class="token punctuation">[</span>nio-8080-exec-3<span class="token punctuation">]</span> c.j.lockdemo.controller.TestController   <span class="token builtin class-name">:</span> b1 is <span class="token builtin class-name">:</span> <span class="token boolean">true</span><span class="token number">2019</span>-06-29 <span class="token number">18</span>:02:31.821  INFO <span class="token number">5487</span> --- <span class="token punctuation">[</span>nio-8080-exec-3<span class="token punctuation">]</span> c.j.lockdemo.controller.TestController   <span class="token builtin class-name">:</span> b2 is <span class="token builtin class-name">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>端口8088的日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2019</span>-06-29 <span class="token number">18</span>:02:31.311  INFO <span class="token number">5503</span> --- <span class="token punctuation">[</span>io-8088-exec-10<span class="token punctuation">]</span> c.j.lockdemo.controller.TestController   <span class="token builtin class-name">:</span> b1 is <span class="token builtin class-name">:</span> <span class="token boolean">false</span><span class="token number">2019</span>-06-29 <span class="token number">18</span>:02:36.334  INFO <span class="token number">5503</span> --- <span class="token punctuation">[</span>io-8088-exec-10<span class="token punctuation">]</span> c.j.lockdemo.controller.TestController   <span class="token builtin class-name">:</span> b2 is <span class="token builtin class-name">:</span> <span class="token boolean">true</span><span class="token number">2019</span>-06-29 <span class="token number">18</span>:02:36.354 ERROR <span class="token number">5503</span> --- <span class="token punctuation">[</span>io-8088-exec-10<span class="token punctuation">]</span> o.a.c.c.C.<span class="token punctuation">[</span>.<span class="token punctuation">[</span>.<span class="token punctuation">[</span>/<span class="token punctuation">]</span>.<span class="token punctuation">[</span>dispatcherServlet<span class="token punctuation">]</span>    <span class="token builtin class-name">:</span> Servlet.service<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> servlet <span class="token punctuation">[</span>dispatcherServlet<span class="token punctuation">]</span> <span class="token keyword">in</span> context with path <span class="token punctuation">[</span><span class="token punctuation">]</span> threw exception <span class="token punctuation">[</span>Request processing failed<span class="token punctuation">;</span> nested exception is java.lang.IllegalStateException: You <span class="token keyword">do</span> not own lock at spring-boot:lock<span class="token punctuation">]</span> with root causejava.lang.IllegalStateException: You <span class="token keyword">do</span> not own lock at spring-boot:lockat org.springframework.integration.redis.util.RedisLockRegistry<span class="token variable">$RedisLock</span>.unlock<span class="token punctuation">(</span>RedisLockRegistry.java:305<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-integration-redis-5.1.6.RELEASE.jar:5.1.6.RELEASE<span class="token punctuation">]</span>at cn.justme.lockdemo.controller.TestController.test<span class="token punctuation">(</span>TestController.java:35<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>classes/:na<span class="token punctuation">]</span>at sun.reflect.NativeMethodAccessorImpl.invoke0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>na:1.8.0_181<span class="token punctuation">]</span>at sun.reflect.NativeMethodAccessorImpl.invoke<span class="token punctuation">(</span>NativeMethodAccessorImpl.java:62<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>na:1.8.0_181<span class="token punctuation">]</span>at sun.reflect.DelegatingMethodAccessorImpl.invoke<span class="token punctuation">(</span>DelegatingMethodAccessorImpl.java:43<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>na:1.8.0_181<span class="token punctuation">]</span>at java.lang.reflect.Method.invoke<span class="token punctuation">(</span>Method.java:498<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>na:1.8.0_181<span class="token punctuation">]</span>at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke<span class="token punctuation">(</span>InvocableHandlerMethod.java:190<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest<span class="token punctuation">(</span>InvocableHandlerMethod.java:138<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle<span class="token punctuation">(</span>ServletInvocableHandlerMethod.java:104<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod<span class="token punctuation">(</span>RequestMappingHandlerAdapter.java:892<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal<span class="token punctuation">(</span>RequestMappingHandlerAdapter.java:797<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle<span class="token punctuation">(</span>AbstractHandlerMethodAdapter.java:87<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.servlet.DispatcherServlet.doDispatch<span class="token punctuation">(</span>DispatcherServlet.java:1039<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.servlet.DispatcherServlet.doService<span class="token punctuation">(</span>DispatcherServlet.java:942<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.servlet.FrameworkServlet.processRequest<span class="token punctuation">(</span>FrameworkServlet.java:1005<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.servlet.FrameworkServlet.doGet<span class="token punctuation">(</span>FrameworkServlet.java:897<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at javax.servlet.http.HttpServlet.service<span class="token punctuation">(</span>HttpServlet.java:634<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.springframework.web.servlet.FrameworkServlet.service<span class="token punctuation">(</span>FrameworkServlet.java:882<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at javax.servlet.http.HttpServlet.service<span class="token punctuation">(</span>HttpServlet.java:741<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:231<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.doFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:166<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.tomcat.websocket.server.WsFilter.doFilter<span class="token punctuation">(</span>WsFilter.java:53<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-websocket-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:193<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.doFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:166<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.springframework.web.filter.RequestContextFilter.doFilterInternal<span class="token punctuation">(</span>RequestContextFilter.java:99<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.filter.OncePerRequestFilter.doFilter<span class="token punctuation">(</span>OncePerRequestFilter.java:109<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:193<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.doFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:166<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.springframework.web.filter.FormContentFilter.doFilterInternal<span class="token punctuation">(</span>FormContentFilter.java:92<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.filter.OncePerRequestFilter.doFilter<span class="token punctuation">(</span>OncePerRequestFilter.java:109<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:193<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.doFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:166<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal<span class="token punctuation">(</span>HiddenHttpMethodFilter.java:93<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.filter.OncePerRequestFilter.doFilter<span class="token punctuation">(</span>OncePerRequestFilter.java:109<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:193<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.doFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:166<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal<span class="token punctuation">(</span>CharacterEncodingFilter.java:200<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.springframework.web.filter.OncePerRequestFilter.doFilter<span class="token punctuation">(</span>OncePerRequestFilter.java:109<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:193<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.ApplicationFilterChain.doFilter<span class="token punctuation">(</span>ApplicationFilterChain.java:166<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.StandardWrapperValve.invoke<span class="token punctuation">(</span>StandardWrapperValve.java:202<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.StandardContextValve.invoke<span class="token punctuation">(</span>StandardContextValve.java:96<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.authenticator.AuthenticatorBase.invoke<span class="token punctuation">(</span>AuthenticatorBase.java:490<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.StandardHostValve.invoke<span class="token punctuation">(</span>StandardHostValve.java:139<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.valves.ErrorReportValve.invoke<span class="token punctuation">(</span>ErrorReportValve.java:92<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.core.StandardEngineValve.invoke<span class="token punctuation">(</span>StandardEngineValve.java:74<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.catalina.connector.CoyoteAdapter.service<span class="token punctuation">(</span>CoyoteAdapter.java:343<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.coyote.http11.Http11Processor.service<span class="token punctuation">(</span>Http11Processor.java:408<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.coyote.AbstractProcessorLight.process<span class="token punctuation">(</span>AbstractProcessorLight.java:66<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.coyote.AbstractProtocol<span class="token variable">$ConnectionHandler</span>.process<span class="token punctuation">(</span>AbstractProtocol.java:853<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.tomcat.util.net.NioEndpoint<span class="token variable">$SocketProcessor</span>.doRun<span class="token punctuation">(</span>NioEndpoint.java:1587<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at org.apache.tomcat.util.net.SocketProcessorBase.run<span class="token punctuation">(</span>SocketProcessorBase.java:49<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at java.util.concurrent.ThreadPoolExecutor.runWorker<span class="token punctuation">(</span>ThreadPoolExecutor.java:1149<span class="token punctuation">)</span> <span class="token punctuation">[</span>na:1.8.0_181<span class="token punctuation">]</span>at java.util.concurrent.ThreadPoolExecutor<span class="token variable">$Worker</span>.run<span class="token punctuation">(</span>ThreadPoolExecutor.java:624<span class="token punctuation">)</span> <span class="token punctuation">[</span>na:1.8.0_181<span class="token punctuation">]</span>at org.apache.tomcat.util.threads.TaskThread<span class="token variable">$WrappingRunnable</span>.run<span class="token punctuation">(</span>TaskThread.java:61<span class="token punctuation">)</span> <span class="token punctuation">[</span>tomcat-embed-core-9.0.21.jar:9.0.21<span class="token punctuation">]</span>at java.lang.Thread.run<span class="token punctuation">(</span>Thread.java:748<span class="token punctuation">)</span> <span class="token punctuation">[</span>na:1.8.0_181<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明第二个实例没有拿到锁，证明了分布式锁的存在。</p><p>参考：<br><a href="http://www.itmuch.com/spring-boot/global-lock/">Spring Boot 2实现分布式锁——这才是实现分布式锁的正确姿势</a></p>]]></content>
      
      
      <categories>
          
          <category> 分布式锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机-第三章导图</title>
      <link href="2019/06/22/shen-ru-li-jie-java-xu-ni-ji-di-san-zhang-dao-tu/"/>
      <url>2019/06/22/shen-ru-li-jie-java-xu-ni-ji-di-san-zhang-dao-tu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在看《深入理解Java虚拟机：JVM高级特性与最佳实践（第2版）》，看到第三章——垃圾收集器与内存分配策略，在看的时候整理了个思维导图，于是分享一下。<br><img src="%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea中解决maven包冲突的问题</title>
      <link href="2019/06/01/idea-zhong-jie-jue-maven-bao-chong-tu-de-wen-ti/"/>
      <url>2019/06/01/idea-zhong-jie-jue-maven-bao-chong-tu-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在我们使用maven进行jar包管理的时候，因为jar包传递依赖，可能会导致相同jar包的不同版本被依赖，由于包管理的依赖优先级会导致最终实际引入的jar包不是你最终需要的版本，由此可能出现类找不到的情况。针对这种jar包冲突的问题，可以依赖idea来很好的解决。</p></blockquote><p>这边展示两种解决问题的方法，一种利用idea自带的<code>show dependencies</code>,另一种是<code>maven helper</code>插件。</p><h2 id="一-show-dependencies"><a href="#一-show-dependencies" class="headerlink" title="一 show dependencies"></a>一 show dependencies</h2><p>打开pom.xml文件，如下图操作：</p><p><img src="Xnip2019-02-23_18-37-53.jpg"></p><p>选择<code>show dependencies</code>,则会展示项目的jar包依赖图：</p><p><img src="Xnip2019-02-23_18-40-21.jpg"></p><p>看图中出现的红线，则表明出现了jar包冲突（依赖太多确实观察不太爽）。找到有冲突的jar包，按Ctrl + F搜索，回车查看结果。例如：</p><p><img src="Xnip2019-02-23_18-37-52.jpg"></p><p>图中虚红线表示该依赖其实是指向了另外的一个版本；实红线，表示该依赖其实有多个不同的版本。此时，找到你想排出的版本，右键操作如下：</p><p><img src="Xnip2019-02-23_18-54-51.jpg"></p><p>此时pom.xml文件会自动更新如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zookeeper-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-maven-helper"><a href="#二-maven-helper" class="headerlink" title="二 maven helper"></a>二 maven helper</h2><p><code>maven helper</code>是一款idea插件，首先安装：</p><p><img src="Xnip2019-02-23_19-24-51.jpg"></p><p>安装好之后，打开pom.xml文件，可以在左下角看到如下标签：</p><p><img src="Xnip2019-02-23_19-26-59.jpg"></p><p>单击这个标签，出现如下图：</p><p><img src="Xnip2019-02-23_19-32-03.jpg"></p><p>选中右键就可以 Exclude 啦，就可以把不需要的版本的Exclude掉。</p><p><img src="Xnip2019-02-23_19-33-59.jpg"></p><h2 id="三-总结"><a href="#三-总结" class="headerlink" title="三 总结"></a>三 总结</h2><p>从使用上来看，还是使用<code>maven helper</code>更方便快捷，利用idea的<code>show dependencies</code>图太大，不好观察操作。<em>很可惜的就是如果用gradle来管理依赖的话，我并没有找到类似的插件。</em></p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用TaskDecorator复制MDC数据到@Async线程</title>
      <link href="2019/06/01/yong-taskdecorator-fu-zhi-mdc-shu-ju-dao-async-xian-cheng/"/>
      <url>2019/06/01/yong-taskdecorator-fu-zhi-mdc-shu-ju-dao-async-xian-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这主要涉及父子线程传值的问题，以及当配置@Async应用线程池时，如果得到MDC数据。参考<a href="https://moelholm.com/2017/07/24/spring-4-3-using-a-taskdecorator-to-copy-mdc-data-to-async-threads/">原文</a></p></blockquote><p>这篇博文主要展示如何从web线程里复制MDC数据到@Async注解的线程里，我们将会使用一个全新的 Spring Framework 4.3的特性: ThreadPoolTaskExecutor#setTaskDecorator() [set-task-decorator]. 如下图：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/Xnip2018-12-08_15-50-55.jpg"></p><p>注意到倒数第一行和第三行：在这个log级别上输出了[随机数]，倒数第三行是在一个web线程里发出的，倒数第一行是在一个用了@Async注解的异步线程里发出的。本质上，MDC数据从web线程中复制到了使用@Async注解的异步线程里中了。想参考原文中的代码，可以前往<a href="https://github.com/moelholm/smallexamples/tree/master/spring43-async-taskdecorator">github</a>。</p><h2 id="一-代码示例"><a href="#一-代码示例" class="headerlink" title="一. 代码示例"></a>一. 代码示例</h2><p>这个例子基于Spring Boot 2。日志API这里用的是SLF4J和Logback（用了Logger, LoggerFactory和MDC）。</p><p>1 pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2 application.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">logging.pattern.level</span><span class="token punctuation">:</span> <span class="token attr-value">"%X{mdcData}%5p"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3 MessageRestController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageRestController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MessageRepository</span> messageRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RestController in action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用异步方法</span>        <span class="token keyword">return</span> messageRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4 MessageRepository</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageRepository</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Repository in action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(MDC.get("mdcData"));</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> <span class="token string">"Spring Boot is awesome"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5 往web线程里设置MDC数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MdcFilter</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      MDC<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mdcData"</span><span class="token punctuation">,</span> <span class="token string">"[userId:Duke]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      MDC<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，我们可以在web线程里很轻松的拿到正确配置的MDC数据，但是当一个web请求进入了@Async注解的异步方法调用里，我们却不能跟踪它，MDC数据里的ThreadLocal数据不会简单的自动复制过来。</p><h2 id="二-解决方案"><a href="#二-解决方案" class="headerlink" title="二. 解决方案"></a>二. 解决方案</h2><h3 id="1-配置-Async线程池"><a href="#1-配置-Async线程池" class="headerlink" title="1 配置@Async线程池"></a>1 配置<code>@Async</code>线程池</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTaskdecoratorApplication</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncConfigurerSupport</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setTaskDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MdcTaskDecorator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AsyncTaskdecoratorApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承AsyncConfigurerSupport，我们可以自定义线程池，秘密在于executor.setTaskDecorator(new MdcTaskDecorator())，就是这行代码使我们可以自定义TaskDecorator。</p><h3 id="2-实现TaskDecorator"><a href="#2-实现TaskDecorator" class="headerlink" title="2 实现TaskDecorator"></a>2 实现<code>TaskDecorator</code></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MdcTaskDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">TaskDecorator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Runnable</span> <span class="token function">decorate</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// Right now: Web thread context !</span>            <span class="token comment">// Grab the current thread MDC data</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> copyOfContextMap <span class="token operator">=</span> MDC<span class="token punctuation">.</span><span class="token function">getCopyOfContextMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">// Right now: @Async thread context !</span>                <span class="token comment">// Restore the Web thread context's MDC data</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------ decorate ------ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                MDC<span class="token punctuation">.</span><span class="token function">setContextMap</span><span class="token punctuation">(</span>copyOfContextMap<span class="token punctuation">)</span><span class="token punctuation">;</span>                runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            MDC<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>decorate()</code>方法的参数是一个<code>Runnable</code>对象，返回结果也是另一个<code>Runnable</code>对象,这里，只是把原始的<code>Runnable</code>对象包装了一下，首先取得<code>MDC</code>数据，然后把它放到了委托的<code>run</code>方法里.</p><p>到此，MDC的数据就可以在@Async线程里面获取到了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从web线程里复制MDC数据到异步线程是如此的容易，这里展示的技巧不局限于复制MDC数据，你也可以使用它来复制其他ThreadLocal数据（MDC内部就是使用ThreadLocal），或者你可以使用TaskDecorator做一些其他完全不同的事情：记录日志，度量方法执行的时间，吞掉异常，退出JVM等。</p><p>参考：</p><ol><li><p><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.html#setTaskDecorator-org.springframework.core.task.TaskDecorator-">[set-task-decorator] ThreadPoolTaskExecutor#setTaskDecorator() (Spring’s JavaDoc)</a></p></li><li><p><a href="https://my.oschina.net/dxqr/blog/2981069">线程池中使用ThreadLocal方案</a></p></li></ol><blockquote><ol><li>使用ThreadLocal，不会在子线程中（包括new Thread和new线程池）获取到.</li><li>使用InheritableThreadLocal，可以在子线程中（包括new Thread和new线程池）获取到，但是如果用的是线程池，一般不会每次使用的时候重新创建，而他的赋值只能在首次创建的时候可以（Thread类的inheritableThreadLocals变量），后面线程池中的线程重复使用时，一开始赋值的那个变量将会一直存在.</li><li>在spring中，一般通过xml或者@Configuration来配置线程池，那么在项目启动的时候，线程池就完成创建了，根本没有机会给你设置变量，所以最佳实践就是，在线程池提交任务的时候（execute和submit方法），把当前线程的threadlocal变量保存起来，重写run方法或者call方法，并且在调用实际的run方法前，保存刚才保存起来的变量，一般也是放到threadlocal里面，这样在实际的run方法里，就可以方便的通过threadlocal获取到了。</li><li>实现原理如上述3所说，这篇翻译的文章中也是该原理，ali提供了一个<a href="https://github.com/whaon/transmittable-thread-local">transmittable-thread-local</a>，原理也是上面3所讲的。</li><li>值得说明的一下是，也可以参考<a href="https://spring.io/projects/spring-cloud-sleuth">Spring Cloud Sleuth</a>的实践，Spring Cloud Sleuth为Spring Cloud实施分布式跟踪解决方案.</li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDKMAN管理本地多版本jdk环境</title>
      <link href="2019/05/17/sdkman-guan-li-ben-di-duo-ban-ben-jdk-huan-jing/"/>
      <url>2019/05/17/sdkman-guan-li-ben-di-duo-ban-ben-jdk-huan-jing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SDKMAN可以管理多版本的开发工具环境，可以参考我的上一篇【<a href="/2019/05/13/sdkman-ruan-jian-kai-fa-gong-ju-guan-li-qi/" title="SDKMAN——软件开发工具管理器">SDKMAN——软件开发工具管理器</a>】入门，可能由于oracle的一些原因，发现SDKMAN默认提供的jdk版本没有出现oracle提供的版本了。但是我们可以从oracle官网下载对应的jdk版本，然后利用SDKMAN来管理自己本地安装的jdk版本，从而可以利用SDKMAN方便的切换jdk环境。</p></blockquote><p>首先SDKMAN不能直接安装在Windows上，需要bash环境，我使用的是win10提供的linux子系统来进行演示的，系统版本信息如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">***@DESKTOP-CNSRI37:~/jdk$ lsb_release -aNo LSB modules are available.Distributor ID: UbuntuDescription:    Ubuntu <span class="token number">18.04</span>.2 LTSRelease:        <span class="token number">18.04</span>Codename:       bionic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一-问题"><a href="#一-问题" class="headerlink" title="一 问题"></a>一 问题</h3><p>当我们用命令<code>sdk list java</code>查看可安装的jdk版本时，如下：</p><pre class="line-numbers language-none"><code class="language-none">================================================================================                      19.0.0-grl          11.0.2-zulufx     13.ea.20-open       10.0.2-zulu     12.0.1-zulu         10.0.2-open     12.0.1-librca       9.0.7-zulu     12.0.1-sapmchn      9.0.4-open     12.0.1-open         8.0.212-zulu     12.0.1.j9-adpt      8.0.212-amzn     12.0.1.hs-adpt      8.0.212.j9-adpt     11.0.3-sapmchn      8.0.212.hs-adpt     11.0.3-zulu         8.0.212-librca     11.0.3-amzn         8.0.202-zulufx     11.0.3.j9-adpt      7.0.222-zulu     11.0.3.hs-adpt      6.0.119-zulu     11.0.3-librca  1.0.0-rc-16-grl     11.0.2-open       1.0.0-rc-15-grl================================================================================<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现没有oracle提供的版本，但如果你想用oracle提供的版本又想使用SDKMAN进行管理，依然是可以的。SDKMAN提供了这样的操作方法，接下来就看一下具体的操作吧！</p><h3 id="二-操作"><a href="#二-操作" class="headerlink" title="二 操作"></a>二 操作</h3><h4 id="1-从oracle下载jdk"><a href="#1-从oracle下载jdk" class="headerlink" title="1. 从oracle下载jdk"></a>1. 从oracle下载jdk</h4><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">下载地址</a></p><p>我下载的两个版本：<code>jdk-11.0.3_linux-x64_bin.tar.gz</code>， 、<code>jdk-8u211-linux-x64.tar.gz</code></p><p>然后在linux目录解压一下：</p><p><code> sudo tar xvf jdk-8u211-linux-x64.tar.gz</code> , <code> sudo tar xvf jdk-11.0.3_linux-x64_bin.tar.gz</code></p><p>解压后：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">***@DESKTOP-CNSRI37:/usr/local/jdk$ <span class="token function">ls</span>jdk-11.0.3  jdk1.8.0_211<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-SDKMAN关联本地安装的jdk"><a href="#2-SDKMAN关联本地安装的jdk" class="headerlink" title="2. SDKMAN关联本地安装的jdk"></a>2. SDKMAN关联本地安装的jdk</h4><p>执行命令 <code>sdk install java java8 /usr/local/jdk/jdk1.8.0_211</code></p><p>执行命令<code>sdk list java</code>,查看：</p><pre class="line-numbers language-none"><code class="language-none">================================================================================Available Java Versions================================================================================   + java8               11.0.2-open         1.0.0-rc-15-grl     19.0.0-grl          11.0.2-zulufx     + java11     13.ea.20-open       10.0.2-zulu     12.0.1-zulu         10.0.2-open     12.0.1-librca       9.0.7-zulu     12.0.1-sapmchn      9.0.4-open     12.0.1-open         8.0.212-zulu     12.0.1.j9-adpt      8.0.212-amzn     12.0.1.hs-adpt      8.0.212.j9-adpt     11.0.3-sapmchn      8.0.212.hs-adpt     11.0.3-zulu         8.0.212-librca     11.0.3-amzn         8.0.202-zulufx     11.0.3.j9-adpt      7.0.222-zulu     11.0.3.hs-adpt      6.0.119-zulu     11.0.3-librca       1.0.0-rc-16-grl================================================================================+ - local version* - installed&gt; - currently in use================================================================================<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现多了<code>java8</code></p><p>执行命令<code>sdk use java java8</code>，然后选择使用的版本</p><p>执行命令<code>java -version</code>，效果:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">***@DESKTOP-CNSRI37:/usr/local/jdk$ java -versionjava version <span class="token string">"1.8.0_211"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_211-b12<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.211</span>-b12, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有生效，则执行一下<code>source ~/.bashrc </code>，使配置生效（更新环境变量）；</p><p>同样的操作关联本地的jdk-11.0.3版本。</p><h4 id="3-切换jdk版本"><a href="#3-切换jdk版本" class="headerlink" title="3. 切换jdk版本"></a>3. 切换jdk版本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">***@DESKTOP-CNSRI37:/usr/local/jdk$ sdk use java java11Using java version java11 <span class="token keyword">in</span> this shell.***@DESKTOP-CNSRI37:/usr/local/jdk$ java -versionjava version <span class="token string">"11.0.3"</span> <span class="token number">2019</span>-04-16 LTSJava<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token number">18.9</span> <span class="token punctuation">(</span>build <span class="token number">11.0</span>.3+12-LTS<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token number">18.9</span> <span class="token punctuation">(</span>build <span class="token number">11.0</span>.3+12-LTS, mixed mode<span class="token punctuation">)</span>***@DESKTOP-CNSRI37:/usr/local/jdk$***@DESKTOP-CNSRI37:/usr/local/jdk$***@DESKTOP-CNSRI37:/usr/local/jdk$ sdk use java java8Using java version java8 <span class="token keyword">in</span> this shell.***@DESKTOP-CNSRI37:/usr/local/jdk$ java -versionjava version <span class="token string">"1.8.0_211"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_211-b12<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.211</span>-b12, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三 总结"></a>三 总结</h3><p>通过上面操作，就可以很方便的切换我们的jdk环境了，除了jdk，其他的一些工具也可以进行类似的操作，如maven,gradle等。</p>]]></content>
      
      
      <categories>
          
          <category> SDKMAN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDKMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CompletableFuture 组合式异步编程</title>
      <link href="2019/05/13/completablefuture-zu-he-shi-yi-bu-bian-cheng/"/>
      <url>2019/05/13/completablefuture-zu-he-shi-yi-bu-bian-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候当你想批量调取第三方api获取数据，并将返回的信息聚集起来，如果我们用直接简单的循环调用，这个处理时间长不说，一个调用超时就会阻塞整个逻辑的处理。如果采用异步的方式调用，编程的成本就会增大，比如最终结果的收集，异常的处理等；在java8中，有提供更加简便的编程方式实现这种异步处理。</p></blockquote><p>首先，设置一个简单的场景吧：比如，我们现在有11个经纬度地址，需要获取他们对应的中文名称，下面就是实现的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplicationTests</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">messageConverters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用第三方api获取地址名称</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> latitude<span class="token punctuation">,</span> <span class="token class-name">String</span> longitude<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StopWatch</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sw<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://api.map.baidu.com/geocoder/v2/?location={1},{2}&amp;output=json&amp;pois=0&amp;ak=************************"</span><span class="token punctuation">,</span>                <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span><span class="token punctuation">;</span>        sw<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 记录执行线程以及耗时时间</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"getAddress: %s -&gt; 耗时: %s"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sw<span class="token punctuation">.</span><span class="token function">getTotalTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"formatted_address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cities <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"31.2363429624,121.4803295328"</span><span class="token punctuation">,</span>        <span class="token string">"39.9110666857,116.4136103013"</span><span class="token punctuation">,</span>        <span class="token string">"30.2799186759,120.1617445782"</span><span class="token punctuation">,</span>        <span class="token string">"31.8880209204,117.3066537271"</span><span class="token punctuation">,</span>        <span class="token string">"25.6122215609,100.2742019952"</span><span class="token punctuation">,</span>        <span class="token string">"26.8624428068,100.2335674911"</span><span class="token punctuation">,</span>        <span class="token string">"27.6958640000,111.7206640000"</span><span class="token punctuation">,</span>        <span class="token string">"31.2093160000,112.4105620000"</span><span class="token punctuation">,</span>        <span class="token string">"39.1731490000,117.2202970000"</span><span class="token punctuation">,</span>        <span class="token string">"34.5113900000,101.5563070000"</span><span class="token punctuation">,</span>        <span class="token string">"30.5984670000,114.3115860000"</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> times <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 调用20次，计算调用11个经纬度耗时时间</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token class-name">StopWatch</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sw<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 调用实现的方法，更改不同的方法，统计时间</span>                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token function">test1</span><span class="token punctuation">(</span>cities<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sw<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    times<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sw<span class="token punctuation">.</span><span class="token function">getTotalTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 耗时统计</span>        <span class="token class-name">LongSummaryStatistics</span> summaryStatistics <span class="token operator">=</span> times<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToLong</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token operator">::</span><span class="token function">longValue</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均耗时: "</span> <span class="token operator">+</span> summaryStatistics<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 方法一 普通循环调用</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> locations<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>locations<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>city <span class="token operator">-&gt;</span> city<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>city <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> city<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token function">getAddress</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// java8 Stream并行调用</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> locations<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>locations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>city <span class="token operator">-&gt;</span> city<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>city <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> city<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token function">getAddress</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// java8 CompletableFuture</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> locations<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>locations<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>city <span class="token operator">-&gt;</span> city<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>city <span class="token operator">-&gt;</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> city<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token function">getAddress</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> collect<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token operator">::</span><span class="token function">join</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，我简单的每个方法调用20次，统计一下时间，进行一下对比：</p><p><strong>方法一</strong></p><p>执行<code>test1()</code>时，控制台输出如下：</p><pre class="line-numbers language-none"><code class="language-none">[662, 564, 645, 552, 577, 562, 534, 1101, 549, 567, 546, 544, 545, 548, 557, 551, 609, 527, 562, 531][null, 北京市东城区正义路2号-10号楼-403号, 浙江省杭州市拱墅区莫干山路6, 安徽省合肥市瑶海区众兴路, 云南省大理白族自治州大理市第一大道, 云南省丽江市古城区玉雪大道149, 湖南省娄底市涟源市人民东路, 湖北省荆门市钟祥市, null, null, 湖北省武汉市江岸区沿江大道188号][396]平均耗时: LongSummaryStatistics{count=20, sum=11833, min=527, average=591.650000, max=1101}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>11个经纬度，平均耗时591.650000毫秒。</p><p><strong>方法二</strong></p><p>执行<code>test2()</code>时，控制台输出如下：</p><pre class="line-numbers language-none"><code class="language-none">...getAddress: Thread[ForkJoinPool.commonPool-worker-3,5,main] -&gt; 耗时: 32getAddress: Thread[ForkJoinPool.commonPool-worker-1,5,main] -&gt; 耗时: 29getAddress: Thread[ForkJoinPool.commonPool-worker-3,5,main] -&gt; 耗时: 25getAddress: Thread[ForkJoinPool.commonPool-worker-1,5,main] -&gt; 耗时: 25getAddress: Thread[ForkJoinPool.commonPool-worker-3,5,main] -&gt; 耗时: 25getAddress: Thread[ForkJoinPool.commonPool-worker-2,5,main] -&gt; 耗时: 233[277, 252, 143, 116, 160, 164, 119, 125, 125, 121, 125, 127, 121, 132, 128, 128, 118, 124, 113, 236][null, 北京市东城区正义路2号-10号楼-403号, 浙江省杭州市拱墅区莫干山路6, 安徽省合肥市瑶海区众兴路, 云南省大理白族自治州大理市第一大道, 云南省丽江市古城区玉雪大道149, 湖南省娄底市涟源市人民东路, 湖北省荆门市钟祥市, null, null, 湖北省武汉市江岸区沿江大道188号][396]平均耗时: LongSummaryStatistics{count=20, sum=2954, min=113, average=147.700000, max=277}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见，多个线程在执行调用，平均耗时147.700000毫秒。</p><p><strong>方法三</strong></p><p>执行<code>test3()</code>时，控制台输出如下：</p><pre class="line-numbers language-none"><code class="language-none">...getAddress: Thread[ForkJoinPool.commonPool-worker-1,5,main] -&gt; 耗时: 157getAddress: Thread[ForkJoinPool.commonPool-worker-2,5,main] -&gt; 耗时: 46getAddress: Thread[main,5,main] -&gt; 耗时: 53getAddress: Thread[ForkJoinPool.commonPool-worker-3,5,main] -&gt; 耗时: 51getAddress: Thread[ForkJoinPool.commonPool-worker-1,5,main] -&gt; 耗时: 51getAddress: Thread[ForkJoinPool.commonPool-worker-2,5,main] -&gt; 耗时: 56[280, 157, 164, 166, 209, 194, 164, 263, 233, 203, 158, 154, 162, 152, 167, 154, 149, 149, 155, 159][null, 北京市东城区正义路2号-10号楼-403号, 浙江省杭州市拱墅区莫干山路6, 安徽省合肥市瑶海区众兴路, 云南省大理白族自治州大理市第一大道, 云南省丽江市古城区玉雪大道149, 湖南省娄底市涟源市人民东路, 湖北省荆门市钟祥市, null, null, 湖北省武汉市江岸区沿江大道188号][396]平均耗时: LongSummaryStatistics{count=20, sum=3592, min=149, average=179.600000, max=280}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的多个线程在异步执行，平均耗时179.600000毫秒；</p><p>其实从效果上还看(这里运行次数较少，运行时有时候方法二好有时候方法三好)，方法二和方法三它们看起来不相伯仲，究其原因都一样:它们内部采用的是同样的通用线程池，默认都使用固定数目的线程，具体线程数取决于<code>Runtime.getRuntime().availableProcessors()</code>的返回值。尽然这样，方法二更简洁易懂，为什么还需要<code>CompletableFuture</code>呢？然而，<code>CompletableFuture</code>具有一定的优势，因为它允许你对执行器(Executor)进行配置，尤其是线程池的大小，让它以更适合应用需求的方式进行配置，满足程序的要求，而这是并行流API无法提供的。</p><p><code>CompletableFuture</code>中4个异步执行任务静态方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">asyncSupplyStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> supplier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">,</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asyncSupplyStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> supplier<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asyncRunStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> runnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">,</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asyncRunStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> runnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：《java8实战》</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> CompletableFuture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更好的调试 Java Stream</title>
      <link href="2019/05/13/geng-hao-de-diao-shi-java-stream/"/>
      <url>2019/05/13/geng-hao-de-diao-shi-java-stream/</url>
      
        <content type="html"><![CDATA[<blockquote><p>java8里新增的Stream API非常强大，能够开发出更加简洁易懂的代码，但是如果出现问题，往往也没那么好去调试。这里主要介绍使用idea的Stream debugger方法。</p></blockquote><p>举个简单的例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> item <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码想做的就是找出一组数据中的偶数，并把找出来的偶数扩大100倍。</p><p>如果我们想了解stream的流水线操作，每个操作后的结果是什么，我们像其他代码一样去用ide工具debug也不好使。在此我们可以想到用<code>peek()</code>去打印出每个操作后的结果，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> item <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">0022004400101000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样虽然能够达到目的，但是IntelliJ’s debugger 给我们更加形象化的表示：</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/Xnip2018-12-14_21-47-44.jpg"></p><p>怎么操作呢。</p><p><strong>第1步 想调用<code>stream debugger</code>的话，首先要在<code>Stream</code>定义处设置断点</strong></p><p><strong>第2步 以<code>debug</code>模式运行代码</strong></p><p><strong>第3步 当到达断点时，可以按指定的按钮来调用 Stream debugger，如下：</strong></p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/Xnip2018-12-14_21-54-17.jpg"></p><p>OK，大功告成。</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> idea </tag>
            
            <tag> java stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDKMAN——软件开发工具管理器</title>
      <link href="2019/05/13/sdkman-ruan-jian-kai-fa-gong-ju-guan-li-qi/"/>
      <url>2019/05/13/sdkman-ruan-jian-kai-fa-gong-ju-guan-li-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个工具是在大多数基于Unix的系统上管理多个软件开发工具包的并行版本的工具。它提供了一个方便的命令行接口(CLI)和API，用于安装、切换、删除和列出候选对象，它的前身是Groovy环境管理器GVM，其灵感来自Ruby社区广泛使用的非常有用的RVM和rbenv工具。</p></blockquote><h2 id="一-特点"><a href="#一-特点" class="headerlink" title="一. 特点"></a><strong>一. 特点</strong></h2><p><img src="WX20181020-004138@2x.png"></p><h2 id="二-安装"><a href="#二-安装" class="headerlink" title="二. 安装"></a><strong>二. 安装</strong></h2><ol><li><strong>针对类unix平台</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># first</span>$ <span class="token function">curl</span> -s <span class="token string">"https://get.sdkman.io"</span> <span class="token operator">|</span> <span class="token function">bash</span><span class="token comment"># next</span>$ <span class="token builtin class-name">source</span> <span class="token string">"<span class="token environment constant">$HOME</span>/.sdkman/bin/sdkman-init.sh"</span><span class="token comment"># lastly ensure that installation succeeded</span>$ sdk version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果安装成功，则终端显示：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">SDKMAN <span class="token number">5.7</span>.3+337<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>windows安装</strong></li></ol><p>请注意，由于SDKMAN是在bash中编写的，因此它需要一个bash环境。SDKMAN不能直接安装在Windows上，需要Cygwin或MSYS+MinGW。</p><p><a href="https://sdkman.io/install">参考官网说明</a></p><h2 id="三-卸载"><a href="#三-卸载" class="headerlink" title="三. 卸载"></a><strong>三. 卸载</strong></h2><p>使用命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tar</span> zcvf ~/sdkman-backup_<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F-%kh%M<span class="token variable">)</span></span>.tar.gz -C ~/ .sdkman$ <span class="token function">rm</span> -rf ~/.sdkman<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="四-使用"><a href="#四-使用" class="headerlink" title="四. 使用"></a><strong>四. 使用</strong></h2><blockquote><p>支持安装的开发工具包</p></blockquote><pre class="line-numbers language-none"><code class="language-none">Available SDKsAntAsciidoctorJBpipeCeylonCRaSHCUBA CLICXFGaidenGlideGradleGrailsGroovyGroovyServInfrastructorJavaJBakeKotlinkscriptLazybonesLeiningenMavenMicronautsbtScalaSparkSpring BootSshoogrVert.xVisualVM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>安装</strong></li></ol><ul><li>安装最近稳定版本，例如安装<code> Java JDK</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sdk <span class="token function">install</span> java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装特定版本</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sdk <span class="token function">install</span> java <span class="token number">10.0</span>.2-oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>版本可以通过 <code>sdk list java</code>获取</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sdk list java<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Available Java Versions<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>     <span class="token number">12</span>.ea.15-open     <span class="token number">11.0</span>.1-open     <span class="token number">10.0</span>.2-zulu     <span class="token number">10.0</span>.2-open     <span class="token number">10.0</span>.2-oracle     <span class="token number">9.0</span>.7-zulu     <span class="token number">9.0</span>.4-open     <span class="token number">8.0</span>.191-oracle     <span class="token number">8.0</span>.181-zulu     <span class="token number">7.0</span>.181-zulu     <span class="token number">1.0</span>.0-rc7-graal<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>+ - <span class="token builtin class-name">local</span> version * - installed<span class="token operator">&gt;</span> - currently <span class="token keyword">in</span> use<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：命令<code>sdk list</code>可以列出所有可以安装sdk</strong></p><ul><li>安装本地版本</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 官网栗子</span>$ sdk <span class="token function">install</span> groovy <span class="token number">3.0</span>.0-SNAPSHOT /path/to/groovy-3.0.0-SNAPSHOT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如，我本地已经安装了Java8版本，我可以这样操作(mac系统)：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sdk <span class="token function">install</span> java java8 /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看安装结果</span>sdk list java<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Available Java Versions<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>   + java8     <span class="token number">12</span>.ea.15-open     <span class="token number">11.0</span>.1-open     <span class="token number">10.0</span>.2-zulu     <span class="token number">10.0</span>.2-open <span class="token operator">&gt;</span> * <span class="token number">10.0</span>.2-oracle     <span class="token number">9.0</span>.7-zulu     <span class="token number">9.0</span>.4-open     <span class="token number">8.0</span>.191-oracle     <span class="token number">8.0</span>.181-zulu     <span class="token number">7.0</span>.181-zulu     <span class="token number">1.0</span>.0-rc7-graal<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>+ - <span class="token builtin class-name">local</span> version* - installed<span class="token operator">&gt;</span> - currently <span class="token keyword">in</span> use<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看版本</span>$ java -versionjava version <span class="token string">"10.0.2"</span> <span class="token number">2018</span>-07-17Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token number">18.3</span> <span class="token punctuation">(</span>build <span class="token number">10.0</span>.2+13<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token number">18.3</span> <span class="token punctuation">(</span>build <span class="token number">10.0</span>.2+13, mixed mode<span class="token punctuation">)</span>$ sdk use java java8Using java version java8 <span class="token keyword">in</span> this shell.$ java -versionjava version <span class="token string">"1.8.0_181"</span>Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_181-b13<span class="token punctuation">)</span>Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.181</span>-b13, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>移除安装的版本</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sdk uninstall java <span class="token number">10.0</span>.2-oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>选择版本</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 重要的是要意识到这只会切换当前shell的候选版本。要使此更改永久性，请使用默认命令。</span>sdk use java <span class="token number">8.0</span>.191-oracle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><strong>默认版本</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 这将确保所有后续shell都将从8.0.191-oracle版本开始使用。</span>sdk default java <span class="token number">8.0</span>.191-oracle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li><strong>More操作参考<a href="https://sdkman.io/">官网</a></strong></li></ol><h2 id="五-原理"><a href="#五-原理" class="headerlink" title="五. 原理"></a>五. <strong>原理</strong></h2><p>查看sdkman安装目录结构(默认在<code>~/.sdkman</code>下)</p><p><img src="Xnip2018-10-20_12-15-25.jpg"></p><p>sdkman采用一系列脚本来注册sdk相关命令，在系统中通过sdkman安装某candidate，它的安装主要依赖sdkman-install.sh（看上图）来实现的，依次下载了candidate的zip压缩包及安装脚本，再通过脚本来执行安装流程，本质上是与正常的unix安装流程是一样的。下载的组件分别至于archive及temp目录下，安装的组件在candidates目录下，可以看到默认的current为指向某一版本的软链接</p><p><img src="WX20181020-123559@2x.png"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">drwxr-xr-x  <span class="token number">11</span> ishiv  staff   352B <span class="token number">10</span> <span class="token number">20</span> <span class="token number">12</span>:33 <span class="token number">10.0</span>.2-oraclelrwxr-xr-x   <span class="token number">1</span> ishiv  staff    42B <span class="token number">10</span> <span class="token number">20</span> 03:34 current -<span class="token operator">&gt;</span> /Users/ishiv/.sdkman/candidates/java/java8lrwxr-xr-x   <span class="token number">1</span> ishiv  staff    64B <span class="token number">10</span> <span class="token number">20</span> 03:19 java8 -<span class="token operator">&gt;</span> /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看``.bash_profile<code>文件，</code>cat ~/.bash_profile `，可以看到追加了一些脚本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/mysql/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/Users/ishiv/software/apache-maven-3.5.4/bin<span class="token comment">#下面这一段是由于安装sdkman后自动追加的</span><span class="token comment">#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">SDKMAN_DIR</span><span class="token operator">=</span><span class="token string">"/Users/ishiv/.sdkman"</span><span class="token punctuation">[</span><span class="token punctuation">[</span> -s <span class="token string">"/Users/ishiv/.sdkman/bin/sdkman-init.sh"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">source</span> <span class="token string">"/Users/ishiv/.sdkman/bin/sdkman-init.sh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次启动shell环境，都会预先加载 .bash_profile 等文件中的环境，这样就可以直接使用~/.sdkman中的sdk环境了。</p>]]></content>
      
      
      <categories>
          
          <category> SDKMAN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDKMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloud Toolkit——高效开发、测试、诊断并部署应用插件</title>
      <link href="2019/05/08/cloud-toolkit-gao-xiao-kai-fa-ce-shi-zhen-duan-bing-bu-shu-ying-yong-cha-jian/"/>
      <url>2019/05/08/cloud-toolkit-gao-xiao-kai-fa-ce-shi-zhen-duan-bing-bu-shu-ying-yong-cha-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Alibaba Cloud Toolkit是一个面向 IntelliJ IDEA、Eclipse 和 Maven 平台的免费插件，旨在帮助开发者在本地开发平台（IDE）中更便捷的使用阿里云，从而高效地开发、测试、诊断并部署应用。 帮助开发者将本地应用程序一键部署到线下自有 VM，或阿里云 ECS、EDAS、Kubernetes 中去；并支持快速 SSH 登录到机器，高效执行终端命令和文件上传等</p></blockquote><p>该插件有<code>IntelliJ版</code>、<code>Eclipse版 </code> 和 <code>Maven版</code></p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/cloud%20toolkit01.jpg"></p><p>下面介绍几个好用的功能。首先我们在 <code>IntelliJ</code> 插件里搜索 <code>cloud toolkit</code>，如下，然后安装即可。</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/cloud%20toolkit05.jpg"></p><h2 id="内置终端-Terminal"><a href="#内置终端-Terminal" class="headerlink" title="内置终端 Terminal"></a>内置终端 Terminal</h2><blockquote><p>IDE 内，开发者可以直接通过内置的终端 Terminal，快速登录远程服务器；<strong>不仅仅用于阿里云服务器 ECS</strong>，所有支持标准 SSH 协议的机器，都可以</p></blockquote><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/cloud%20toolkit02.gif"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><blockquote><p>Cloud Toolkit 帮助开发者在 IDE 内，一键将<strong>本地</strong>或者<strong>远程 URL **文件上传到服务器指定目录下去，无需在各种 FTP、SCP 工具之间频繁切换。更为重要的是，文件上传完毕后，还支持</strong>命令执行**，比如：文件解压缩、程序启动等</p></blockquote><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/cloud%20toolkit03.gif"></p><h2 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h2><blockquote><p>Cloud Toolkit 帮助开发者将本地应用程序一键部署到线下自有 VM，或阿里云 ECS、EDAS 和 Kubernetes 中去。</p></blockquote><p>例如：部署到 ECS</p><p><img src="./cloud%20toolkit04.gif" alt="cloud toolkit04"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>更多详细的操作，可以访问<a href="https://www.aliyun.com/product/cloudtoolkit">官方网站</a>，里面还有对应的视频操作可以参照。</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL简单前后端Demo</title>
      <link href="2019/05/07/graphql-jian-dan-qian-hou-duan-demo/"/>
      <url>2019/05/07/graphql-jian-dan-qian-hou-duan-demo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前组内就有说过<code>graphql</code>,在做影像字段配置的时候，当时就提过使用<code>graphql</code>来实现，但是综合考虑，并没有采用。所以趁着有空，自己写一个<code>demo</code>体验以下!</p></blockquote><h2 id="一-什么是graphql"><a href="#一-什么是graphql" class="headerlink" title="一 什么是graphql"></a>一 什么是graphql</h2><p>借用官网的话——一种用于 API 的查询语言。</p><blockquote><p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p></blockquote><p>一个 GraphQL 服务是通过定义类型和类型上的字段来创建的，然后给每个类型上的每个字段<strong>提供解析函数</strong>。为每一个字段都提供一个解析函数，听起来工作量挺大，其实已经有一些很好的工具会帮我们自动解析简单字段类型！</p><p>接下来直接上例子~</p><h2 id="二-后台服务-springboot-graghql"><a href="#二-后台服务-springboot-graghql" class="headerlink" title="二 后台服务 springboot + graghql"></a>二 后台服务 springboot + graghql</h2><p><strong>1 pom.xml</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- graphql相关 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.graphql-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>graphql-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- GraphiQL tool for schema introspection and query debugging   能提供一个/graphiql页面，提供查询，方面测试--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.graphql-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>graphiql-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 能够从GraphQL的模式定义*.graphqls文件构建出对应的Java的POJO类型对象.会将类路径中任何名为*.graphqls的文件用于提供模式定义 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.graphql-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>graphql-java-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2 demoapi.graphqls</strong></p><p>在类路径下新建demoapi.graphqls文件，提供schema定义，graphql-java-tools会负责解析。</p><pre class="line-numbers language-none"><code class="language-none">type Query {    school(id: ID): School    student(id: ID): Student}type School {    id: Int    name: String    ranking: Int}type Student {    id: Int    name: String    age: Int    classId: Int}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3 获取数据</strong></p><blockquote><p>需要实现GraphQLQueryResolver接口</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Query</span> <span class="token keyword">implements</span> <span class="token class-name">GraphQLQueryResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SchoolMapper</span> schoolMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StudentMapper</span> studentMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">School</span> <span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> schoolMapper<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> studentMapper<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为将<code>graphql-spring-boot-starter</code>作为依赖项添加到引导应用程序，并且应用程序中有GraphQLSchema bean，则可以在/graphql上访问servlet。</p><p><strong>4 启动程序</strong></p><p>启动后台，访问<code>http://localhost:8080/graphiql</code>，查询接口：</p><p><img src="./graphql01.jpg" alt="graphql01"></p><p><img src="./graphql02.jpg" alt="graphql02"></p><p>如图，后台接口不做更改，前端可以根据自己需求获取自己需要的数据，而且返回的数据结构跟你的请求结构相似！<strong>这个页面工具对能询到哪些字段信息有很好的提示功能。</strong></p><p>当然，对于构建后台api有多种方式，如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>    <span class="token class-name">GraphQLSchema</span> <span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">GraphQLSchema</span><span class="token punctuation">.</span><span class="token function">newSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">GraphQLObjectType</span><span class="token punctuation">.</span><span class="token function">newObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> field                                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">Scalars<span class="token punctuation">.</span>GraphQLString</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">dataFetcher</span><span class="token punctuation">(</span>environment <span class="token operator">-&gt;</span> <span class="token string">"response"</span><span class="token punctuation">)</span>                        <span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式，需要我们针对每一个字段提供一个解析函数，如上面的<code>dataFetcher</code>.这对于一些字段很多，返回字段名称很java对象的字段名称一致的，这样难免很乏所。对于这种情况，第一种方式——利用<code>graphql-java-tools</code>还是更加便捷一些。</p><p>好了，后端接口就写到这块，前端我们应该发送请求过来了？</p><p>首先我们可以看一下，上面的请求页面——<code>Graphiql</code>是怎么发送请求的，打开chrome的调试工具：</p><p><img src="./graphql03.jpg" alt="graphql03"></p><p>发现，是post请求，我们的请求参数如上图所示。所以发到后台的数据格式有一定的要求。比较庆幸的是，有一些很优秀的前端工具帮我做了这些，比如：<code>apollo-client</code>, <code>graphql.js</code>等，这里我使用<code>graphql.js</code>，因为它更轻量级。</p><h2 id="三-web页面"><a href="#三-web页面" class="headerlink" title="三 web页面"></a>三 web页面</h2><p>前端搭建一个简单的vue项目：</p><p>安装<code>graphql.js</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> graphql.js --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了方便在vue中使用，做下列操作：</p><p>1 创建<code>GraphQLProvider.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> graphql <span class="token keyword">from</span> <span class="token string">'graphql.js'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">install</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_graph <span class="token operator">=</span> <span class="token function">graphql</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'$graph'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_graph      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2 在<code>main.js</code>中引入</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> GraphQLProvider <span class="token keyword">from</span> <span class="token string">'./util/GraphQLProvider'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>GraphQLProvider<span class="token punctuation">,</span> <span class="token string">'http://localhost:8080/graphql'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// method: 'POST', 默认就是post</span>  alwaysAutodeclare<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  asJSON<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  debug<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  headers<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// headers...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以在页面使用<code>this.$graph</code>去使用了。实际操作：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        school(id: 1) {          name          id        }      </span><span class="token template-punctuation string">`</span></span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$graph<span class="token punctuation">.</span>query<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> response      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ok，刷新页面：</p><p><img src="./graphql04.jpg" alt="graphql04"></p><p>到此，我们可以改变变量param请求参数，就可以获取自己想要的信息了。这里这是一个简单的演示，关于更多的信息，可以参考下面。</p><p><a href="https://github.com/justsme/graphql-simple-demo.git">代码示例GitHub</a><br><strong>更多信息</strong></p><ol><li><a href="http://graphql.cn/">Graphql官网</a></li><li><a href="https://github.com/f/graphql.js">graphql.js</a></li><li><a href="https://github.com/apollographql/apollo-client">apollo-client</a></li><li><a href="https://github.com/graphql-java-kickstart/graphql-spring-boot">graphql-spring-boot</a></li><li><a href="https://github.com/graphql-java/graphql-java">graphql-java</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> GraphQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> GraphQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jackson Annotations(二)</title>
      <link href="2019/05/05/jackson-annotations-er/"/>
      <url>2019/05/05/jackson-annotations-er/</url>
      
        <content type="html"><![CDATA[<blockquote><p>接着上一篇【<a href="/2019/04/27/jackson-annotations-yi/" title="Jackson Annotations(一)">Jackson Annotations(一)</a>】,接着再介绍Jackson Property Inclusion Annotations和一些更加普遍的注解。为了方便，这里面很多直接用了public属性。  </p></blockquote><h2 id="Jackson-Property-Inclusion-Annotations"><a href="#Jackson-Property-Inclusion-Annotations" class="headerlink" title="Jackson Property Inclusion Annotations"></a>Jackson Property Inclusion Annotations</h2><h3 id="JsonIgnoreProperties"><a href="#JsonIgnoreProperties" class="headerlink" title="@JsonIgnoreProperties"></a>@JsonIgnoreProperties</h3><p><code>@JsonIgnoreProperties</code> 标识<code>jackson</code>序列化或反序列化将忽略的属性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonIgnoreProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"id"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanWithIgnore</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BeanWithIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">BeanWithIgnore</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"BeanWithIgnore{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonIgnoreProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">BeanWithIgnore</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWithIgnore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"My bean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"My bean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">not</span><span class="token punctuation">(</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">{"name":"My bean"}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反序列化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonIgnoreProperties1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"{\"id\": 1, \"name\":\"My bean\"}"</span><span class="token punctuation">;</span>        <span class="token class-name">BeanWithIgnore</span> beanWithIgnore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readerFor</span><span class="token punctuation">(</span><span class="token class-name">BeanWithIgnore</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanWithIgnore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">BeanWithIgnore{id=0, name='null'}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="@JsonIgnore"></a>@JsonIgnore</h3><p>标明的field, getter/setter method or Creator parameter等在序列化或者发序列化时将被忽略。<br>将上面例子的实体修改一下用<code>@JsonIgnore</code>，测试代码不变，可以得到相同的结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@JsonIgnoreProperties({ "id" })</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanWithIgnore</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JsonIgnore</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BeanWithIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">BeanWithIgnore</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"BeanWithIgnore{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JsonIgnoreType"><a href="#JsonIgnoreType" class="headerlink" title="@JsonIgnoreType"></a>@JsonIgnoreType</h3><p><code>@JsonIgnoreType</code> 标识<code>jackson</code>序列化或反序列化将忽略某些类型的属性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Name</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Name</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JsonIgnoreType</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonIgnoreType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span><span class="token punctuation">,</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        <span class="token class-name">Teacher<span class="token punctuation">.</span>Name</span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher<span class="token punctuation">.</span>Name</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Teacher</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JsonInclude"><a href="#JsonInclude" class="headerlink" title="@JsonInclude"></a>@JsonInclude</h3><p>使用<code>@JsonInclude</code>注解可以控制field, method or constructor parameter的<strong>序列化</strong>。例如下面，我们排出序列化时的<code>null</code>值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span><span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span>NON_NULL<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IncludeBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">IncludeBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">IncludeBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonInclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">IncludeBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IncludeBean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到<code>name</code>属性没有被序列化.</p><h3 id="JsonAutoDetect"><a href="#JsonAutoDetect" class="headerlink" title="@JsonAutoDetect"></a>@JsonAutoDetect</h3><p>修改属性自动检测<br>默认的Jackson属性检测规则将找到：</p><ul><li>所有的<code>public</code>类型的属性</li><li>所有的<code>public</code>类型的<code>get</code>方法</li><li>所有的<code>set</code>方法（无论方法的可见性）</li></ul><p>如果默认规则不能满足需求，可以用<code>@JsonAutoDetect</code>注解来改变。</p><ol><li>如果想检测所有属性，可以<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonAutoDetect</span><span class="token punctuation">(</span>fieldVisibility<span class="token operator">=</span><span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POJOWithFields</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>如果想禁止检测所有属性<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonAutoDetect</span><span class="token punctuation">(</span>fieldVisibility<span class="token operator">=</span><span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POJOWithNoFields</span> <span class="token punctuation">{</span>  <span class="token comment">// 该属性将不被包含，除非有getValue()方法</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理多态类型"><a href="#处理多态类型" class="headerlink" title="处理多态类型"></a>处理多态类型</h2></li></ol><h3 id="JsonTypeInfo-JsonSubTypes-JsonTypeName"><a href="#JsonTypeInfo-JsonSubTypes-JsonTypeName" class="headerlink" title="@JsonTypeInfo,@JsonSubTypes ,@JsonTypeName"></a>@JsonTypeInfo,<em>@JsonSubTypes</em> ,@JsonTypeName</h3><p>如果需要读取和写入具有多个可能子类型的对象的值（即表现出多态性的对象），则可能需要启用包含类型信息。这是必需的，以便Jackson在反序列化时读取正确的对象类型（将JSON读入对象）。这可以通过<code>@JsonTypeInfo</code>在“基类”上添加注释来完成，更详细的信息，可以参考文章下面的链接。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zoo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Animal</span> animal<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Zoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Zoo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Animal</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>animal <span class="token operator">=</span> animal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JsonTypeInfo</span><span class="token punctuation">(</span>use <span class="token operator">=</span> <span class="token class-name">JsonTypeInfo<span class="token punctuation">.</span>Id</span><span class="token punctuation">.</span>NAME<span class="token punctuation">,</span> include <span class="token operator">=</span> <span class="token class-name">JsonTypeInfo<span class="token punctuation">.</span>As</span><span class="token punctuation">.</span>PROPERTY<span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"type"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonSubTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token annotation punctuation">@JsonSubTypes.Type</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@JsonSubTypes.Type</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> barkVolume<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> likesCream<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> lives<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingPolymorphic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">Zoo<span class="token punctuation">.</span>Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zoo<span class="token punctuation">.</span>Dog</span><span class="token punctuation">(</span><span class="token string">"lacy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Zoo</span> zoo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zoo</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>zoo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"animal"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"dog"</span><span class="token punctuation">,</span>        <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"lacy"</span><span class="token punctuation">,</span>        <span class="token string">"barkVolume"</span><span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反序列化测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenDeserializingPolymorphic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"{\"animal\":{\"name\":\"lacy\",\"type\":\"cat\"}}"</span><span class="token punctuation">;</span>        <span class="token class-name">Zoo</span> zoo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readerFor</span><span class="token punctuation">(</span><span class="token class-name">Zoo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"lacy"</span><span class="token punctuation">,</span> zoo<span class="token punctuation">.</span>animal<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Zoo<span class="token punctuation">.</span>Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> zoo<span class="token punctuation">.</span>animal<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该测试会success.</p><h2 id="更普遍使用的注解"><a href="#更普遍使用的注解" class="headerlink" title="更普遍使用的注解"></a>更普遍使用的注解</h2><h3 id="JsonProperty"><a href="#JsonProperty" class="headerlink" title="@JsonProperty"></a>@JsonProperty</h3><p>作用在字段或方法上，用来对属性的序列化/反序列化，可以用来提供对属性名称重命名，处理非标准的<code>Getter</code>和<code>Setter</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonPropertyBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">JsonPropertyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">JsonPropertyBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token comment">//    @JsonSetter("name")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTheName</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token comment">//    @JsonGetter("name")</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTheName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenUsingJsonProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">JsonPropertyBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonPropertyBean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"My bean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// {"id":1,"name":"My bean"}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JsonPropertyBean</span> resultBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readerFor</span><span class="token punctuation">(</span><span class="token class-name">JsonPropertyBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"My bean"</span><span class="token punctuation">,</span> resultBean<span class="token punctuation">.</span><span class="token function">getTheName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JsonFormat"><a href="#JsonFormat" class="headerlink" title="@JsonFormat"></a>@JsonFormat</h3><p>当序列化时指定<code>Date/Time</code>的格式化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">,</span> timezone<span class="token operator">=</span><span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DateFormatBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">DateFormatBean</span><span class="token punctuation">(</span><span class="token class-name">Date</span> birth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birth <span class="token operator">=</span> birth<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">DateFormatBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateFormatBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果（如果不加该注解，默认输出毫秒时间戳），</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span><span class="token string">"birth"</span><span class="token operator">:</span><span class="token string">"2019-04-28 11:01:04"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JsonUnwrapped"><a href="#JsonUnwrapped" class="headerlink" title="@JsonUnwrapped"></a>@JsonUnwrapped</h3><p><code>@JsonUnwrapped</code>定义了序列化/反序列化时应解包/展平的值。看下面的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnwrappedUser</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonUnwrapped</span>    <span class="token keyword">public</span> <span class="token class-name">Name</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UnwrappedUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">UnwrappedUser</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Name</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonUnwrapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span><span class="token punctuation">,</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        <span class="token class-name">UnwrappedUser<span class="token punctuation">.</span>Name</span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnwrappedUser<span class="token punctuation">.</span>Name</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UnwrappedUser</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnwrappedUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">not</span><span class="token punctuation">(</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果，静态内部类的字段和其他字段一起平铺展开：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"firstName"</span><span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>    <span class="token string">"lastName"</span><span class="token operator">:</span><span class="token string">"Doe"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JsonView"><a href="#JsonView" class="headerlink" title="@JsonView"></a>@JsonView</h3><p>@JsonView可以用来指定序列化/反序列化包含的属性，下面，看一下具体的例子。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Views</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Public</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Internal</span> <span class="token keyword">extends</span> <span class="token class-name">Public</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JsonView</span><span class="token punctuation">(</span><span class="token class-name">Views<span class="token punctuation">.</span>Public</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonView</span><span class="token punctuation">(</span><span class="token class-name">Views<span class="token punctuation">.</span>Public</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> itemName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonView</span><span class="token punctuation">(</span><span class="token class-name">Views<span class="token punctuation">.</span>Internal</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> ownerName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> itemName<span class="token punctuation">,</span> <span class="token class-name">String</span> ownerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>itemName <span class="token operator">=</span> itemName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ownerName <span class="token operator">=</span> ownerName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getItemName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> itemName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOwnerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ownerName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonView_thenCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">Item</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"book"</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writerWithView</span><span class="token punctuation">(</span><span class="token class-name">Views<span class="token punctuation">.</span>Public</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writerWithView</span><span class="token punctuation">(</span><span class="token class-name">Views<span class="token punctuation">.</span>Internal</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    result打印结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"id"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">"itemName"</span><span class="token operator">:</span><span class="token string">"book"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>result1j打印结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"id"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">"itemName"</span><span class="token operator">:</span><span class="token string">"book"</span><span class="token punctuation">,</span>    <span class="token string">"ownerName"</span><span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JsonManagedReference，-JsonBackReference"><a href="#JsonManagedReference，-JsonBackReference" class="headerlink" title="@JsonManagedReference，@ JsonBackReference"></a>@JsonManagedReference，@ JsonBackReference</h3><p>@JsonManagedReference和@JsonBackReference注释可以处理父/子关系和解决循环问题。这两个注解在使用的时候，@JsonBackReference标注的属性不会被序列化，从而解决循环引用无法序列化问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemWithRef</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> itemName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonManagedReference</span>    <span class="token keyword">public</span> <span class="token class-name">UserWithRef</span> owner<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ItemWithRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ItemWithRef</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> itemName<span class="token punctuation">,</span> <span class="token class-name">UserWithRef</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>itemName <span class="token operator">=</span> itemName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserWithRef</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonBackReference</span>    <span class="token keyword">public</span> <span class="token class-name">ItemWithRef</span> item<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserWithRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">UserWithRef</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJacksonReferenceAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">UserWithRef</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserWithRef</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ItemWithRef</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemWithRef</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"book"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>              <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"id"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">"itemName"</span><span class="token operator">:</span><span class="token string">"book"</span><span class="token punctuation">,</span>    <span class="token string">"owner"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"John"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JsonIdentityInfo"><a href="#JsonIdentityInfo" class="headerlink" title="@JsonIdentityInfo"></a>@JsonIdentityInfo</h3><p>使用这个注解也可以用来解决循环引用问题，不像前两个注解那用序列化时忽略某个属性。看下面的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonIdentityInfo</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token class-name">ObjectIdGenerators<span class="token punctuation">.</span>PropertyGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemWithIdentity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> itemName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserWithIdentity</span> owner<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ItemWithIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ItemWithIdentity</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> itemName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">UserWithIdentity</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>itemName <span class="token operator">=</span> itemName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@JsonIdentityInfo</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token class-name">ObjectIdGenerators<span class="token punctuation">.</span>UUIDGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserWithIdentity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ItemWithIdentity</span> item<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserWithIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">UserWithIdentity</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonIdentityInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">UserWithIdentity</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserWithIdentity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ItemWithIdentity</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemWithIdentity</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"book"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"id"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">"itemName"</span><span class="token operator">:</span><span class="token string">"book"</span><span class="token punctuation">,</span>    <span class="token string">"owner"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token string">"@id"</span><span class="token operator">:</span><span class="token string">"82d8a603-a4e0-4dd2-b3e5-c2207529c59a"</span><span class="token punctuation">,</span>        <span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>        <span class="token string">"item"</span><span class="token operator">:</span><span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/FasterXML/jackson-annotations">参考:github</a><br><a href="https://www.baeldung.com/jackson-annotations">参考:Jackson Annotation Examples</a></p>]]></content>
      
      
      <categories>
          
          <category> jackson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jackson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jackson Annotations(一)</title>
      <link href="2019/04/27/jackson-annotations-yi/"/>
      <url>2019/04/27/jackson-annotations-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这周看了一篇<code>Jackson JSON Tutorial</code>，觉得很不错，自己也写代码运行学习了一下，做个记录。那个网站是个英文网站，文章结尾我附了地址，想看原版英文的同学可以自己进去学习。下面的内容就是记录其中的一些内容。我所用的Jackson版本为2.9.8。内容有点多，分两次记录。这篇主要介绍一些序列化注解和反序列化注解，了解他们的作用。下一篇再介绍Jackson Property Inclusion Annotations和一些更加普遍的注解。</p></blockquote><p>我是直接建了一个<code>springboot</code>项目，直接在里面写的测试。项目的pom.xml.</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.justme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>jackson-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>jackson</code>的版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> +- org.springframework.boot:spring-boot-starter-web:jar:2.1.4.RELEASE:compile<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  +- org.springframework.boot:spring-boot-starter-json:jar:2.1.4.RELEASE:compile<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  <span class="token operator">|</span>  +- com.fasterxml.jackson.core:jackson-databind:jar:2.9.8:compile<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.0:compile<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token punctuation">\</span>- com.fasterxml.jackson.core:jackson-core:jar:2.9.8:compile<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  <span class="token operator">|</span>  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.9.8:compile<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  <span class="token operator">|</span>  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.9.8:compile<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token punctuation">\</span>- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.9.8:compile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一-Jackson-Serialization-Annotations"><a href="#一-Jackson-Serialization-Annotations" class="headerlink" title="一. Jackson Serialization Annotations"></a>一. Jackson Serialization Annotations</h2><p>首先我们看一下序列化注解。</p><h3 id="1-1-JsonAnyGetter"><a href="#1-1-JsonAnyGetter" class="headerlink" title="1.1 @JsonAnyGetter"></a>1.1 <code>@JsonAnyGetter</code></h3><p>该注解允许我们灵活的将<code>Map</code>的字段作为标准的属性，如下例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JsonAnyGetter</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSerializingUsingJsonAnyGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"attr1"</span><span class="token punctuation">,</span> <span class="token string">"val1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"attr2"</span><span class="token punctuation">,</span> <span class="token string">"val2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果(经过格式化)：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span>    <span class="token string">"attr2"</span><span class="token operator">:</span><span class="token string">"val2"</span><span class="token punctuation">,</span>    <span class="token string">"attr1"</span><span class="token operator">:</span><span class="token string">"val1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不加<code>@JsonAnySetter</code>,结果为：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span>    <span class="token string">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token string">"attr2"</span><span class="token operator">:</span><span class="token string">"val2"</span><span class="token punctuation">,</span>        <span class="token string">"attr1"</span><span class="token operator">:</span><span class="token string">"val1"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-JsonGetter"><a href="#1-2-JsonGetter" class="headerlink" title="1.2 @JsonGetter"></a>1.2 <code>@JsonGetter</code></h3><p><code>@JsonGetter</code>可替代<code>@JsonProperty</code>标记一个方法作为<code>Getter</code>方法，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonGetter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTheName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">MyBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"My bean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"My bean"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-JsonPropertyOrder"><a href="#1-3-JsonPropertyOrder" class="headerlink" title="1.3 @JsonPropertyOrder"></a>1.3 <code>@JsonPropertyOrder</code></h3><p>该注解可以用来指定序列化时属性的顺序，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonPropertyOrder</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"id"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonGetter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTheName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">MyBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"My bean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"My bean"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-JsonRawValue"><a href="#1-4-JsonRawValue" class="headerlink" title="1.4 @JsonRawValue"></a>1.4 <code>@JsonRawValue</code></h3><p>该注解可以让jackson准确的序列化一个属性。添加该注解的属性或者方法应按原样包含属性的文本字符串值进行序列化，而不引用字符。这对于在JSON中插入已序列化的值或将javascript函数定义从服务器传递到javascript client非常有用。如下，对比一下添加和不添加该注解序列化的情况：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RawBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonRawValue</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> json<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RawBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>json <span class="token operator">=</span> json<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonRawValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">RawBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RawBean</span><span class="token punctuation">(</span><span class="token string">"My bean"</span><span class="token punctuation">,</span> <span class="token string">"{\"attr\":false}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"My bean"</span><span class="token punctuation">,</span>    <span class="token string">"json"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token string">"attr"</span><span class="token operator">:</span><span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不加注解的情况：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"My bean"</span><span class="token punctuation">,</span><span class="token string">"json"</span><span class="token operator">:</span><span class="token string">"{\"attr\":false}"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-JsonValue"><a href="#1-5-JsonValue" class="headerlink" title="1.5 @JsonValue"></a>1.5 <code>@JsonValue</code></h3><p>用以替代缺省的方法，由该方法来完成json的字符输出。例如，修改上面的<code>RawBean</code>,</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RawBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonRawValue</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> json<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RawBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>json <span class="token operator">=</span> json<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@JsonValue</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"JsonValue"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">"JsonValue"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-6-JsonRootName"><a href="#1-6-JsonRootName" class="headerlink" title="1.6 @JsonRootName"></a>1.6 <code>@JsonRootName</code></h3><p>直接对比一下效果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonRootName</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserWithRoot</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">UserWithRoot</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonRootName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">UserWithRoot</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserWithRoot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这个需要添加，否则@JsonRootName(value = "user")不会起作用</span>        mapper<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token class-name">SerializationFeature</span><span class="token punctuation">.</span>WRAP_ROOT_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"user"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"John"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不添加该注解,且注释掉 // mapper.enable(SerializationFeature.WRAP_ROOT_VALUE);，则输出结果</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-JsonSerialize"><a href="#1-7-JsonSerialize" class="headerlink" title="1.7 @JsonSerialize"></a>1.7 <code>@JsonSerialize</code></h3><p>自定义序列化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">CustomDateSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSerializingUsingJsonSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span><span class="token punctuation">,</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"shi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setBirth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"shi"</span><span class="token punctuation">,</span><span class="token string">"birth"</span><span class="token operator">:</span><span class="token string">"2019-04-27 04:02:06"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不添加该注解：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"shi"</span><span class="token punctuation">,</span><span class="token string">"birth"</span><span class="token operator">:</span><span class="token number">1556351977873</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二-Jackson-Deserialization-Annotations"><a href="#二-Jackson-Deserialization-Annotations" class="headerlink" title="二. Jackson Deserialization Annotations"></a>二. Jackson Deserialization Annotations</h2><h3 id="2-1-JsonCreator"><a href="#2-1-JsonCreator" class="headerlink" title="2.1 @JsonCreator"></a>2.1 <code>@JsonCreator</code></h3><p>我们可以使用@JsonCreator注释来调整反序列化中使用的构造函数/工厂,当我们需要反序列化一些与我们需要获得的目标实体不完全匹配的JSON时，它非常有用。当反序列化时，@JsonCreator注解的构造函数被会调用，如果没有@JsonCreator注解，则默认调用java类的无参构造函数，此时，如果java类中只有有参构造函数，而无默认的无参构造函数，在反序列化时会抛出异常，所以，当我们不使用@JsonCreator指定反序列化的构造函数，而又在java类中重载了构造函数时，一定要记得编写类的无参构造函数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonCreator</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------&gt;"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenDeserializingUsingJsonCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token keyword">final</span> <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"{\"age\":19,\"username\":\"json creater\"}"</span><span class="token punctuation">;</span>       <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readerFor</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">------&gt;json creater=nullUser{name='json creater', age=19}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从上面可以看出，当json字符串里的key和实体属性不完全匹配时，这种方案很有效。而且可以发现，利用这个注解我们也不必为实体添加无参构造器。</p><p>我们稍微改一下实体类，也可以这么用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token comment">//    @JsonCreator</span><span class="token comment">//    public User(@JsonProperty("username") String name) {</span><span class="token comment">//        System.out.println("------&gt;" + name);</span><span class="token comment">//        this.name = name;</span><span class="token comment">//    }</span>    <span class="token annotation punctuation">@JsonCreator</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------&gt;"</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">------&gt;{age=19, username=json creater}User{name='null', age=null}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-JacksonInject"><a href="#2-2-JacksonInject" class="headerlink" title="2.2 @JacksonInject"></a>2.2 <code>@JacksonInject</code></h3><p> 表示属性将从注入中获取其值，而不是从JSON数据中获取.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanWithInject</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JacksonInject</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BeanWithInject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">BeanWithInject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenDeserializingUsingJsonInject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"{\"name\":\"My bean\"}"</span><span class="token punctuation">;</span>       <span class="token class-name">InjectableValues</span> inject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InjectableValues<span class="token punctuation">.</span>Std</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">BeanWithInject</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reader</span><span class="token punctuation">(</span>inject<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">forType</span><span class="token punctuation">(</span><span class="token class-name">BeanWithInject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"My bean"</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的Test会success。</p><h3 id="2-3-JsonAnySetter"><a href="#2-3-JsonAnySetter" class="headerlink" title="2.3 @JsonAnySetter"></a>2.3 <code>@JsonAnySetter</code></h3><p><code>@JsonAnySetter</code>允许我们灵活地使用Map作为标准属性。在反序列化时，JSON中的属性将简单地添加到地图中.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JsonAnyGetter</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@JsonAnySetter</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", properties="</span> <span class="token operator">+</span> properties <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenDeserializingUsingJsonAnySetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"{\"name\":\"My bean\",\"attr2\":\"val2\",\"attr1\":\"val1\"}"</span><span class="token punctuation">;</span>       <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readerFor</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span><span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'My bean'</span><span class="token punctuation">,</span> properties<span class="token operator">=</span><span class="token punctuation">{</span>attr2<span class="token operator">=</span>val2<span class="token punctuation">,</span> attr1<span class="token operator">=</span>val1<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-JsonSetter"><a href="#2-4-JsonSetter" class="headerlink" title="2.4 @JsonSetter"></a>2.4 <code>@JsonSetter</code></h3><p><code>@JsonSetter</code> 将该方法标记为setter方法。当我们需要读取一些JSON数据但目标实体类与该数据不完全匹配时，这非常有用，因此我们需要调整该过程以使其适合.在下面的示例中，我们将指定方法<code>setTheName()</code>作为MyBean实体中name属性的setter ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>     <span class="token annotation punctuation">@JsonSetter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTheName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenDeserializingUsingJsonSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"{\"id\":1,\"name\":\"My bean\"}"</span><span class="token punctuation">;</span>    <span class="token class-name">MyBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">readerFor</span><span class="token punctuation">(</span><span class="token class-name">MyBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"My bean"</span><span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getTheName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的Test会success。</p><h3 id="2-5-JsonDeserialize"><a href="#2-5-JsonDeserialize" class="headerlink" title="2.5 @JsonDeserialize"></a>2.5 <code>@JsonDeserialize</code></h3><p>自定义反序列化器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token annotation punctuation">@JsonDeserialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">CustomDateDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", birth="</span> <span class="token operator">+</span> birth <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenDeserializingUsingJsonDeserialize_thenCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"{\"name\": \"shi\", \"birth\": \"2000-01-01 02:30:00\"}"</span><span class="token punctuation">;</span>       <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">readerFor</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">Student{name='shi', birth=Sat Jan 01 02:30:00 CST 2000}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-6-JsonAlias"><a href="#2-6-JsonAlias" class="headerlink" title="2.6 @JsonAlias"></a>2.6 <code>@JsonAlias</code></h3><p><code>@JsonAlias</code>定义反序列化过程为属性的一个或多个的替代名称.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliasBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JsonAlias</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"fName"</span><span class="token punctuation">,</span> <span class="token string">"f_name"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenDeserializingUsingJsonAlias_thenCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">"{\"fName\": \"John\", \"lastName\": \"Green\"}"</span><span class="token punctuation">;</span>        <span class="token class-name">AliasBean</span> aliasBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readerFor</span><span class="token punctuation">(</span><span class="token class-name">AliasBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aliasBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThat</span><span class="token punctuation">(</span>aliasBean<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">AliasBean(firstName=John, lastName=Green)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.baeldung.com/jackson-annotations">参考:Jackson Annotation Examples</a></p>]]></content>
      
      
      <categories>
          
          <category> jackson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jackson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JOOQ——The easiest way to write SQL in Java</title>
      <link href="2019/04/27/jooq-the-easiest-way-to-write-sql-in-java/"/>
      <url>2019/04/27/jooq-the-easiest-way-to-write-sql-in-java/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在看<a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#_jooq_sql_dialect">springboot官方文档</a>的时候，在数据库连接章节看到了JOOQ，于是了解了一下。</p></blockquote><h2 id="一-什么是JOOQ"><a href="#一-什么是JOOQ" class="headerlink" title="一. 什么是JOOQ"></a>一. 什么是JOOQ</h2><p>JOOQ（Java Object Oriented Querying ）是Data Geekery的一个流行产品，它从数据库中生成Java代码，并允许您通过它的fluent API构建类型安全的SQL查询。JOOQ 既吸取了传统ORM操作数据的简单性和安全性，又保留了原生sql的灵活性，它更像是介于 ORMS和JDBC的中间层。</p><p>官网上说使用jOOQ DSL, SQL看起来几乎是由Java本地支持的，那么就直接看那看看例子吧：</p><p>sql:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> AUTHOR<span class="token punctuation">.</span>FIRST_NAME<span class="token punctuation">,</span> AUTHOR<span class="token punctuation">.</span>LAST_NAME<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> AUTHOR<span class="token keyword">JOIN</span> BOOK <span class="token keyword">ON</span> AUTHOR<span class="token punctuation">.</span>ID <span class="token operator">=</span> BOOK<span class="token punctuation">.</span>AUTHOR_ID<span class="token keyword">WHERE</span> BOOK<span class="token punctuation">.</span><span class="token keyword">LANGUAGE</span> <span class="token operator">=</span> <span class="token string">'DE'</span><span class="token operator">AND</span> BOOK<span class="token punctuation">.</span>PUBLISHED <span class="token operator">&gt;</span> <span class="token keyword">DATE</span> <span class="token string">'2008-01-01'</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> AUTHOR<span class="token punctuation">.</span>FIRST_NAME<span class="token punctuation">,</span> AUTHOR<span class="token punctuation">.</span>LAST_NAME<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> AUTHOR<span class="token punctuation">.</span>LAST_NAME <span class="token keyword">ASC</span> NULLS <span class="token keyword">FIRST</span><span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token keyword">OFFSET</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应java代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>FIRST_NAME<span class="token punctuation">,</span> AUTHOR<span class="token punctuation">.</span>LAST_NAME<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>BOOK<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>ID<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>BOOK<span class="token punctuation">.</span>AUTHOR_ID<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>BOOK<span class="token punctuation">.</span>LANGUAGE<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"DE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>BOOK<span class="token punctuation">.</span>PUBLISHED<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"2008-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>FIRST_NAME<span class="token punctuation">,</span> AUTHOR<span class="token punctuation">.</span>LAST_NAME<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">having</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>LAST_NAME<span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nullsFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出java代码很接近sql的风格，所以写起来还是很流畅。</p><h2 id="二-springboot-jOOQ"><a href="#二-springboot-jOOQ" class="headerlink" title="二. springboot + jOOQ"></a>二. springboot + jOOQ</h2><h3 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1. pom.xml"></a>1. pom.xml</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.justme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jooq-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>jooq-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--h2的 browser-based console 自动配置需要这个jar--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--jooq代码生成 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jooq-codegen-maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>generate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${h2.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbc</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span><span class="token punctuation">&gt;</span></span>org.h2.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>jdbc:h2:~/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">&gt;</span></span>sa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbc</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generator</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>org.jooq.util.DefaultGenerator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>org.jooq.util.h2.H2Database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span> <span class="token punctuation">/&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inputSchema</span><span class="token punctuation">&gt;</span></span>PUBLIC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inputSchema</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packageName</span><span class="token punctuation">&gt;</span></span>justme.cn.jooqdemo.domain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packageName</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>${basedir}/src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generate</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pojos</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pojos</span><span class="token punctuation">&gt;</span></span>                            <span class="token comment">&lt;!--&lt;records&gt;false&lt;/records&gt;--&gt;</span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generate</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generator</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-准备sql"><a href="#2-准备sql" class="headerlink" title="2. 准备sql"></a>2. 准备sql</h3><p>schema.sql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> author <span class="token punctuation">(</span>  id              NUMBER<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  first_name      VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  last_name       VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  date_of_birth   <span class="token keyword">DATE</span><span class="token punctuation">,</span>  year_of_birth   NUMBER<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  distinguished   NUMBER<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>data.sql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> author <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Greg'</span><span class="token punctuation">,</span> <span class="token string">'Turnquest'</span><span class="token punctuation">,</span> <span class="token string">'1804-09-17'</span><span class="token punctuation">,</span> <span class="token number">1804</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> author <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Craig'</span><span class="token punctuation">,</span> <span class="token string">'Walls'</span><span class="token punctuation">,</span> <span class="token string">'1804-09-18'</span><span class="token punctuation">,</span> <span class="token number">1804</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两个放src/main/resources目录下，应用启动后会自动执行。</p><h3 id="3-生成代码"><a href="#3-生成代码" class="headerlink" title="3. 生成代码"></a>3. 生成代码</h3><p>如图</p><p><img src="https://gitee.com/shiv/md-images/raw/master/blog/Xnip2018-11-10_10-30-07.jpg"></p><h3 id="4-编写代码"><a href="#4-编写代码" class="headerlink" title="4. 编写代码"></a>4. 编写代码</h3><p>AuthorService.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DSLContext</span> create<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> fetch <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>ID<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fetch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        List&lt;Author&gt; authors = create.select().from(AUTHOR).where(AUTHOR.ID.eq(id)).fetchInto(Author.class);</span><span class="token comment">//        System.out.println(authors);</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Author</span> author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        create<span class="token punctuation">.</span><span class="token function">insertInto</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> author<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>FIRST_NAME<span class="token punctuation">,</span> author<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">.</span>LAST_NAME<span class="token punctuation">,</span> author<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> fetch <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fetch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert2</span><span class="token punctuation">(</span><span class="token class-name">Author</span> author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AuthorRecord</span> authorRecord <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">newRecord</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>        authorRecord<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        create<span class="token punctuation">.</span><span class="token function">insertInto</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>authorRecord<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> fetch <span class="token operator">=</span> create<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>AUTHOR<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fetch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>justme<span class="token punctuation">.</span>jooqdemo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>justme<span class="token punctuation">.</span>jooqdemo<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>pojos<span class="token punctuation">.</span></span><span class="token class-name">Author</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>justme<span class="token punctuation">.</span>jooqdemo<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">AuthorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JooqDemoApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthorService</span> authorService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        authorService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*     * 输出结果     * +----+----------+---------+-------------+-------------+-------------+     * |  ID|FIRST_NAME|LAST_NAME|DATE_OF_BIRTH|YEAR_OF_BIRTH|DISTINGUISHED|     * +----+----------+---------+-------------+-------------+-------------+     * |   1|Greg      |Turnquest|1804-09-17   |         1804|            1|     * +----+----------+---------+-------------+-------------+-------------+     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token string">"shi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setLastName</span><span class="token punctuation">(</span><span class="token string">"wei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token string">"shi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setLastName</span><span class="token punctuation">(</span><span class="token string">"wei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorService<span class="token punctuation">.</span><span class="token function">insert2</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*     * 输出结果     * +----+----------+---------+-------------+-------------+-------------+     * |  ID|FIRST_NAME|LAST_NAME|DATE_OF_BIRTH|YEAR_OF_BIRTH|DISTINGUISHED|     * +----+----------+---------+-------------+-------------+-------------+     * |   1|Greg      |Turnquest|1804-09-17   |         1804|            1|     * |   2|Craig     |Walls    |1804-09-18   |         1804|            1|     * |   3|shi       |wei      |{null}       |       {null}|       {null}|     * +----+----------+---------+-------------+-------------+-------------+     */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h2><p>初步体验，写java代写起来确实有种写sql的感觉，上手还是挺容易的，后面再继续看看文档，有什么小项目，感觉可以尝试尝试。 jooq还支持主流的RDMS和更多的特性，如self-joins，union，存储过程，复杂的子查询等等。</p>]]></content>
      
      
      <categories>
          
          <category> JOOQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JOOQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud OpenFeign支持POJO提作为GET参数映射</title>
      <link href="2019/04/23/spring-cloud-openfeign-zhi-chi-pojo-ti-zuo-wei-get-can-shu-ying-she/"/>
      <url>2019/04/23/spring-cloud-openfeign-zhi-chi-pojo-ti-zuo-wei-get-can-shu-ying-she/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当我们在SpringCloud项目中引入spring-cloud-starter-openfeign时，如果我们用Feign发送Get请求时，采用POJO对象传递参数，那么会可能会出现异常。那么如果你又不想用@RequestParam一个个参数写在调用方法内，有什么好的解决方案吗？</p></blockquote><p>下面是我在调用某个接口，GET请求：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"BiaoClient"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"${boss.biao.url}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BiaoClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/getDeviceStatus"</span><span class="token punctuation">)</span>    <span class="token class-name">BiaoBaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeviceStatusInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryBiaoInfo</span><span class="token punctuation">(</span><span class="token class-name">DeviceStatusInfoRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当发起调用的时候，会出现异常，大体意思是<code>Request method 'POST' not supported</code>,为什么是POST请求呢？</p><p>究其原因是因为feign默认的远程调用使用的是jdk底层的HttpURLConnection，这在feign-core包下的Client接口中的convertAndSend方法可看到:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>contentLength <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         connection<span class="token punctuation">.</span><span class="token function">setFixedLengthStreamingMode</span><span class="token punctuation">(</span>contentLength<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         connection<span class="token punctuation">.</span><span class="token function">setChunkedStreamingMode</span><span class="token punctuation">(</span><span class="token number">8196</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       connection<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>gzipEncodedRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>         out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GZIPOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>deflateEncodedRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>         out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeflaterOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>         out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>           out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> suppressed<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// NOPMD</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该段代码片段会判断requestBody是否为空，我们知道GET请求默认是不会有requestBody的，因此该段代码会执行到HttpURLConnection中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token class-name">OutputStream</span> <span class="token function">getOutputStream0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>doOutput<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolException</span><span class="token punctuation">(</span><span class="token string">"cannot write to a URLConnection if doOutput=false - call setDoOutput(true)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token string">"POST"</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最关键的代码片段已显示当请求方式为GET请求，会将该GET请求修改为POST请求，这也就是出现该异常的原因。</p><p>那么怎么解决呢?</p><p>当然如果你不用POJO的方式去传递出参数当然是可行的，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"BiaoClient"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"${boss.biao.url}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BiaoClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/getDeviceStatus"</span><span class="token punctuation">)</span>    <span class="token class-name">BiaoBaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeviceStatusInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryBiaoInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"sn"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> sn<span class="token punctuation">,</span>                                                       <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"ack"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> ack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想保持POJO作为参数？依然是有方案的。</p><h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><blockquote><p>目前网上搜索到的都是这个方案。</p></blockquote><p>我们只需将feign底层的远程调用由HttpURLConnection修改为其他远程调用方式即可，而且基本不需要修改太多的代码，这里利用apache的HttpClient。</p><ol><li><code>application.properties</code>加入<code>feign.httpclient.enabled=true</code></li><li>加入依赖</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 使用Apache HttpClient替换Feign原生httpclient --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.netflix.feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.17.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>需要@RequestBody，如下：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"BiaoClient"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"${boss.biao.url}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BiaoClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/getDeviceStatus"</span><span class="token punctuation">)</span>    <span class="token class-name">BiaoBaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeviceStatusInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryBiaoInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">DeviceStatusInfoRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>额外加一句，在GET方法里，加@RequestBody总感觉别扭。。。</em></p><h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>这个方案是Spring Cloud OpenFeign官方提供的，我是在看<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-openfeign/2.1.0.RC3/single/spring-cloud-openfeign.html">官方文档</a>看到的，于是在github上找查看了一下。</p><p><strong>这个方案更推荐使用</strong>！在github上有这样一个<a href="https://github.com/spring-cloud/spring-cloud-openfeign/pull/79/files">Issue</a>——<code>Add support for feign's QueryMap annotation for Object mapping #79</code>,这个Issue已经是closed，看日期是解决是在2018-12-07号。方法也很简单。保持原来的不用改，不需要添加额外的依赖，加一个注解<code>@SpringQueryMap </code>就搞定。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"BiaoClient"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"${boss.biao.url}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BiaoClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/getDeviceStatus"</span><span class="token punctuation">)</span>    <span class="token class-name">BiaoBaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeviceStatusInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryBiaoInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@SpringQueryMap</span> <span class="token class-name">DeviceStatusInfoRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下图是解决这个issue改变的代码：<br><img src="https://gitee.com/shiv/md-images/raw/master/blog/Xnip2019-01-06_23-53-28.jpg"><br>注意，要用该注解，需要升级你的Spring Cloud OpenFeign到新的版本（<code>2.1.0.RC1</code>以及之后的版本）。</p>]]></content>
      
      
      <categories>
          
          <category> feign </category>
          
      </categories>
      
      
        <tags>
            
            <tag> feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis mapper返回支持Optional</title>
      <link href="2019/04/19/mybatis-mapper-fan-hui-zhi-chi-optional/"/>
      <url>2019/04/19/mybatis-mapper-fan-hui-zhi-chi-optional/</url>
      
        <content type="html"><![CDATA[<blockquote><p>java8发布以来，带来了很多的新特性，其中<code>Optional</code>则旨在减少<code>NullPointException</code>，避免if条件的判空,提升了代码的美观度.然而2014年发布java8的很久之后，<code>mabatis</code>都没有很好的支持mapper中返回<code>Optional</code>。终于在<code>mybatis-3.5.0</code>(2019-01-21)中对该功能进行的支持！！！</p></blockquote><h4 id="一-mybatis-3-5-0"><a href="#一-mybatis-3-5-0" class="headerlink" title="一. mybatis-3.5.0"></a>一. mybatis-3.5.0</h4><ol><li><a href="https://github.com/mybatis/mybatis-3/releases">mybatis-3.5.0更新记录</a><pre class="line-numbers language-none"><code class="language-none">Enhancements:Support java.util.Optional as return type of mapper method. #799...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="二-体验"><a href="#二-体验" class="headerlink" title="二. 体验"></a>二. 体验</h4><blockquote><p>springboot + mybatis</p></blockquote></li><li>pom.xml<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.justme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mybatis-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-typehandlers-jsr310 --&gt;</span>        <span class="token comment">&lt;!--&lt;dependency&gt;--&gt;</span>            <span class="token comment">&lt;!--&lt;groupId&gt;org.mybatis&lt;/groupId&gt;--&gt;</span>            <span class="token comment">&lt;!--&lt;artifactId&gt;mybatis-typehandlers-jsr310&lt;/artifactId&gt;--&gt;</span>            <span class="token comment">&lt;!--&lt;version&gt;1.0.2&lt;/version&gt;--&gt;</span>        <span class="token comment">&lt;!--&lt;/dependency&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>mapper<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarApprovalMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from car_approval where car_identify = #{carIdentify}"</span><span class="token punctuation">)</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CarApproval</span><span class="token punctuation">&gt;</span></span> <span class="token function">getByCarIdentity</span><span class="token punctuation">(</span><span class="token class-name">String</span> carIdentify<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into car_approval(car_identify, relation_no, user_id, user_name, remarks, create_time) values(#{carIdentify}, #{relationNo}, #{userId}, #{userName}, #{remarks}, #{createTime})"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">CarApproval</span> carApproval<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>测试<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @date 2019/4/19 14:44 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarApprovalMapperTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CarApprovalMapper</span> carApprovalMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getByCarIdentityTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CarApproval</span><span class="token punctuation">&gt;</span></span> car <span class="token operator">=</span> carApprovalMapper<span class="token punctuation">.</span><span class="token function">getByCarIdentity</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CarApproval</span> carApproval <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarApproval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carApproval<span class="token punctuation">.</span><span class="token function">setCarIdentify</span><span class="token punctuation">(</span><span class="token string">"dsfsdfsfdsfsdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carApproval<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carApproval<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carApproval<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carApprovalMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>carApproval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>大家可以自己动手，跑一下测试，不过多演示了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h4>经过测试，发现mybatis终于可以很爽的支持<code>mapper</code>的<code>Optional</code>的返回了，一起来体验<code>Optional</code>带来优雅便利吧！</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> Optional </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
